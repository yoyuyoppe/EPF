// Автор: Боровик Артём Олегович

#Область ИНИЦИАЛИЗАЦИЯ_ПЕРЕМЕННЫХ

Перем Соединение Экспорт;
Перем Команда;
Перем УзелОбмена;
Перем СоставУзла;
Перем ТаблицаСтатусов;
Перем Автотесты;
Перем Лог1С Экспорт;
Перем СвойствоСклада_ИспользуетсяWMS;
Перем СвойствоДокумента_НомерПалета;
Перем СвойствоДокумента_КоличествоУпаковок;
Перем ТаблицаСопоставленияКачеств;
Перем КлассификаторТиповКорректировокЗапасов;
Перем ЛогКомплекс, ЛогКомплекс_СОХ;
Перем ОрганизацияПоУмолчанию;
Перем ВнешСистема;
Перем КаталогХраненияЛогов;
Перем КаталогОбмена;
Перем ТаблицаАналоговОсновныхКарточек;
Перем КодОперацииКорректировкиПоПросьбеПоклажедателя;

#КонецОбласти 

#Область ПрограммныйИнтерфейс

Процедура ВыгрузитьДанные() Экспорт
	
	Если Соединение = Неопределено Тогда
		Попытка
			Инициализация();
		Исключение
			ТекстСообщения = ОбщиеФункции._СтрШаблон_("Операция 'ВыгрузитьДанные' прервана по причине: %1", ОписаниеОшибки());
			Лог1с.Вывести(ТекстСообщения, СтатусСообщения.ОченьВажное);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЕсли; 
	
	ВыгрузитьЗаявкиВТранзит();
	// Закрываем файл с логом и соединение sql
	Финализировать();
	
КонецПроцедуры

Процедура ЗагрузитьДанные() Экспорт
	
	Если Соединение = Неопределено Тогда
		Попытка
			Инициализация();
		Исключение
			ТекстСообщения = ОбщиеФункции._СтрШаблон_("Операция 'ЗагрузитьДанные' прервана по причине: %1", ОписаниеОшибки());
			Лог1с.Вывести(ТекстСообщения, СтатусСообщения.ОченьВажное);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЕсли;
	
	// 1. Обновляем статусы заявок 1с - транзит
	ОбновитьСтатусыЗаявок();
	// 2. Создаем заявки вмс-1с
	СоздатьЗаявкиДля1С();
	// Закрываем файл с логом и соединение sql		
	Финализировать();
	
КонецПроцедуры

Процедура СоздатьЧерновикиЗаявок() Экспорт
	
	Документы.ОтгрузкаТоваровУслуг.СоздатьЧерновики();
	Финализировать();
	
	// Альтернативный способ, если по всем документам реализовать интерфейс "СоздатьЧерновики"
	//Для каждого ЭлКоллекции Из СоставУзла Цикл
	//	
	//	ОбъектЯвляетсяДокументом = Метаданные.НайтиПоПолномуИмени("Документ."+ЭлКоллекции.Метаданные.Имя);
	//	
	//	Если ОбъектЯвляетсяДокументом = Неопределено Тогда
	//		Продолжить;
	//	КонецЕсли; 
	//	
	//	Попытка
	//		Документы[ЭлКоллекции.Метаданные.Имя].СоздатьЧерновики(); 			
	//	Исключение
	//	    Лог1С.Вывести("Ошибка при выполнении операции 'СоздатьЧерновики' для объекта метаданных '{0}' по причине: {1}", СтатусСообщения.Внимание, ЭлКоллекции.Метаданные.Имя, ОписаниеОшибки());
	//	КонецПопытки;
	//	
	//КонецЦикла; 	
	
КонецПроцедуры

Процедура ПодготовитьЧерновикиКОтправке() Экспорт
	
	Документы.ОтгрузкаТоваровУслуг.ПодготовитьЧерновикиКОтправке();
	Финализировать();
	
КонецПроцедуры

Процедура ПолучитьЗапасыНаСкладеИзWMS(ПараметрыОтчета, ТолькоПросмотр) Экспорт
	
	Лог1С.Вывести("Запущена процедура получения остатков из WMS", СтатусСообщения.Информация);
	
	Если Соединение = Неопределено Тогда
		Попытка
			Инициализация();
		Исключение
			ТекстСообщения = ОбщиеФункции._СтрШаблон_("Операция 'ПолучитьЗапасыНаСкладеИзWMS' прервана по причине: %1", ОписаниеОшибки());
			Лог1с.Вывести(ТекстСообщения, СтатусСообщения.ОченьВажное);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЕсли;
	
	ПараметрыОтчетаСтрокой = "";
	
	Для каждого КлючИЗначение Из ПараметрыОтчета Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ПараметрыОтчетаСтрокой = ОбщиеФункции._СтрШаблон_("%1%2@%3='%4'", ПараметрыОтчетаСтрокой, ?(ПараметрыОтчетаСтрокой = "", "", ", "), КлючИЗначение.Ключ, КлючИЗначение.Значение)			
		КонецЕсли; 
	КонецЦикла; 
	
	Попытка
		Лог1С.Вывести("Идет получение данных", СтатусСообщения.Информация);
		Результат = ВыполнитьКоманду("exec repWarehouseSummary "+ПараметрыОтчетаСтрокой);	
	Исключение
		Сообщить(ОбщиеФункции._СтрШаблон_("Операция 'ПолучитьЗапасыНаСкладеИзWMS' прервана по причине: %1", ОписаниеОшибки()));
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	ТабЗнач = ПоместитьНаборЗаписейSQLВТабЗнач(Результат);
	Лог1С.Вывести("Данные получены", СтатусСообщения.Информация);
	
	Попытка
		Если НЕ ТолькоПросмотр Тогда
			Лог1С.Вывести("Запущена процедура создания инвентаризационных описей", СтатусСообщения.Информация);
			СоздатьИнвОписи(ТабЗнач);
		Иначе
			Лог1С.Вывести("Запущена процедура формирования отчета", СтатусСообщения.Информация);
			СформироватьОтчет(ТабЗнач);
		КонецЕсли;	
	Исключение
		Лог1С.Вывести("Не удалось выполнить операцию 'ПолучитьЗапасыНаСкладеИзWMS' по причине: {0}", СтатусСообщения.ОченьВажное, ОписаниеОшибки());
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;	 
	
КонецПроцедуры

Процедура УстановитьСоединение() Экспорт
	
	Если Соединение <> Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	//Подключение к SQL-серверу
	Если ОбщиеФункции.ЭтоТестоваяБаза() Тогда
		СтрокаПодключения = Справочники.ВнешниеСистемы.ПолучитьЗначенияКлюча(ВнешСистема, "СтрокаСоединенияКТестовойБазеТранзит");		
	Иначе
		СтрокаПодключения = Справочники.СтрокиСоединенияСБазами.TRANSIT.Наименование;
	КонецЕсли; 
	
	Если НЕ Справочники.СтрокиСоединенияСБазами.TRANSIT.ДоступКБазеЗапрещен Тогда
		
		Попытка
			Соединение  = Новый COMОбъект("ADODB.Connection");
			Команда     = Новый COMОбъект("ADODB.Command");			
			Соединение.ConnectionString = ОбщиеФункции._СтрШаблон_(СтрокаПодключения, "agat190srx");
			//Соединение.ConnectionString = "Provider=SQLOLEDB.1;User ID=sa_dev;Pwd=agat190srx;Persist Security Info=True;Data Source=217.25.210.138,1433;Initial Catalog=TRANSIT;";
			Соединение.ConnectionTimeout = 15;
			Соединение.CommandTimeout = 600;
			Соединение.Open();
			Команда.ActiveConnection   = Соединение;
			Команда.CommandTimeout = 600;
		Исключение
			Сообщить("Внимание соединение с сервером базы TRANSIT не установлено. Дальнейшая работа невозможна");
			Сообщить(ОписаниеОшибки());
			Соединение = Неопределено;
			//Возврат;
		КонецПопытки;
		
	Иначе
		
		Сообщить("Доступ к базе запрещен: "+Справочники.СтрокиСоединенияСБазами.TRANSIT.Наименование, СтатусСообщения.Внимание);			
		
	КонецЕсли;
	
КонецПроцедуры

#Область РАБОТА_С_ЗАЯВКАМИ

Процедура СоздатьЗаявкиПоПервичкеДляТранзита(Кластер) Экспорт
	
	ТаблицаНастроекСтруктур = Справочники.ОписаниеСтруктурТранзитнойБазы.ПолучитьНастройкиСтруктурВПорядкеВыполнения_Первичка();
	
	Для каждого Настройка Из ТаблицаНастроекСтруктур Цикл
		
		#Если Сервер Тогда
			Сообщить("#!Выполняется выгрузка справочника: "+Настройка.Ссылка);      	
		#КонецЕсли 
		
		ИдПакета = Строка(Новый УникальныйИдентификатор());
		
		Справочники.ОписаниеСтруктурТранзитнойБазы.СформироватьТекстЗаявки(Настройка.Ссылка, 
		Новый Структура("ИдПакета, Лог1С, УдалятьРегистрациюИзменений, ОтобразитьСодержимое, ТекДата, Кластер", ИдПакета, Лог1С, Истина, Ложь, ТекущаяДата(), Кластер));
		
		#Если Сервер Тогда
			Сообщить("#!Выгрузка справочника: "+Настройка.Ссылка+" завершена");      	
		#КонецЕсли
		
	КонецЦикла; 
	
	Финализировать();	
	
КонецПроцедуры

Процедура СоздатьЗаявкиДляТранзита() Экспорт
	
	ТаблицаНастроекСтруктур = Справочники.ОписаниеСтруктурТранзитнойБазы.ПолучитьНастройкиСтруктурВПорядкеВыполнения();
	
	Для каждого Настройка Из ТаблицаНастроекСтруктур Цикл
		
		ИдПакета = Строка(Новый УникальныйИдентификатор());
		
		Справочники.ОписаниеСтруктурТранзитнойБазы.СформироватьТекстЗаявки(Настройка.Ссылка, 
		Новый Структура("ИдПакета, Лог1С, УдалятьРегистрациюИзменений, ОтобразитьСодержимое, ТекДата", ИдПакета, Лог1С, Истина, Ложь, ТекущаяДата()));
		
	КонецЦикла; 
	
	Финализировать();
	
КонецПроцедуры

Процедура ОбработатьЗаявкиДля1С() Экспорт
	
	Лог1С.Вывести("Начало обработки заявок 1С", СтатусСообщения.Обычное);
	
	Если Соединение = Неопределено Тогда
		Попытка
			Инициализация();
		Исключение
			ТекстСообщения = ОбщиеФункции._СтрШаблон_("Операция 'ОбработатьЗаявкиДля1С' прервана по причине: %1", ОписаниеОшибки());
			Лог1с.Вывести(ТекстСообщения, СтатусСообщения.ОченьВажное);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЕсли;
	
	Источник = "WMS";
	Приемник = "1С";
	
	НовыеЗаявки = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьЗаявкиПоСтатусам("*",
	Справочники.СтатусыЗаявок.Новая, Источник, Приемник,
	"Документ.РегистраторЗаписи",, "УПОРЯДОЧИТЬ ПО ДатаЗаписи");	
	
	Для каждого СтрТаб Из НовыеЗаявки Цикл
		
		Если НЕ ТранзакцияАктивна() Тогда
			НачатьТранзакцию();
		КонецЕсли; 
		
		СтруктураЗаписи = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьСтруктуруЗаписи();
		ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрТаб);
		
		Попытка
			Выполнить(СтрТаб.Текст);
			СтруктураЗаписи.Статус = Справочники.СтатусыЗаявок.УспешноОбработана;
			Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("Заявка с идентификатором '%1' выполнена успешно", СтрТаб.Идентификатор), СтатусСообщения.Информация);
		Исключение
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();					
			КонецЕсли; 
			
			СтруктураЗаписи.ОшибкиВыполнения = ИнформацияОбОшибке().Описание;
			СтруктураЗаписи.Статус = Справочники.СтатусыЗаявок.Отклонена;			
			
			Лог1С.Вывести("Не удалось выполнить заявку с идентификатором {0} по причине: {1}", СтатусСообщения.ОченьВажное, СтрТаб.Идентификатор, ОписаниеОшибки());
			Перейти ~БезПодтвержденияDOCNUM;
			
		КонецПопытки;
		
		// Отметить в транзите, что заявка с идентификатором выполнена
		Если ЗначениеЗаполнено(СтруктураЗаписи.Идентификатор) Тогда
			
			Попытка
				ВыполнитьКоманду(ОбщиеФункции._СтрШаблон_("exec DocNumIsDone @DocNum='%1', @checked_by='%2', @proc_date='%3', @autotest=%4",
				СтрТаб.Идентификатор, 
				Формат(СтруктураЗаписи.ДатаВремяПолученияЗаявкиСервисом, "ДФ='dd-MM-yyyy HH:mm:ss'"),
				Формат(ТекущаяДата(), "ДФ='dd-MM-yyyy HH:mm:ss'"),
				Формат(Автотесты, "БЛ=0; БИ=1"))
				);
			Исключение
				
				Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("Не удалось установить (PROCESSED_STATUS_DATE, PROCESSED_STATUS, CHECKED_BY_PI) в таблицах (DOCNUM, hdr_DeliveryResponce, tbl_DeliveryResponce) для идентификатору пакета '%1' по причине:
				|%2", СтрТаб.Идентификатор, ОписаниеОшибки()), СтатусСообщения.ОченьВажное);		
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				СтруктураЗаписи.ОшибкиВыполнения = ИнформацияОбОшибке().Описание;
				СтруктураЗаписи.Статус = Справочники.СтатусыЗаявок.Отклонена;			
				
				Лог1С.Вывести("Не удалось подтвердить заявку с идентификатором {0} в транзитной базе по причине: {1}", СтатусСообщения.ОченьВажное, СтрТаб.Идентификатор, ИнформацияОбОшибке().Описание);
				
			КонецПопытки;
			
		КонецЕсли; 
		
		~БезПодтвержденияDOCNUM:
		
		СтруктураЗаписи.ДатаВремяПолученияРезультатаВыполненияЗаявки = ТекущаяДата();
		
		// Если автотесты, Тогда выполним одну заявку и прервем цикл
		Если Автотесты Тогда
			Прервать;
		КонецЕсли; 
		
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли; 
		
		РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДобавитьЗапись(СтруктураЗаписи);	
		
	КонецЦикла;
	
	Лог1С.Вывести("Окончание обработки заявок 1С", СтатусСообщения.Обычное);
	
	// Закрываем файл с логом и соединение sql
	Финализировать();
	
КонецПроцедуры 

Процедура ВыгрузитьЗаявкиВТранзит()
	
	Заявки = ПолучитьЗаявкиДляОбработки();
	
	Для каждого СтрЗаявка Из Заявки Цикл
		
		ТекстОшибки = "";
		
		Попытка
			ВыполнитьКоманду(СтрЗаявка.Текст, Истина, Новый Структура("ИмяТранзакции, ОписаниеТранзакции", СтрЗаявка.Объект.Номер+"_"+Формат(СтрЗаявка.Объект.Дата,"ДФ=yyyyMMddHHmmss"), ""+СтрЗаявка.Объект));
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Лог1С.Вывести("Не удалось выгрузить заявку с идентификатором '{0}' по причине: 
			|	{1}", СтатусСообщения.ОченьВажное, СтрЗаявка.Идентификатор, ТекстОшибки);
			Если Автотесты Тогда
				ВызватьИсключение ТекстОшибки;
			КонецЕсли; 
		КонецПопытки;
		
		СтруктураЗаписи = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьСтруктуруЗаписи();
		ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрЗаявка);
		
		СтруктураЗаписи.ДатаВремяПолученияЗаявкиСервисом = ТекущаяДата();
		СтруктураЗаписи.ДатаЗаписи = ТекущаяДата();
		СтруктураЗаписи.Статус = ?(ПустаяСтрока(ТекстОшибки), Справочники.СтатусыЗаявок.Отправлена, Справочники.СтатусыЗаявок.Отклонена);
		СтруктураЗаписи.ОшибкиВыполнения = ТекстОшибки;
		
		РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДобавитьЗапись(СтруктураЗаписи);
		
	КонецЦикла;
	
КонецПроцедуры	 

Процедура СоздатьЗаявкиДля1С()
	
	// Получить ответы WMS по заявкам, отправленных из 1с в транзит
	ПолучитьОтветыWMSПоЗаявкам();
	
	// Получить заявки, удаленные в B2B
	ПолучитьЗаказыУдаленныеИзБ2Б();
	
	// Получить корректировки запасов ячейки при инветаризации
	//ПолучитьКорректировкиЗапасов();
	
КонецПроцедуры

#КонецОбласти

#Область РАБОТА_С_ДОКУМЕНТАМИ

Процедура СоздатьДокументы1С(ИдентификаторПакета)
	
	ТекЗаявка = Неопределено;
	РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ЗаписьСуществует(Новый Структура("Источник, Приемник, Идентификатор", "WMS", "1С", ИдентификаторПакета), ТекЗаявка);
	
	Если ТекЗаявка = Неопределено Тогда
		Лог1С.Вывести("Не удалось найти в журнале заявку с идентификатором: {1}", СтатусСообщения.Внимание, ИдентификаторПакета);
		Возврат;	
	КонецЕсли; 
	
	Попытка
		Результат = ВыполнитьКоманду(ОбщиеФункции._СтрШаблон_("exec GetDeliveryResponce @DocNum='%1'", ИдентификаторПакета));
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Попытка
		ДляЗаполнения = ПолучитьДанныеДляЗаполненияДокументов(Результат);
		ОбработкаЗаполненияДокументов(ДляЗаполнения);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	// В журнале заявок добавим запись по документу, что документ успешно обработан в 2-х системах
	Если ЗначениеЗаполнено(ДляЗаполнения.Ссылка)
		И ТипЗнч(ДляЗаполнения.Ссылка) <> Тип("Строка") Тогда
		
		СтруктураЗаписи = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьСтруктуруЗаписи();
		СтруктураЗаписи.Объект = ДляЗаполнения.Ссылка;
		СтруктураЗаписи.Источник = "WMS";
		СтруктураЗаписи.Приемник = "1С";
		СтруктураЗаписи.Идентификатор = ИдентификаторПакета;
		СтруктураЗаписи.ДатаВремяПолученияРезультатаВыполненияЗаявки = ТекущаяДата();
		СтруктураЗаписи.ДатаЗаписи = ТекущаяДата();
		СтруктураЗаписи.Статус = Справочники.СтатусыЗаявок.УспешноОбработана;
		
		РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДобавитьЗапись(СтруктураЗаписи);
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ПроверитьСтруктуруПодчиненности(КритерийОтбора, Основание, ТипПодчиненногоОбъекта)
	
	Результат = Ложь;	
	
	МассивПодчиненныхДокументов = КритерийОтбора.Найти(Основание);
	
	Для каждого ЭлМассива Из МассивПодчиненныхДокументов Цикл
		
		Результат = (ТипЗнч(ЭлМассива.Ссылка) = ТипПодчиненногоОбъекта) И ЭлМассива.Ссылка.Проведен;
		
		Если Результат Тогда
			Прервать;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДоступныеКолонкиДокумента(МетаданныеДокумента)
	
	ЖелаемыеКолонки = "GUID_Строки, Номенклатура, ДоговорВладельца, ЕдиницаИзмерения, Качество, Количество, СерияНоменклатуры";
	РеквизитыТЧ = МетаданныеДокумента.ТабличныеЧасти.Товары.Реквизиты;
	
	ДоступныеКолонки = "НомерСтроки";
	
	Для каждого реквизит Из РеквизитыТЧ Цикл
		
		Если Найти(ВРЕГ(ЖелаемыеКолонки), ВРЕГ(реквизит.Имя)) > 0 Тогда
			ДоступныеКолонки = ДоступныеКолонки + ?(ДоступныеКолонки = "", "", ",")	+ реквизит.Имя;	
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат ДоступныеКолонки;
	
КонецФункции 

Процедура ДобавитьНовуюСтрокуВСостав(Состав, Данные, НомерСтроки)
	
	НовСтр = Состав.Добавить();
	НовСтр.GUID_Строки			= Данные.Fields("ExternalCode").Value;  //{[+]Боровик Артем Олегович 01.05.2020 15:14:04
	НовСтр.НомерСтроки			= НомерСтроки;
	НовСтр.Номенклатура 		= Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Данные.Fields("MaterialCode").Value));
	НовСтр.ЕдиницаИзмерения 	= Справочники.ЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(Данные.Fields("MaterialUnitCode").Value));	
	НовСтр.КоличествоФакт		= Число(Данные.Fields("Quantity").Value);
	НовСтр.Качество				= ПолучитьСопоставленноеКачество(Данные.Fields("QualityTypeCode").Value); //{[+]Боровик Артем Олегович 01.05.2020 15:14:04
	
	Если Данные.Fields("ProductionDate").Value <> NULL Тогда
		НовСтр.ДатаПроизводства = Данные.Fields("ProductionDate").Value;	
	КонецЕсли;
	
	Если Данные.Fields("ExpirationDate").Value <> NULL Тогда
		НовСтр.СрокГодности 	= Данные.Fields("ExpirationDate").Value;	
	КонецЕсли;
	
КонецПроцедуры

// Функция - Получить данные для заполнения документов
// Обрабатывает ответ, полученный в результате выполнения функции "GetDeliveryResponce" в транзитной базе
// Параметры:
//  Ответ	 - ComObject	 - 
// 
// Возвращаемое значение:
//   - Структура с ключами "Ссылка, Состав"
//
Функция ПолучитьДанныеДляЗаполненияДокументов(Ответ)
	
	ДляЗаполнения = Новый Структура("Ссылка, Состав, Состояние");
	
	НомерСтроки = 1;
	
	ТипДокумента = "";
	
	Пока НЕ Ответ.EOF Цикл
		
		Если Ответ.Fields("DeliveryTypeCode").Value <> NULL Тогда
			
			ТипДокумента = Ответ.Fields("DeliveryTypeCode").Value;
			// Заголовки документа
			Ссылка = НайтиОбъектПоИД(Ответ.Fields("DeliveryRequestCode").Value, Ответ.Fields("DeliveryTypeCode").Value);
			
			Если НЕ ЗначениеЗаполнено(Ссылка)
				ИЛИ Найти(Строка(Ссылка), "Object") > 0
				ИЛИ Найти(Строка(Ссылка), "Объект") > 0 Тогда
				ТекстОшибки = ОбщиеФункции._СтрШаблон_("Не удалось получить ссылку с идентификатором: %1", Ответ.Fields("DeliveryRequestCode").Value);
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			ДляЗаполнения.Ссылка = Ссылка;
			ДляЗаполнения.Состояние = Ответ.Fields("Status").Value; 				
			
			Если ЗначениеЗаполнено(Ответ.Fields("PaletNumbers").Value) Тогда
				ДляЗаполнения.Вставить("НомераПалетов", Ответ.Fields("PaletNumbers").Value);
				Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("(DOCNUM: %1) Для документа '%2' со статусом CONSOLIDATED заполнены номера палетов (%3)", Ответ.Fields("DOCNUM").Value, ДляЗаполнения.Ссылка, Ответ.Fields("PaletNumbers").Value), СтатусСообщения.Информация);
			ИначеЕсли ДляЗаполнения.Состояние = "CONSOLIDATED" И НЕ ЗначениеЗаполнено(Ответ.Fields("PaletNumbers").Value) Тогда 	
				Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("(DOCNUM: %1) Для документа '%2' со статусом CONSOLIDATED не заполнены номера палетов", Ответ.Fields("DOCNUM").Value, ДляЗаполнения.Ссылка), СтатусСообщения.Внимание);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Ответ.Fields("QuantityOfPackages").Value) Тогда
				ДляЗаполнения.Вставить("КоличествоУпаковок", Ответ.Fields("QuantityOfPackages").Value);
			КонецЕсли;
			
			ДляЗаполнения.Состав = Ссылка.Товары.ВыгрузитьКолонки(ПолучитьДоступныеКолонкиДокумента(Ссылка.Метаданные()));			
			ДляЗаполнения.Состав.Колонки.Добавить("КоличествоФакт", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10,3)));
			ДляЗаполнения.Состав.Колонки.Добавить("ДатаПроизводства", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
			ДляЗаполнения.Состав.Колонки.Добавить("СрокГодности", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
			ДляЗаполнения.Состав.Колонки.Добавить("Партия");
			Если ДляЗаполнения.Состав.Колонки.Найти("Качество") = Неопределено Тогда
				ДляЗаполнения.Состав.Колонки.Добавить("Качество", Новый ОписаниеТипов("СправочникСсылка.Качество"));
			КонецЕсли;
			
		Иначе
			
			Если Число(Ответ.Fields("Quantity").Value) = 0 Тогда
				Ответ.MoveNext();
				Продолжить;
			КонецЕсли; 
			
			СтрокаОтгрузки = ДляЗаполнения.Ссылка.Товары.Найти(Ответ.Fields("ExternalCode").Value, "GUID_Строки");
			
			Если СтрокаОтгрузки = Неопределено и ТипЗнч(ДляЗаполнения.Ссылка) <> Тип("ДокументСсылка.ОтгрузкаТоваровУслуг") Тогда
				ДобавитьНовуюСтрокуВСостав(ДляЗаполнения.Состав, Ответ, НомерСтроки);
				НомерСтроки = НомерСтроки + 1;
				Ответ.MoveNext();
				Продолжить;
			ИначеЕсли СтрокаОтгрузки = Неопределено и ТипЗнч(ДляЗаполнения.Ссылка) = Тип("ДокументСсылка.ОтгрузкаТоваровУслуг") Тогда 	
				ТекстОшибки = ОбщиеФункции._СтрШаблон_("Не найдена строка отгрузки по GUID_Строки: '%1'", Ответ.Fields("ExternalCode").Value);
				Лог1С.Вывести(ТекстОшибки, СтатусСообщения.ОченьВажное);
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			// Таб. часть
			НовСтр = ДляЗаполнения.Состав.Добавить();
			НовСтр.GUID_Строки = Ответ.Fields("ExternalCode").Value;
			
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаОтгрузки);
			
			НовСтр.НомерСтроки = НомерСтроки;
			
			НовСтр.Количество = СтрокаОтгрузки.Количество;
			НовСтр.КоличествоФакт = Число(Ответ.Fields("Quantity").Value);
			
			Если Ответ.Fields("MaterialUnitCode").Value <> NULL Тогда
				НовСтр.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(Ответ.Fields("MaterialUnitCode").Value));	
			КонецЕсли; 
			
			Если НовСтр.ЕдиницаИзмерения <> НовСтр.Номенклатура.ЕдиницаХраненияОстатков Тогда
				
				НовСтр.КоличествоФакт = ?(НовСтр.ЕдиницаИзмерения.Коэффициент > НовСтр.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
				НовСтр.КоличествоФакт * НовСтр.ЕдиницаИзмерения.Коэффициент,   
				НовСтр.КоличествоФакт / НовСтр.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент);
				
			КонецЕсли;
			
			Если Ответ.Fields("ProductionDate").Value <> NULL Тогда
				НовСтр.ДатаПроизводства = Ответ.Fields("ProductionDate").Value;	
			КонецЕсли;
			
			Если Ответ.Fields("ExpirationDate").Value <> NULL Тогда
				НовСтр.СрокГодности = Ответ.Fields("ExpirationDate").Value;	
			КонецЕсли;
			
			Если Ответ.Fields("MaterialSeriesCode").Value <> NULL Тогда
				НовСтр.Партия = Ответ.Fields("MaterialSeriesCode").Value;	
			КонецЕсли; 
			
			Если Ответ.Fields("QualityTypeCode").Value <> NULL Тогда
				
				Если ТипДокумента = "OUT" Тогда
					НовСтр.Качество = СтрокаОтгрузки.Качество;
				Иначе
					НовСтр.Качество = ПолучитьСопоставленноеКачество(Ответ.Fields("QualityTypeCode").Value);
				КонецЕсли; 
				
			КонецЕсли;
			
			Если СтрокаОтгрузки.ЕдиницаИзмерения <> СтрокаОтгрузки.Номенклатура.ЕдиницаХраненияОстатков Тогда
				
				НовСтр.Количество = ?(СтрокаОтгрузки.ЕдиницаИзмерения.Коэффициент > НовСтр.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
				СтрокаОтгрузки.Количество * СтрокаОтгрузки.ЕдиницаИзмерения.Коэффициент,   
				СтрокаОтгрузки.Количество / НовСтр.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент);
				
			КонецЕсли;
			
			НовСтр.ЕдиницаИзмерения = СтрокаОтгрузки.Номенклатура.ЕдиницаХраненияОстатков;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЕсли; 
		
		Ответ.MoveNext();
		
	КонецЦикла; 
	
	// Найдем не отобранные товары и допишем их в состав с количеством 0
	Если ЗначениеЗаполнено(ДляЗаполнения.Ссылка) Тогда
		
		Для каждого СтрТабЧасть Из ДляЗаполнения.Ссылка.Товары Цикл
			
			Если ТипДокумента = "IN" Тогда
				Прервать;	
			КонецЕсли; 
			
			Если ДляЗаполнения.Состав.Найти(СтрТабЧасть.GUID_Строки, "GUID_Строки") = Неопределено Тогда
				
				НовСтр = ДляЗаполнения.Состав.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, СтрТабЧасть);
				
				НовСтр.НомерСтроки = ДляЗаполнения.Состав.Количество() + 1;
				
			КонецЕсли; 
			
		КонецЦикла;
	Иначе
		ВызватьИсключение "Процедура 'GetDeliveryResponce' вернула пустой набор записей";
	КонецЕсли; 
	
	Возврат ДляЗаполнения;
	
КонецФункции

Процедура ОбработкаЗаполненияДокументов(ДляЗаполнения)
	
	Если ТипЗнч(ДляЗаполнения.Ссылка) = Тип("ДокументСсылка.ОтгрузкаТоваровУслуг") Тогда
		
		СоздатьДокументыРеализации(ДляЗаполнения);
		
	ИначеЕсли ТипЗнч(ДляЗаполнения.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда 
		
		СоздатьДокументыЗакупок(ДляЗаполнения);
		
	ИначеЕсли ТипЗнч(ДляЗаполнения.Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров")
		И ДляЗаполнения.Ссылка.Склад = ЛогКомплекс Тогда 	// Отправитель лог. комплекс
		
		СоздатьДокументыПоИсходящимПеремещениям(ДляЗаполнения);
		
	ИначеЕсли ТипЗнч(ДляЗаполнения.Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров")
		И ДляЗаполнения.Ссылка.СкладПолучатель = ЛогКомплекс Тогда 	// Получатель лог. комплекс
		
		СоздатьДокументыПоВходящимПеремещениям(ДляЗаполнения);
		
	ИначеЕсли ТипЗнч(ДляЗаполнения.Ссылка) = Тип("ДокументСсылка.СписаниеТоваров") Тогда 	
		
		ОбновитьСписаниеТоваров(ДляЗаполнения);
		
	ИначеЕсли ТипЗнч(ДляЗаполнения.Ссылка) = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда 	
		
		ОбновитьОприходованиеТоваров(ДляЗаполнения);	
		
	ИначеЕсли ТипЗнч(ДляЗаполнения.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда 	
		
		СоздатьДокументыПоВозвратуОтПокупателя(ДляЗаполнения);
		
	ИначеЕсли ТипЗнч(ДляЗаполнения.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда 	
		
		СоздатьДокументыПоВозвратуПоставщику(ДляЗаполнения);			
		
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ОтменитьПроведениеДокумента(ИдДокумента, ТипДокумента, ДатаУдаленияБ2Б, ПользовательВМС)
	
	ДокСсылка = НайтиОбъектПоИД(ИдДокумента, ТипДокумента);
	
	Если НЕ ЗначениеЗаполнено(ДокСсылка)
		ИЛИ Найти(Строка(ДокСсылка), "Object") > 0
		ИЛИ Найти(Строка(ДокСсылка), "Объект") > 0 Тогда
		ТекстОшибки = ОбщиеФункции._СтрШаблон_("Не удалось получить ссылку с идентификатором: %1", ИдДокумента);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.ОтгрузкаТоваровУслуг")
		И ПроверитьСтруктуруПодчиненности(КритерииОтбора.ДокументыПоОтгрузкеТоваровУслуг, ДокСсылка, Тип("ДокументСсылка.РасходныйСкладскойОрдер")) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		ДокОбъект = ДокСсылка.ПолучитьОбъект();
		ДокОбъект.Комментарий = ОбщиеФункции._СтрШаблон_("%1	Документ распроведен по причине: удален из WMS в ""%2"" пользователем ""%3""", 
		ДокСсылка.Комментарий, ДатаУдаленияБ2Б, ПользовательВМС);
		
		Если ДокОбъект.Проведен Тогда
			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);			
		Иначе
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли; 
		
		Если НЕ ДокОбъект.ПометкаУдаления Тогда
			ДокОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли; 
		
		РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.УдалитьЗапись(Новый Структура("Объект, Источник, Приемник", ДокСсылка, "1С", "TRANSIT"));
		РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.УдалитьЗапись(Новый Структура("Объект, Источник, Приемник", ДокСсылка, "WMS", "1С"));							
		
	Исключение
		ТекстОшибки = ОбщиеФункции._СтрШаблон_("Не удалось выполнить операцию 'ОтменитьПроведениеДокумента' по причине: ", ОписаниеОшибки());
		Лог1С.Вывести(ТекстОшибки, СтатусСообщения.ОченьВажное);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры

#Область РЕАЛИЗАЦИЯ

Процедура СоздатьДокументыРеализации(ДляЗаполнения)
	
	Если НЕ ДляЗаполнения.Ссылка.Проведен Тогда
		Лог1С.Вывести("Не удалось создать цепочку документов на основании {0} по причине: документ не проведен", 
		СтатусСообщения.Внимание, ДляЗаполнения.Ссылка);
		Возврат;
	КонецЕсли;
	
	// Создать документ "Задание складу на отбор"
	Если НЕ ПроверитьСтруктуруПодчиненности(КритерииОтбора.ДокументыПоОтгрузкеТоваровУслуг, ДляЗаполнения.Ссылка, Тип("ДокументСсылка.ЗаданиеСкладуНаОтбор")) Тогда
		СоздатьЗаданиеСкладуНаОтбор(ДляЗаполнения);
	КонецЕсли; 
	
	// Создать документ "Отбор запасов на складе"
	Если НЕ ПроверитьСтруктуруПодчиненности(КритерииОтбора.ДокументыПоОтгрузкеТоваровУслуг, ДляЗаполнения.Ссылка, Тип("ДокументСсылка.ОтборЗапасовНаСкладе")) Тогда
		СоздатьОтборЗапасовНаСкладе(ДляЗаполнения);
	КонецЕсли;
	
	// Создать документ "Расходный складской ордер"
	Если НЕ ПроверитьСтруктуруПодчиненности(КритерииОтбора.ДокументыПоОтгрузкеТоваровУслуг, ДляЗаполнения.Ссылка, Тип("ДокументСсылка.РасходныйСкладскойОрдер")) Тогда
		СоздатьРасходныйСкладскойОрдер(ДляЗаполнения);
	КонецЕсли;
	
	ЗаполнитьСвойстваДокументов(ДляЗаполнения);
	
КонецПроцедуры 

Процедура СоздатьДокументыПоВозвратуОтПокупателя(ДляЗаполнения)
	
	Если НЕ ПроверитьСтруктуруПодчиненности(КритерииОтбора.ДокументыПоВозвратуОтПокупателя, ДляЗаполнения.Ссылка, Тип("ДокументСсылка.ПриходныйСкладскойОрдер")) Тогда
		СоздатьПриходныйСкладскойОрдер(ДляЗаполнения);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти 

#Область ЗАКУПКИ

Процедура СоздатьПоступлениеТоваровУслуг(ДляЗаполнения)
	
	Если ВРЕГ(ДляЗаполнения.Состояние) <>  "COMPLETED"
		ИЛИ ДляЗаполнения.Свойство("ПриходныйОрдер") = Ложь Тогда
		Возврат;	
	КонецЕсли; 
	
	Попытка
		Лог1С.Вывести("Попытка создать ПТУ на основании {0}", СтатусСообщения.БезСтатуса, ДляЗаполнения.Ссылка);
		ДокОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		Лог1С.Вывести("Удалось создать ПТУ на основании {0}", СтатусСообщения.БезСтатуса, ДляЗаполнения.Ссылка);
		ДокОбъект.Заполнить(ДляЗаполнения.Ссылка);
		Лог1С.Вывести("Удалось заполнить ПТУ на основании {0}", СтатусСообщения.БезСтатуса, ДляЗаполнения.Ссылка);
		ДокОбъект.Дата = ТекущаяДата();
		ДокОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
		
		// Заполним колонку "Приходный ордер"
		Для каждого СтрТабЧасть Из ДокОбъект.Товары Цикл
			СтрТабЧасть.ПриходныйОрдер = ДляЗаполнения.ПриходныйОрдер;
		КонецЦикла; 
		
		ДокОбъект.Записать();
		Лог1С.Вывести("Попытка создать ПТУ на основании {0} завершена успешно", СтатусСообщения.БезСтатуса, ДляЗаполнения.Ссылка);
	Исключение
		Лог1С.Вывести("Не удалось создать ПТУ на основании '{0}' по причине: {1}", СтатусСообщения.ОченьВажное, ДляЗаполнения.Ссылка, ОписаниеОшибки());
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьДокументыПоВозвратуПоставщику(ДляЗаполнения)
	
	Если НЕ ПроверитьСтруктуруПодчиненности(КритерииОтбора.ДокументыПоВозвратуПоставщику, ДляЗаполнения.Ссылка, Тип("ДокументСсылка.РасходныйСкладскойОрдер")) Тогда
		СоздатьРасходныйСкладскойОрдер(ДляЗаполнения);
	КонецЕсли;	
	
КонецПроцедуры	 

Процедура СоздатьДокументыЗакупок(ДляЗаполнения)
	
	Лог1С.Вывести("Попытка создать цепочку документов на основании {0}", СтатусСообщения.БезСтатуса, ДляЗаполнения.Ссылка);
	
	Если НЕ ДляЗаполнения.Ссылка.Проведен Тогда
		Лог1С.Вывести("Не удалось создать цепочку документов на основании {0} по причине: документ не проведен", СтатусСообщения.Внимание, ДляЗаполнения.Ссылка);
		Возврат;
	КонецЕсли; 
	
	Если НЕ ПроверитьСтруктуруПодчиненности(КритерииОтбора.ДокументыПоЗаказуПоставщику, ДляЗаполнения.Ссылка, Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) Тогда
		СоздатьПриходныйСкладскойОрдер(ДляЗаполнения);	
		СоздатьПоступлениеТоваровУслуг(ДляЗаполнения);		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область УПРАВЛЕНИЕ_СКЛАДОМ

Процедура СоздатьЗаданиеСкладуНаОтбор(ДляЗаполнения)
	
	Если ВРЕГ(ДляЗаполнения.Состояние) =  "CONSOLIDATED" Тогда
		Возврат;	
	КонецЕсли;
	
	Попытка
		ДокОбъект = Документы.ЗаданиеСкладуНаОтбор.СоздатьДокумент(); 
		ДокОбъект.Заполнить(ДляЗаполнения.Ссылка);
		ДокОбъект.ПолучитьСсылкуНового();
		ДокОбъект.Дата = ТекущаяДата();
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	Исключение
		Лог1С.Вывести("Не удалось создать задание на отбор на основании '{0}' по причине: {1}", СтатусСообщения.ОченьВажное, ДляЗаполнения.Ссылка, ОписаниеОшибки());
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьОтборЗапасовНаСкладе(ДляЗаполнения)
	
	Если ВРЕГ(ДляЗаполнения.Состояние) =  "ACCEPTED" ИЛИ ВРЕГ(ДляЗаполнения.Состояние) =  "CONSOLIDATED" Тогда
		Возврат;	
	КонецЕсли;
	// Добавить заполнение дат производства по меркурий и серий для алкоголя
	Попытка
		ДокОбъект = Документы.ОтборЗапасовНаСкладе.СоздатьДокумент(); 
		ДокОбъект.Заполнить(ДляЗаполнения.Ссылка);		
		ДокОбъект.Кладовщик = ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
		ДокОбъект.Контролер = ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
		ДокОбъект.Статус = Перечисления.СтатусыСкладскихДокументов.Открыт;
		
		// Заполним таб.части данными из WMS
		
		ДокОбъект.ЛистОтбора.Очистить();
		ДокОбъект.ЛистОтбора1.Очистить();
		ДокОбъект.ЛистОтбора2.Очистить();
		ДокОбъект.ЛистОтбора3.Очистить();
		ДокОбъект.ЛистОтбора4.Очистить();
		ДокОбъект.ЛистОтбора5.Очистить();
		ДокОбъект.ЛистОтбора6.Очистить();
		ДокОбъект.СерииОтбора.Очистить();
		ДокОбъект.Марки.Очистить();
		
		Для каждого вмсСтрТаб Из ДляЗаполнения.Состав Цикл
			
			Если ДокОбъект.ЛистОтбора.Найти(вмсСтрТаб.Номенклатура, "Номенклатура") <> Неопределено Тогда
				НовСтр = ДокОбъект.ЛистОтбора.Найти(вмсСтрТаб.Номенклатура, "Номенклатура");
				НовСтр.КоличествоФакт = НовСтр.КоличествоФакт + вмсСтрТаб.КоличествоФакт;
			Иначе
				
				НовСтр = ДокОбъект.ЛистОтбора.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, вмсСтрТаб);
				
				НовСтр.ЗаказНаОтгрузку = ДляЗаполнения.Ссылка;
				НовСтр.Порядок = вмсСтрТаб.НомерСтроки;
				НовСтр.КоличествоПлан = вмсСтрТаб.Количество;
				НовСтр.Весовой = вмсСтрТаб.Номенклатура.Весовой;
				
			КонецЕсли; 
			
			//--------------------------------------------
			
			НовСтр = ДокОбъект.СерииОтбора.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, вмсСтрТаб);
			
			НовСтр.ЗаказНаОтгрузку = ДляЗаполнения.Ссылка;
			НовСтр.Порядок = вмсСтрТаб.НомерСтроки;
			НовСтр.КоличествоПлан = вмсСтрТаб.Количество;
			
			Если ЗначениеЗаполнено(вмсСтрТаб.ДатаПроизводства) Тогда
				
				ДопПараметрыДляЕГАИС = Новый Структура;
				// Параметры для подбора серии в разрезе справки А и Б для алкольной продукции
				Если ЗначениеЗаполнено(вмсСтрТаб.Партия)
					И вмсСтрТаб.Номенклатура.СодержитСпирт Тогда
					
					МассивПодстрок = ОбщиеФункции.РазложитьСтрокуВМассив(вмсСтрТаб.Партия, "_"); // FA-000000043472436_FB-000002952508683
					
					Если МассивПодстрок.Количество() > 0 Тогда
						ДопПараметрыДляЕГАИС.Вставить("ИдСправкиА", МассивПодстрок.Получить(0));
						ДопПараметрыДляЕГАИС.Вставить("ИдСправкиБ", МассивПодстрок.Получить(1));
					КонецЕсли; 
					
				КонецЕсли; 
				
				НовСтр.СерияНоменклатурыОтбора = ПолучитьСериюНоменклатурыПоДатеПроизводства(НовСтр.Номенклатура, вмсСтрТаб.ДатаПроизводства, ДопПараметрыДляЕГАИС);
				НовСтр.ДатаПроизводства = вмсСтрТаб.ДатаПроизводства;
				
			КонецЕсли; 
			
			
		КонецЦикла; 
		
		//	
		ДокОбъект.ПолучитьСсылкуНового();
		ДокОбъект.Дата = ТекущаяДата();
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	Исключение
		Лог1С.Вывести("Не удалось создать отбор запасов на основании '{0}' по причине: {1}", СтатусСообщения.ОченьВажное, ДляЗаполнения.Ссылка, ОписаниеОшибки());
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;	
	
КонецПроцедуры

Процедура СоздатьРасходныйСкладскойОрдер(ДляЗаполнения)
	
	Если ВРЕГ(ДляЗаполнения.Состояние) <>  "SHIPPED" Тогда
		Возврат;	
	КонецЕсли; 
	
	Попытка
		ДокОбъект = Документы.РасходныйСкладскойОрдер.СоздатьДокумент(); 
		ДокОбъект.Заполнить(ДляЗаполнения.Ссылка);
		
		Если НЕ ЗначениеЗаполнено(ДокОбъект.Получатель) Тогда
			ДокОбъект.Получатель = ОпределитьПолучателяРСО(ДляЗаполнения.Ссылка);
		КонецЕсли; 
		
		ДокОбъект.ПолучитьСсылкуНового();
		ДокОбъект.Дата = ТекущаяДата();
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	Исключение
		Лог1С.Вывести("Не удалось создать РСО на основании '{0}' по причине: {1}", СтатусСообщения.ОченьВажное, ДляЗаполнения.Ссылка, ОписаниеОшибки());
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры 

Процедура СоздатьПриходныйСкладскойОрдер(ДляЗаполнения)
	
	Если НЕ ДляЗаполнения.Ссылка.Склад.ОрдерныйУчетПоПриходу Тогда
		Возврат;
	КонецЕсли; 
	
	Если ВРЕГ(ДляЗаполнения.Состояние) <>  "COMPLETED" Тогда
		Возврат;	
	КонецЕсли;
	
	Попытка
		Лог1С.Вывести("Попытка создать ПСО на основании {0}", СтатусСообщения.БезСтатуса, ДляЗаполнения.Ссылка);
		ДокОбъект = Документы.ПриходныйСкладскойОрдер.СоздатьДокумент();
		ДокОбъект.Заполнить(ДляЗаполнения.Ссылка);
		ДокОбъект.Товары.Очистить();
		ДокОбъект.Дата = ТекущаяДата();
		ДокОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
		
		// Заполним обязательные реквизиты
		НовСтр = ДокОбъект.Разгрузка.Добавить();
		Новстр.Грузчик = ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
		ДокОбъект.ВремяНачала = ТекущаяДата();
		ДокОбъект.ВремяОкончания = ТекущаяДата();
		ДокОбъект.Карщик = ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
		ДокОбъект.КоличествоЧасовИспользованияКары = 1;
		
		// Заполним таб. часть "Товары" на основании факта из WMS
		Для каждого вмсСтрТаб Из ДляЗаполнения.Состав Цикл
			НовСтр = ДокОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, вмсСтрТаб);
			НовСтр.Количество = вмсСтрТаб.КоличествоФакт;
			НовСтр.Качество = вмсСтрТаб.Качество;
			НовСтр.Коэффициент = НовСтр.ЕдиницаИзмерения.Коэффициент;
			НовСтр.СерияНоменклатуры = ПолучитьСериюНоменклатурыПоДатеПроизводства(НовСтр.Номенклатура, вмсСтрТаб.ДатаПроизводства);
			Если НовСтр.СерияНоменклатуры.Пустая()
				И (НовСтр.Номенклатура.МодельСкладскогоУчета.КонтрольДатыПроизводства
				ИЛИ НовСтр.Номенклатура.МодельСкладскогоУчета.КонтрольСроковГодности) Тогда
				НовСтр.СерияНоменклатуры = СоздатьСериюНоменклатуры(НовСтр.Номенклатура, вмсСтрТаб.ДатаПроизводства, вмсСтрТаб.СрокГодности, Истина);
			КонецЕсли; 
		КонецЦикла;	
		
		ДокОбъект.Записать();
		
		Лог1С.Вывести("Попытка создать ПСО на основании {0} завершена успешно", СтатусСообщения.БезСтатуса, ДляЗаполнения.Ссылка);
		
	Исключение
		Лог1С.Вывести("Не удалось создать ПСО на основании '{0}' по причине: {1}", СтатусСообщения.ОченьВажное, ДляЗаполнения.Ссылка, ОписаниеОшибки());
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	//Попытка
	//	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);	
	//Исключение
	//    Лог1С.Вывести("Не удалось провести ПСО на основании '{0}' по причине: {1}", СтатусСообщения.ОченьВажное, ДляЗаполнения.Ссылка, ОписаниеОшибки());
	//КонецПопытки;
	//
	ДляЗаполнения.Вставить("ПриходныйОрдер", ДокОбъект.Ссылка);
	
КонецПроцедуры

Процедура СоздатьИнвОписи(ТабЗнач)
	
	Если ТабЗнач.Количество() = 0 Тогда
		Лог1С.Вывести("Результат запроса пустой", СтатусСообщения.БезСтатуса);
		Возврат;
	КонецЕсли; 
	
	ТаблицаСТехноЗонами = ТабЗнач.Скопировать(, "TechnoZone, OwnerStock, Owner_id");
	ТаблицаСТехноЗонами.Свернуть("TechnoZone, OwnerStock, Owner_id");
	
	СписокДокументов = ДополнительныеПараметры.СписокДокументов;
	ДоступныеЗоныХранения = ДополнительныеПараметры.ЗоныХранения;
	
	Для каждого СтрТехноЗона Из ТаблицаСТехноЗонами Цикл
		
		Если ДоступныеЗоныХранения.НайтиПоЗначению(СтрТехноЗона.TechnoZone) = Неопределено Тогда
			Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("Зона хранения '%1' будет пропущена по причине: данная зона не отмечена в списке зон хранения", СтрТехноЗона.TechnoZone), СтатусСообщения.Внимание);
			Продолжить;	
		КонецЕсли; 
		
		ДокОбъект = Документы.ИнвентаризационнаяОпись.СоздатьДокумент();
		ДокОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
		ДокОбъект.Склад = ПодобратьСкладДляВладельцаЗапасов(ПолучитьВладельцаЗапасов(СтрТехноЗона.Owner_id));
		
		КопияТовары = ДокОбъект.Товары.ВыгрузитьКолонки();
		
		мОстаткиТекущейЗоны = ТабЗнач.НайтиСтроки(Новый Структура("TechnoZone, OwnerStock", СтрТехноЗона.TechnoZone, СтрТехноЗона.OwnerStock));
		
		Лог1С.Вывести("Формируется инвентаризационная опись, где владелец запасов: {0}. Техн. зона: {1}", СтатусСообщения.Информация, СтрТехноЗона.OwnerStock, СтрТехноЗона.TechnoZone);
		
		Для каждого ЭлМассива Из мОстаткиТекущейЗоны Цикл
			
			СтруктураЗаписи = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, СерияНоменклатуры, Количество, Качество, Ячейка");
			
			СтруктураЗаписи.Номенклатура 		= Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлМассива.Material_id));
			
			СтруктураЗаписи.ЕдиницаИзмерения 	= Справочники.ЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлМассива.MaterialUnit_id));
			
			СтруктураЗаписи.Коэффициент 		= СтруктураЗаписи.ЕдиницаИзмерения.Коэффициент;	
			
			СтруктураЗаписи.СерияНоменклатуры 	= ПолучитьСериюНоменклатурыПоДатеПроизводства(СтруктураЗаписи.Номенклатура, Дата(ЭлМассива.ProdDate));
			
			СтруктураЗаписи.Количество 			= Число(ЭлМассива.BaseQuantity);
			
			СтруктураЗаписи.Качество 			= ПолучитьСопоставленноеКачество(ЭлМассива.QualityTypeCode);
			
			СтруктураЗаписи.Ячейка 				= ЭлМассива.StorageObject;
			
			// Проверки заполнения
			
			Отказ = Ложь;
			
			Если НЕ ЗначениеЗаполнено(СтруктураЗаписи.Номенклатура)
				ИЛИ СокрЛП(СтруктураЗаписи.Номенклатура.Код) = "" Тогда
				Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("Не удалось найти номенклатуру '%1' с кодом '%2'", ЭлМассива.Material, ЭлМассива.Material_id), СтатусСообщения.ОченьВажное);
				Отказ = Истина;
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(СтруктураЗаписи.ЕдиницаИзмерения) Тогда
				Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("Для номенклатуры '%1' не удалось найти единицу измерения '%2' с кодом '%3'", 
				СтруктураЗаписи.Номенклатура, ЭлМассива.Unit, ЭлМассива.MaterialUnit_id), СтатусСообщения.ОченьВажное);	
				Отказ = Истина;
			КонецЕсли; 
			
			Если (СтруктураЗаписи.Номенклатура.МодельСкладскогоУчета.КонтрольДатыПроизводства
				ИЛИ СтруктураЗаписи.Номенклатура.МодельСкладскогоУчета.КонтрольСроковГодности)
				И ЭлМассива.ProdDate = "19000101"
				И НЕ ЗначениеЗаполнено(СтруктураЗаписи.СерияНоменклатуры) Тогда
				
				Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("Для номенклатуры '%1' с моделью складского учета '%2' не удалось найти серию с датой производства '%3'", 
				СтруктураЗаписи.Номенклатура, СтруктураЗаписи.Номенклатура.МодельСкладскогоУчета, Дата(ЭлМассива.ProdDate)), СтатусСообщения.ОченьВажное);
				
				Отказ = Истина;
				
			ИначеЕсли (СтруктураЗаписи.Номенклатура.МодельСкладскогоУчета.КонтрольДатыПроизводства
				ИЛИ СтруктураЗаписи.Номенклатура.МодельСкладскогоУчета.КонтрольСроковГодности)
				И НЕ ЭлМассива.ProdDate = "19000101"
				И НЕ ЗначениеЗаполнено(СтруктураЗаписи.СерияНоменклатуры)
				И Дата(ЭлМассива.ProdDate) > ТекущаяДата()  Тогда 
				
				Отказ = Истина;	
				
			ИначеЕсли (СтруктураЗаписи.Номенклатура.МодельСкладскогоУчета.КонтрольДатыПроизводства
				ИЛИ СтруктураЗаписи.Номенклатура.МодельСкладскогоУчета.КонтрольСроковГодности)
				И НЕ ЭлМассива.ProdDate = "19000101"
				И НЕ ЗначениеЗаполнено(СтруктураЗаписи.СерияНоменклатуры) Тогда
				
				СтруктураЗаписи.СерияНоменклатуры = СоздатьСериюНоменклатуры(СтруктураЗаписи.Номенклатура, Дата(ЭлМассива.ProdDate), Дата(ЭлМассива.ExpDate), Истина);
				
				ДобавитьСтрокуНовойСерии(СтруктураЗаписи);
				
			КонецЕсли; 
			
			Если Отказ Тогда
				// Добавим в структуру записи, данные WMS
				СтруктураЗаписи.Вставить("НаименованиеМатериала", ЭлМассива.Material);
				СтруктураЗаписи.Вставить("ЕдиницаWMS", ЭлМассива.Unit);
				СтруктураЗаписи.Вставить("ЗонаWMS", ЭлМассива.TechnoZone);
				СтруктураЗаписи.Вставить("ВладелецЗапаса", ЭлМассива.OwnerStock);
				Если НЕ ЭлМассива.ProdDate = "19000101" Тогда
					СтруктураЗаписи.Вставить("ДатаПроизводства", Дата(ЭлМассива.ProdDate));
				КонецЕсли; 
				
				ДобавитьСтрокуДляОбработкиВручную(СтруктураЗаписи);
				
				Продолжить;
				
			КонецЕсли; 
			
			НовСтр = КопияТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтруктураЗаписи);
			
			Если НовСтр.Номенклатура.ВетКонтроль
				ИЛИ НовСтр.Номенклатура.ДистрибьюторскийКонтракт.ИспользоватьВетКонтроль Тогда
				
				НовСтр.ДатаПроизводстваНачало 				= НовСтр.СерияНоменклатуры.ДатаПроизводства;
				НовСтр.ДатаПроизводстваОкончание 			= НовСтр.СерияНоменклатуры.ДатаПроизводства;
				НовСтр.ДатаОкончанияСрокаГодностиНачало 	= НовСтр.СерияНоменклатуры.СрокГодности;
				НовСтр.ДатаОкончанияСрокаГодностиОкончание 	= НовСтр.СерияНоменклатуры.СрокГодности;
				
			КонецЕсли; 
			
		КонецЦикла;
		
		Если КопияТовары.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		КопияТовары.Свернуть("Номенклатура, Ячейка, СерияНоменклатуры, ЕдиницаИзмерения, Коэффициент, Качество, ДатаПроизводстваНачало, ДатаПроизводстваОкончание, ДатаОкончанияСрокаГодностиНачало, ДатаОкончанияСрокаГодностиОкончание", "Количество");
		
		РаспределитьКоличествоОсновнойКарточкиПоАналогам(КопияТовары, ДокОбъект.Склад);
		
		ДокОбъект.Товары.Загрузить(КопияТовары); // Сворачиваем в 1С, т.к нам нужны остатки в разрезе наших качеств, а не WMS
		ДокОбъект.Комментарий = ОбщиеФункции._СтрШаблон_("WMS. Владелец запасов: %1. Зона: %2", СтрТехноЗона.OwnerStock, СтрТехноЗона.TechnoZone);
		ДокОбъект.Дата = ТекущаяДата(); 
		
		Попытка
			ДокОбъект.Записать();
			Лог1С.Вывести("Документ сформирован", СтатусСообщения.Информация);
			СписокДокументов.Добавить(ДокОбъект.Ссылка);
		Исключение
			Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось записать инвентаризационную опись '%1' по причине: %2", ДокОбъект.Комментарий, ОписаниеОшибки()), СтатусСообщения.ОченьВажное);
		КонецПопытки; 
		
	КонецЦикла;
	
КонецПроцедуры	 

#КонецОбласти 

#Область УПРАВЛЕНИЕ_ЗАПАСАМИ

//{[+]Боровик А.О, 2020-11-03 12:52:51
Процедура ОбновитьПеремещениеТоваров(ДляЗаполнения)
	
	ДокОбъект = ДляЗаполнения.Ссылка.ПолучитьОбъект();
	ДокОбъект.Товары.Очистить();
	
	// Заполним таб. часть "Товары" на основании факта из WMS
	Для каждого вмсСтрТаб Из ДляЗаполнения.Состав Цикл
		
		Если вмсСтрТаб.КоличествоФакт = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		НовСтр = ДокОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, вмсСтрТаб);
		
		НовСтр.Количество = вмсСтрТаб.КоличествоФакт;
		НовСтр.Коэффициент = НовСтр.ЕдиницаИзмерения.Коэффициент;
		НовСтр.СерияНоменклатуры = ПолучитьСериюНоменклатурыПоДатеПроизводства(НовСтр.Номенклатура, вмсСтрТаб.ДатаПроизводства); 
		
	КонецЦикла;	
	
	Попытка
		ДокОбъект.Комментарий = ДокОбъект.Комментарий + " / " +ДляЗаполнения.Состояние;
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);	
	Исключение
		ТекстСообщения = ОбщиеФункции._СтрШаблон_("Не удалось провести документ '%1' по причине: %2", ДляЗаполнения.Ссылка, ОписаниеОшибки());
		Лог1С.Вывести(ТекстСообщения, СтатусСообщения.ОченьВажное);	
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
		
КонецПроцедуры
//} Боровик А.О, 2020-11-03 12:52:51

Процедура ОбновитьСписаниеТоваров(ДляЗаполнения)
	
	//{[+]Боровик Артем Олегович 01.05.2020 15:14:32
	Если ВРЕГ(ДляЗаполнения.Состояние) <>  "SHIPPED" Тогда
		Возврат;	
	КонецЕсли;
	//}Боровик Артем Олегович 01.05.2020 15:14:32 
	
	ДокОбъект = ДляЗаполнения.Ссылка.ПолучитьОбъект();
	ДокОбъект.Дата = ТекущаяДата(); 
	ДокОбъект.ДополнительныеСвойства.Вставить("Источник", "1С");
	ДокОбъект.Комментарий = ОбщиеФункции._СтрШаблон_("%1	Скорректирована на основании факта WMS", ДокОбъект.Комментарий);
	
	ДокОбъект.Товары.Очистить();
	
	Для каждого вмсСтрТаб Из ДляЗаполнения.Состав Цикл
		
		НовСтр = ДокОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, вмсСтрТаб);
		НовСтр.Количество = вмсСтрТаб.КоличествоФакт;
		НовСтр.Коэффициент = НовСтр.ЕдиницаИзмерения.Коэффициент;
		НовСтр.СерияНоменклатуры = ПолучитьСериюНоменклатурыПоДатеПроизводства(вмсСтрТаб.Номенклатура, вмсСтрТаб.ДатаПроизводства);	
		
	КонецЦикла;
	
	//{[+]Боровик Артем Олегович 01.05.2020 16:21:09
	// Завершим транзакцию перед проведением документа, 
	// чтобы не получить в случае неудачного проведения, исключение "В данной транзакции уже происходили ошибки"
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();					
	КонецЕсли;
	//}Боровик Артем Олегович 01.05.2020 16:21:09 
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	Исключение
		Если ДокОбъект.Проведен Тогда
			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьОприходованиеТоваров(ДляЗаполнения)
	
	//{[+]Боровик Артем Олегович 01.05.2020 15:14:32
	Если ВРЕГ(ДляЗаполнения.Состояние) <>  "COMPLETED" Тогда
		Возврат;	
	КонецЕсли;
	//}Боровик Артем Олегович 01.05.2020 15:14:32 
	
	ДокОбъект = ДляЗаполнения.Ссылка.ПолучитьОбъект();
	ДокОбъект.Дата = ТекущаяДата(); 
	ДокОбъект.ДополнительныеСвойства.Вставить("Источник", "1С");
	ДокОбъект.Комментарий = ОбщиеФункции._СтрШаблон_("%1	Скорректирована на основании факта WMS", ДокОбъект.Комментарий);
	
	ПриходныйОрдер = Документы.ПриходныйСкладскойОрдер.ПустаяСсылка();
	
	Если ДокОбъект.Товары.Количество() > 0 Тогда
		ПриходныйОрдер = ДокОбъект.Товары.Получить(0).ПриходныйОрдер;	
	КонецЕсли; 
	
	ДокОбъект.Товары.Очистить();
	
	Для каждого вмсСтрТаб Из ДляЗаполнения.Состав Цикл
		
		НовСтр = ДокОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, вмсСтрТаб);
		НовСтр.Количество = вмсСтрТаб.КоличествоФакт;
		НовСтр.Коэффициент = НовСтр.ЕдиницаИзмерения.Коэффициент;
		НовСтр.СерияНоменклатуры = ПолучитьСериюНоменклатурыПоДатеПроизводства(вмсСтрТаб.Номенклатура, вмсСтрТаб.ДатаПроизводства);
		
		Если (вмсСтрТаб.Номенклатура.МодельСкладскогоУчета.КонтрольДатыПроизводства
			ИЛИ вмсСтрТаб.Номенклатура.МодельСкладскогоУчета.КонтрольСроковГодности)
			И вмсСтрТаб.СерияНоменклатуры.Пустая() Тогда 	
			
			Если НовСтр.СерияНоменклатуры.Пустая() Тогда					
				НовСтр.СерияНоменклатуры = СоздатьСериюНоменклатуры(вмсСтрТаб.Номенклатура, вмсСтрТаб.ДатаПроизводства, вмсСтрТаб.СрокГодности);					
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПриходныйОрдер) Тогда
			НовСтр.ПриходныйОрдер = ПриходныйОрдер;
		КонецЕсли; 
		
		НовСтр.Цена = УправлениеЦенообразованием.ПолучитьЦенуНоменклатуры(НовСтр.Номенклатура,,ДокОбъект.ТипЦен, ТекущаяДата(), НовСтр.ЕдиницаИзмерения);
		
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НовСтр, ДокОбъект, ДокОбъект.Метаданные(), "Товары");
		
	КонецЦикла;
	
	//{[+]Боровик Артем Олегович 01.05.2020 16:21:09
	// Завершим транзакцию перед проведением документа, 
	// чтобы не получить в случае неудачного проведения, исключение "В данной транзакции уже происходили ошибки"
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();					
	КонецЕсли;
	//}Боровик Артем Олегович 01.05.2020 16:21:09 
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	Исключение
		Если ДокОбъект.Проведен Тогда
			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
КонецПроцедуры 

Процедура СоздатьДокументыПоИсходящимПеремещениям(ДляЗаполнения)
	
	// Обновим перемещение фактом из WMS
	ОбновитьПеремещениеТоваров(ДляЗаполнения);
	// Создать документ "Расходный складской ордер"
	Если НЕ ПроверитьСтруктуруПодчиненности(КритерииОтбора.ДокументыПоПеремещениюТоваров, ДляЗаполнения.Ссылка, Тип("ДокументСсылка.РасходныйСкладскойОрдер")) Тогда
		СоздатьРасходныйСкладскойОрдер(ДляЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьДокументыПоВходящимПеремещениям(ДляЗаполнения)
	
	Если НЕ ПроверитьСтруктуруПодчиненности(КритерииОтбора.ДокументыПоПеремещениюТоваров, ДляЗаполнения.Ссылка, Тип("ДокументСсылка.ПриходныйСкладскойОрдер")) Тогда
		СоздатьПриходныйСкладскойОрдер(ДляЗаполнения);
	КонецЕсли;	
	
КонецПроцедуры

Функция СоздатьСериюНоменклатуры(Номенклатура, ДатаПроизводства, СрокГодности, РежимЗагрузкиДанных = Ложь)
	
	Перем НоваяСерия;
	
	ТекстОшибки = "";
	
	Попытка
		
		НовЭлемент = Справочники.СерииНоменклатуры.СоздатьЭлемент();
		НовЭлемент.Владелец = Номенклатура;
		НовЭлемент.Наименование = ОбщиеФункции._СтрШаблон_("%1 (%2)", Формат(ДатаПроизводства, "ДЛФ=D"), Формат(СрокГодности, "ДЛФ=D"));
		НовЭлемент.ДатаПроизводства = ДатаПроизводства;
		НовЭлемент.СрокГодности = СрокГодности;
		НовЭлемент.КоличествоПериодовГодности = (СрокГодности - ДатаПроизводства) / 86400;
		НовЭлемент.ПериодГодности = Перечисления.Периодичность.День;
		НовЭлемент.ДатаСозданияСерии = ТекущаяДата();
		НовЭлемент.Комментарий = "Создана автоматически на основании данных WMS";
		НовЭлемент.ОбменДанными.Загрузка = РежимЗагрузкиДанных; 
		
		НовЭлемент.Записать();
		
		НоваяСерия = НовЭлемент.Ссылка;
		
	Исключение
		
		ТекстОшибки = ОбщиеФункции._СтрШаблон_("Не удалось записать серию номенклатуры для товара %1 по причине: %2", Номенклатура, ОписаниеОшибки());
		Если НовЭлемент.ДополнительныеСвойства.Свойство("ТекстОшибки") Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + НовЭлемент.ДополнительныеСвойства.ТекстОшибки;	
		КонецЕсли; 
		Лог1С.Вывести(ТекстОшибки, СтатусСообщения.Внимание);
		
	КонецПопытки;
	
	Возврат НоваяСерия;
	
КонецФункции

Функция СоздатьСписаниеТоваров(ТипОперации, Организация, Состав)
	
	ДокОбъект = Документы.СписаниеТоваров.СоздатьДокумент();
	ДокОбъект.Автор 			= ПараметрыСеанса.ТекущийПользователь;
	ДокОбъект.Основание 		= ОбщиеФункции._СтрШаблон_("%1", ПолучитьКлассификациюПоТипуКорректировки(ТипОперации));
	ДокОбъект.Ответственный 	= ДокОбъект.Автор;
	ДокОбъект.Склад 			= ЛогКомплекс;
	ДокОбъект.Организация		= Организация; 
	ДокОбъект.Подразделение 	= ДокОбъект.Автор.Подразделение;
	ДокОбъект.СчетУчета			= ПланыСчетов.Управленческий.НайтиПоКоду("42.01");
	ДокОбъект.Субконто2			= ЛогКомплекс;
	ДокОбъект.Дата 				= ТекущаяДата();
	ДокОбъект.ДатаСписания 		= ДокОбъект.Дата;
	ДокОбъект.ОтражатьВУУ		= Истина;
	ДокОбъект.ВидСписания		= Перечисления.ВидыСписанияТоваров.СписаниеНаЗатраты;
	ДокОбъект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	ДокОбъект.Комментарий		= "Создан автоматически на основании данных WMS";
	
	ЕстьАлкоголь = Ложь;
	
	Для каждого ЭлМассива Из Состав Цикл
		
		Если ТипОперации = "DATE" и ЭлМассива.Количество > 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		НовСтр = ДокОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ЭлМассива);
		НовСтр.GUID_Строки = ЭлМассива.ИдСтроки;
		
		НовСтр.Количество = -ЭлМассива.Количество;
		
		Если УчетНалогов.ОрганизацияЯвляетсяПлательщикомНДС(ДокОбъект.Организация, ТекущаяДата())  Тогда
			НовСтр.СтавкаНДС = НовСтр.Номенклатура.СтавкаНДС;	
		КонецЕсли; 
		
		Если ЕстьАлкоголь = Ложь И НовСтр.Номенклатура.СодержитСпирт Тогда
			ЕстьАлкоголь = Истина;
		КонецЕсли; 
		
		ЭлМассива.Пометка = Истина;
		
	КонецЦикла;  
	
	Попытка
		ДокОбъект.ДополнительныеСвойства.Вставить("Источник", "WMS");
		ДокОбъект.Записать();
	Исключение
		ТекстОшибки = ОбщиеФункции._СтрШаблон_("Не удалось создать списание товаров по причине: %1", ОписаниеОшибки());
		Лог1С.Вывести(ТекстОшибки, СтатусСообщения.ОченьВажное);
		ВызватьИсключение ТекстОшибки; 
	КонецПопытки; 
	
	//Попытка
	//	// Документ с алкогольной продукцией проводится вручную
	//	Если НЕ ЕстьАлкоголь Тогда
	//		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	//	КонецЕсли; 
	//Исключение
	//    ТекстОшибки = ОбщиеФункции._СтрШаблон_("Не удалось провести '%1' по причине: %2", ДокОбъект.Ссылка, ОписаниеОшибки());
	//	Лог1С.Вывести(ТекстОшибки, СтатусСообщения.Внимание);
	//КонецПопытки; 
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Функция СоздатьОприходованиеТоваров(ТипОперации, Организация, Состав)
	
	ДокОбъект = Документы.ОприходованиеТоваров.СоздатьДокумент();
	ДокОбъект.Автор 			= ПараметрыСеанса.ТекущийПользователь;
	ДокОбъект.Основание 		= ОбщиеФункции._СтрШаблон_("%1", ПолучитьКлассификациюПоТипуКорректировки(ТипОперации));
	ДокОбъект.Ответственный 	= ДокОбъект.Автор;
	ДокОбъект.Склад 			= ЛогКомплекс;
	ДокОбъект.Организация		= Организация; 
	ДокОбъект.Подразделение 	= ДокОбъект.Автор.Подразделение;
	ДокОбъект.ТипЦен			= УправлениеПользователями.ПолучитьЗначениеДополнительнойНастройкиПользователя("ТипЦенПлановойСебестоимостиНоменклатуры", ПараметрыСеанса.ТекущийПользователь);
	ДокОбъект.СчетУчета			= ПланыСчетов.Управленческий.НайтиПоКоду("42.01");
	ДокОбъект.Субконто2			= ЛогКомплекс;
	ДокОбъект.Дата 				= ТекущаяДата();
	ДокОбъект.ДатаОприходования = ДокОбъект.Дата;
	ДокОбъект.ОтражатьВУУ		= Истина;
	ДокОбъект.Комментарий		= "Создан автоматически на основании данных WMS";
	
	Если ДокОбъект.ТипЦен.Пустая() Тогда
		ДокОбъект.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("О00001");
	КонецЕсли; 
	
	ЕстьАлкоголь = Ложь;
	
	Для каждого ЭлМассива Из Состав Цикл
		
		Если ТипОперации = "DATE" и ЭлМассива.Количество < 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		НовСтр = ДокОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ЭлМассива);
		НовСтр.GUID_Строки = ЭлМассива.ИдСтроки;
		
		НовСтр.Цена = УправлениеЦенообразованием.ПолучитьЦенуНоменклатуры(НовСтр.Номенклатура,,ДокОбъект.ТипЦен, ТекущаяДата(), НовСтр.ЕдиницаИзмерения);
		
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НовСтр, ДокОбъект, ДокОбъект.Метаданные(), "Товары");
		
		Если ЕстьАлкоголь = Ложь И НовСтр.Номенклатура.СодержитСпирт Тогда
			ЕстьАлкоголь = Истина;
		КонецЕсли; 
		
		Если (НовСтр.Номенклатура.МодельСкладскогоУчета.КонтрольДатыПроизводства
			ИЛИ НовСтр.Номенклатура.МодельСкладскогоУчета.КонтрольСроковГодности)
			И ЗначениеЗаполнено(ЭлМассива.ДатаПроизводства)
			И НовСтр.СерияНоменклатуры.Пустая() Тогда
			
			НовСтр.СерияНоменклатуры = СоздатьСериюНоменклатуры(НовСтр.Номенклатура, ЭлМассива.ДатаПроизводства, ЭлМассива.СрокГодности);
			
		КонецЕсли;
		
		ЭлМассива.Пометка = Истина;
		
	КонецЦикла;  
	
	Попытка
		ДокОбъект.ДополнительныеСвойства.Вставить("Источник", "WMS");
		ДокОбъект.Записать();
	Исключение
		ТекстОшибки = ОбщиеФункции._СтрШаблон_("Не удалось создать оприходование товаров по причине: %1", ОписаниеОшибки());
		Лог1С.Вывести(ТекстОшибки, СтатусСообщения.ОченьВажное);
		ВызватьИсключение ТекстОшибки; 
	КонецПопытки; 
	
	//Попытка
	//	// Документ с алкогольной продукцией проводится вручную
	//	Если НЕ ЕстьАлкоголь Тогда
	//		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	//	КонецЕсли; 
	//Исключение
	//    ТекстОшибки = ОбщиеФункции._СтрШаблон_("Не удалось провести '%1' по причине: %2", ДокОбъект.Ссылка, ОписаниеОшибки());
	//	Лог1С.Вывести(ТекстОшибки, СтатусСообщения.Внимание);
	//КонецПопытки; 
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Функция СоздатьКорректировкуКачестваЗапасов(ТипОперации, Состав)
	
	ДокОбъект = Документы.КорректировкаКачестваЗапасов.СоздатьДокумент();
	ДокОбъект.Автор				= ПараметрыСеанса.ТекущийПользователь;
	ДокОбъект.Комментарий		= "Создан автоматически на основании данных WMS. Тип операции: "+ТипОперации;
	ДокОбъект.Организация		= ОрганизацияПоУмолчанию;
	ДокОбъект.Ответственный		= ДокОбъект.Автор;
	ДокОбъект.Подразделение		= ДокОбъект.Автор.Подразделение;
	ДокОбъект.Склад				= ЛогКомплекс;
	ДокОбъект.Дата				= ТекущаяДата() - ?(ТипОперации = "SYSTEM", 30, 0); 
	ДокОбъект.УказаниеКачествВТабличныхЧастях = истина;
	
	ЕстьАлкоголь = Ложь;
	КодКорректировки = "";
	
	Для каждого ЭлМассива Из Состав Цикл
		// Это корректировки поклажедателя. Они должны отобразится в сопоставленных корректировках поклажедателя
		Если ЭлМассива.КодОснованияКорректировки = 2 И ЭлМассива.Количество > 0 Тогда
			ЭлМассива.Пометка = Истина;
			Продолжить;
		КонецЕсли; 
		
		Если КодКорректировки <> ЭлМассива.КодКорректировки Тогда
			НовСтр = ДокОбъект.Товары.Добавить();	
			КодКорректировки = ЭлМассива.КодКорректировки;
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(НовСтр, ЭлМассива,,"Количество");
		
		Если ЕстьАлкоголь = Ложь И НовСтр.Номенклатура.СодержитСпирт Тогда
			ЕстьАлкоголь = Истина;
		КонецЕсли;  
		
		Если ЭлМассива.Количество < 0 Тогда
			НовСтр.КачествоСтарое = ЭлМассива.Качество;
		Иначе
			НовСтр.КачествоНовое = ЭлМассива.Качество;
			НовСтр.Количество = ЭлМассива.Количество;
		КонецЕсли; 
		
		НовСтр.GUID_Строки = ЭлМассива.ИдСтроки;
		
		ЭлМассива.Пометка = Истина;
		
	КонецЦикла;
	
	Попытка
		Если ДокОбъект.Товары.Количество() > 0 Тогда
			ДокОбъект.Товары.Свернуть("Номенклатура, ВариантНоменклатуры, СерияНоменклатуры, ЕдиницаИзмерения, Коэффициент, Цена, КачествоСтарое, КачествоНовое, Ячейка, ДоговорВладельца", "Количество");
			ДокОбъект.ДополнительныеСвойства.Вставить("Источник", "WMS");
			ДокОбъект.Записать();	
		КонецЕсли; 
	Исключение
		ТекстОшибки = ОбщиеФункции._СтрШаблон_("Не удалось создать корректировку качества запасов по причине: %1", ОписаниеОшибки());
		Лог1С.Вывести(ТекстОшибки, СтатусСообщения.ОченьВажное);
		ВызватьИсключение ТекстОшибки; 
	КонецПопытки;
	
КонецФункции	 

Процедура СоздатьДокументыКорректировкиЗапасов(НачДата = Неопределено, КонДата = Неопределено)
	
	Если НачДата = Неопределено Тогда
		НачДата = ОбщиеФункции.ДобавитьДень(НачалоДня(ТекущаяДата()), - 1);
		КонДата = ТекущаяДата(); 
	КонецЕсли; 
	
	Попытка
		
		Результат = ВыполнитьКоманду(ОбщиеФункции._СтрШаблон_("exec GetStockCorrection @DateBeg = '%1', @DateEnd = '%2'",
			Формат(НачДата, "ДФ='dd-MM-yyyy'"), Формат(КонДата, "ДФ='dd-MM-yyyy HH:mm:ss'")));
				
	Исключение
		ТекстОшибки = ОбщиеФункции._СтрШаблон_("Не удалось выполнить операцию 'СоздатьДокументыКорректировкиЗапасов' по причине: %1", ОписаниеОшибки());
		Лог1С.Вывести(ТекстОшибки, СтатусСообщения.ОченьВажное);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	втТабЗнач = ПоместитьНаборЗаписейSQLВТабЗнач(Результат);
	втТабЗнач = ПреобразоватьДанныеВМС_В_1С(втТабЗнач);
	ДобавитьПринадлежностьЗапасовКОрганизации(втТабЗнач);
	втТабЗнач.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево")); // по этой колонке будем подтверждать обработку DOCNUM
	
	тзТипыОпераций = втТабЗнач.Скопировать(,"ТипОперации, ВладелецЗапасов, Организация");
	тзТипыОпераций.Свернуть("ТипОперации, ВладелецЗапасов, Организация");
	// Сравним / обновим корректировки поклажедателя с корректировками WMS	
	НайтиСоответствующуюКорректировкуКачестваПоклажедателя(втТабЗнач);

	СписокИдПакетовДляПодтверждения = Новый СписокЗначений;
	
	Для каждого СтрТипОперации Из тзТипыОпераций Цикл
		
		Если Найти("SERIES, OWNER", СтрТипОперации.ТипОперации) > 0 Тогда
			Продолжить;
		КонецЕсли;  
		
		СтруктураОтбора = Новый Структура("ВладелецЗапасов, ТипОперации, Организация");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрТипОперации);
		
		Состав = втТабЗнач.НайтиСтроки(СтруктураОтбора);
		
		Если СтрТипОперации.ТипОперации = "+" Тогда
			
			СоздатьОприходованиеТоваров(СтрТипОперации.ТипОперации, СтрТипОперации.Организация, Состав);
			
		ИначеЕсли СтрТипОперации.ТипОперации = "-" Тогда 
			
			СоздатьСписаниеТоваров(СтрТипОперации.ТипОперации, СтрТипОперации.Организация, Состав);
			
		ИначеЕсли СтрТипОперации.ТипОперации = "DATE" Тогда 
			
			ДокСписание = СоздатьСписаниеТоваров(СтрТипОперации.ТипОперации, СтрТипОперации.Организация, Состав);
			
			ДокОприходование = СоздатьОприходованиеТоваров(СтрТипОперации.ТипОперации, СтрТипОперации.Организация, Состав);
			
			УстановитьСвязьМеждуПарнымиДвижениями(Новый Структура("Объект, Основание", ДокОприходование, ДокСписание.Ссылка),
			Новый Структура("Объект, Основание", ДокСписание, ДокОприходование.Ссылка));
			
		ИначеЕсли СтрТипОперации.ТипОперации = "STOCK" ИЛИ СтрТипОперации.ТипОперации = "SYSTEM" Тогда
			
			СоздатьКорректировкуКачестваЗапасов(СтрТипОперации.ТипОперации, Состав);
			
		Иначе
			
			Продолжить;
			
		КонецЕсли; 
		
		Для каждого ЭлМассива Из Состав Цикл
			
			Если ЭлМассива.Пометка И СписокИдПакетовДляПодтверждения.НайтиПоЗначению(ЭлМассива.ИдПакета) = Неопределено Тогда
				СписокИдПакетовДляПодтверждения.Добавить(ЭлМассива.ИдПакета);	
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	Для каждого ЭлСписка Из СписокИдПакетовДляПодтверждения Цикл
		
		Попытка
			ВыполнитьКоманду(ОбщиеФункции._СтрШаблон_("exec DocNumIsDone @DocNum='%1', @checked_by='%2', @proc_date='%3', @autotest=%4",
			ЭлСписка.Значение, 
			Формат(ТекущаяДата(), "ДФ='dd-MM-yyyy HH:mm:ss'"),
			Формат(ТекущаяДата(), "ДФ='dd-MM-yyyy HH:mm:ss'"),
			Формат(Автотесты, "БЛ=0; БИ=1"))
			);
		Исключение
			ТекстОшибки = ОбщиеФункции._СтрШаблон_("Не удалось выполнить операцию 'СоздатьДокументыКорректировкиЗапасов' по причине: %1", ОписаниеОшибки());
			Лог1С.Вывести(ТекстОшибки, СтатусСообщения.ОченьВажное);
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;	
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДобавитьПринадлежностьЗапасовКОрганизации(Состав)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	таб.Номенклатура,
	|	таб.ЕдиницаИзмерения,
	|	таб.Коэффициент,
	|	таб.СерияНоменклатуры,
	|	таб.Качество,
	|	таб.Количество,
	|	таб.ДатаПроизводства,
	|	таб.СрокГодности,
	|	таб.ИдПакета,
	|	таб.ИдСтроки,
	|	таб.ТипОперации,
	|	таб.КодКорректировки,
	|	таб.ВладелецЗапасов,
	|	таб.КодОснованияКорректировки
	|ПОМЕСТИТЬ втСостав
	|ИЗ
	|	&ТаблицаДанных КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	таб.Номенклатура,
	|	таб.ЕдиницаИзмерения,
	|	таб.Коэффициент,
	|	таб.СерияНоменклатуры,
	|	таб.Качество,
	|	таб.Количество,
	|	таб.ДатаПроизводства,
	|	таб.СрокГодности,
	|	таб.ИдПакета,
	|	таб.ИдСтроки,
	|	таб.КодКорректировки,
	|	таб.ТипОперации,
	|	таб.ВладелецЗапасов,
	|	таб.КодОснованияКорректировки,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СпрТовары.СодержитСпирт
	|				ТОГДА ЗапасыОрганизаций.Организация
	|			ИНАЧЕ &ОрганизацияПоУмолчанию 
	|		КОНЕЦ) КАК Организация
	|ИЗ
	|	втСостав КАК таб
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрТовары
	|		ПО таб.Номенклатура = СпрТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ЗапасыОрганизаций.Период) КАК Дата,
	|			ЗапасыОрганизаций.Номенклатура КАК Номенклатура
	|		ИЗ
	|			РегистрНакопления.ЗапасыОрганизаций.Обороты(, , Регистратор, Качество = ЗНАЧЕНИЕ(Справочник.Качество.Стандарт)) КАК ЗапасыОрганизаций
	|		ГДЕ
	|			ТИПЗНАЧЕНИЯ(ЗапасыОрганизаций.Регистратор) В (ТИП(Документ.ПриходныйСкладскойОрдер), ТИП(Документ.ПоступлениеТоваровУслуг), ТИП(Документ.ОприходованиеТоваров), ТИП(Документ.ВводОстатковСверткаБазыSQL))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗапасыОрганизаций.Номенклатура) КАК влЗапрос
	|		ПО таб.Номенклатура = влЗапрос.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыОрганизаций.Обороты(, , Регистратор, ) КАК ЗапасыОрганизаций
	|		ПО (влЗапрос.Номенклатура = ЗапасыОрганизаций.Номенклатура)
	|			И (влЗапрос.Дата = ЗапасыОрганизаций.Период)
	|
	|СГРУППИРОВАТЬ ПО
	|	таб.Номенклатура,
	|	таб.ЕдиницаИзмерения,
	|	таб.Коэффициент,
	|	таб.СерияНоменклатуры,
	|	таб.Качество,
	|	таб.Количество,
	|	таб.ДатаПроизводства,
	|	таб.СрокГодности,
	|	таб.ТипОперации,
	|	таб.ВладелецЗапасов,
	|	таб.ИдСтроки,
	|	таб.КодКорректировки,
	|	таб.КодОснованияКорректировки,
	|	таб.ИдПакета
	|УПОРЯДОЧИТЬ ПО
	|   ТипОперации, КодКорректировки";
	
	Запрос.УстановитьПараметр("ТаблицаДанных", Состав); 
	Запрос.УстановитьПараметр("ОрганизацияПоУмолчанию", ОрганизацияПоУмолчанию); 
	
	Состав = Запрос.Выполнить().Выгрузить();		
	
КонецПроцедуры

Процедура СоздатьДокументыКорректировкиЗапасовПоКнопке(НачДата, КонДата) Экспорт
	СоздатьДокументыКорректировкиЗапасов(НачДата, КонДата);		
КонецПроцедуры 

#КонецОбласти 

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СТАТУСЫ_ЗАЯВОК

Процедура ОбновитьСтатусыЗаявок() Экспорт
	
	Заявки = ПолучитьЗаявкиВОбработке();
	ПолучитьСтатусыЗаявокИзТранзитнойБазы();	
	
	Для каждого СтрЗаявка Из Заявки Цикл
		
		СтруктураЗаписи = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьСтруктуруЗаписи();
		ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрЗаявка);
		
		СтатусЗаявкиВТранзите = ТаблицаСтатусов.Найти(СтрЗаявка.Идентификатор, "ИдПакета");
		
		Если СтатусЗаявкиВТранзите = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураЗаписи.ДатаВремяПолученияЗаявкиСервисом = СтатусЗаявкиВТранзите.ДатаНачалаОбработки;
		СтруктураЗаписи.ДатаВремяПолученияРезультатаВыполненияЗаявки = СтатусЗаявкиВТранзите.ДатаОбработки;	 		
		СтруктураЗаписи.ДатаЗаписи = ТекущаяДата();
		
		Если СтатусЗаявкиВТранзите <> Неопределено
			И Найти(ВРЕГ(СтатусЗаявкиВТранзите.Статус), "OK") > 0 Тогда
			СтруктураЗаписи.Статус = Справочники.СтатусыЗаявок.УспешноОбработана;
		ИначеЕсли СтатусЗаявкиВТранзите <> Неопределено
			И Найти(ВРЕГ(СтатусЗаявкиВТранзите.Статус), "ER") > 0 Тогда
			СтруктураЗаписи.Статус = Справочники.СтатусыЗаявок.Отклонена;
			СтруктураЗаписи.ОшибкиВыполнения = СтатусЗаявкиВТранзите.Комментарий;
		ИначеЕсли СтатусЗаявкиВТранзите = Неопределено
			ИЛИ (СтатусЗаявкиВТранзите <> Неопределено И СтатусЗаявкиВТранзите.Статус = null) Тогда
			СтруктураЗаписи.Статус = Справочники.СтатусыЗаявок.Обрабатывается;
		КонецЕсли; 
		
		РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДобавитьЗапись(СтруктураЗаписи);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗаявкиДляОбработки()
	
	РезультатЗапроса = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьЗаявкиПоСтатусам("Объект, Источник, Приемник, Текст, Идентификатор", 
	Справочники.СтатусыЗаявок.Новая, "1С", "TRANSIT",,,"УПОРЯДОЧИТЬ ПО ДатаЗаписи"); 
	
	Возврат РезультатЗапроса;		
	
КонецФункции

Функция ПолучитьЗаявкиВОбработке()
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Справочники.СтатусыЗаявок.Отправлена);
	СписокСтатусов.Добавить(Справочники.СтатусыЗаявок.Обрабатывается);
	
	РезультатЗапроса = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьЗаявкиПоСтатусам("Объект, Источник, Приемник, Текст, Идентификатор", 
	СписокСтатусов, "1С", "TRANSIT");
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПолучитьСтатусыЗаявокИзТранзитнойБазы()
	
	МинДатаЗаписи = НачалоДня(ТекущаяДата());
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Справочники.СтатусыЗаявок.Отправлена);
	СписокСтатусов.Добавить(Справочники.СтатусыЗаявок.Обрабатывается);
	
	Выборка = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьЗаявкиПоСтатусам("МИНИМУМ(ДатаЗаписи) КАК МинДатаЗаписи", 
	СписокСтатусов, "1С", "TRANSIT",,"Выборка");
	
	
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.МинДатаЗаписи) = Тип("Дата") Тогда
			МинДатаЗаписи = Выборка.МинДатаЗаписи;
		КонецЕсли; 
	КонецЕсли; 
	
	Попытка
		Результат = ВыполнитьКоманду(ОбщиеФункции._СтрШаблон_("exec GetDocnum @filter = '%1'", ОбщиеФункции._СтрШаблон_("docnum.DOC_SENDER='%1' and docnum.DOC_RECEIVER='%2' and docnum.RecordDate >= ''%3''", "'1С'", "'WMS'", Формат(МинДатаЗаписи, "ДФ='dd-MM-yyyy HH:MM:ss'"))));
	Исключение
		Сообщить(ОписаниеОшибки());
		ВызватьИсключение "При обновлении статусов заявок 1C-TRANSIT произошел сбой по причине: "+ОписаниеОшибки();
	КонецПопытки;
	
	ТаблицаСтатусов.Очистить();
	
	ЗаполнитьТаблицуСтатусов(Результат);
	
КонецФункции 

#КонецОбласти 

#Область ПРОЧЕЕ

Функция НайтиСоответствующуюКорректировкуКачестваПоклажедателя(Состав)
	
	ТаблицаЗаявокОК = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьЗаявкиПоСтатусам("Объект, Идентификатор", Справочники.СтатусыЗаявок.Новая,
		"Объединенные кондитеры", "1С", "Документ.КорректировкаКачестваЗапасов");
		
	СтруктураОтбораСтрок = Новый Структура("Номенклатура, СерияНоменклатуры, Качество, КодОснованияКорректировки");
	
	СтруктураОтбораСтрок.КодОснованияКорректировки = КодОперацииКорректировкиПоПросьбеПоклажедателя;
	
	Для каждого СтрТаб Из ТаблицаЗаявокОК Цикл
		
		ДокОбъект = СтрТаб.Объект.ПолучитьОбъект();
		
		КоличествоОбработанныхСтрок = 0;
		
		Для каждого СтрТабЧасть Из ДокОбъект.Товары Цикл
			
			Если СтрТабЧасть.Количество > 0 Тогда
				КоличествоОбработанныхСтрок = КоличествоОбработанныхСтрок + 1;
				Продолжить;
			КонецЕсли; 
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбораСтрок, СтрТабЧасть);
			
			СтруктураОтбораСтрок.Качество = СтрТабЧасть.КачествоНовое;
			
			СтрокиКорректировкиВМС = Состав.НайтиСтроки(СтруктураОтбораСтрок);
			
			Если СтрокиКорректировкиВМС.Количество() > 0 Тогда
				
				Для каждого ЭлМассива Из СтрокиКорректировкиВМС Цикл
					
					СтрТабЧасть.Количество = СтрТабЧасть.Количество + ЭлМассива.Количество;	
					
					КоличествоОбработанныхСтрок = КоличествоОбработанныхСтрок + 1;
					
				КонецЦикла; 
				
			КонецЕсли; 
				
		КонецЦикла;
		
		Попытка				
			
			Если КоличествоОбработанныхСтрок = ДокОбъект.Товары.Количество() Тогда
				ДокОбъект.Дата = ТекущаяДатаСеанса();
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			Иначе 
				ДокОбъект.Записать();
			КонецЕсли;
			
		Исключение
			Лог1С.Вывести("Не удалось провести документ '{0}' по причине: {1}", СтатусСообщения.ОченьВажное, ДокОбъект.Ссылка, ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла; 

	
КонецФункции
 
Процедура ЗаполнитьСвойстваДокументов(ДляЗаполнения)
	
	Если ДляЗаполнения.Свойство("НомераПалетов")
		И ЗначениеЗаполнено(ДляЗаполнения.НомераПалетов) Тогда
		
		ОбщиеФункции.УстановитьЗначениеСвойства(Новый Структура("Объект, Свойство, Значение", 
		ДляЗаполнения.Ссылка, СвойствоДокумента_НомерПалета, ДляЗаполнения.НомераПалетов));
		
	КонецЕсли;
	
	Если ДляЗаполнения.Свойство("КоличествоУпаковок")
		И ЗначениеЗаполнено(ДляЗаполнения.КоличествоУпаковок) Тогда
		
		ОбщиеФункции.УстановитьЗначениеСвойства(Новый Структура("Объект, Свойство, Значение", 
		ДляЗаполнения.Ссылка, СвойствоДокумента_КоличествоУпаковок, ДляЗаполнения.КоличествоУпаковок));
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьТаблицуАналоговОсновныхКарточек(Склад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	влЗапрос.ОсновнаяКарточкаНоменклатуры КАК Номенклатура,
	|	влЗапрос.ОсновнаяКарточкаНоменклатуры.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	Остатки.СерияНоменклатуры,
	|	ЕСТЬNULL(Остатки.СерияНоменклатуры.ДатаПроизводства, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПроизводства,
	|	Остатки.Качество,
	|	Остатки.КоличествоОстаток КАК КоличествоОстаток,
	|	влЗапрос.ОсновнаяКарточкаНоменклатуры,
	|	1 КАК Порядок
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗначенияСвойствОбъектов.Объект КАК Номенклатура,
	|		ЗначенияСвойствОбъектов.Свойство КАК Свойство,
	|		ЗначенияСвойствОбъектов.Значение КАК ОсновнаяКарточкаНоменклатуры
	|	ИЗ
	|		РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|	ГДЕ
	|		ЗначенияСвойствОбъектов.Свойство = &Свойство_ОсновнаяКарточка) КАК влЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(, Склад = &Склад) КАК Остатки
	|		ПО влЗапрос.ОсновнаяКарточкаНоменклатуры = Остатки.Номенклатура
	|ГДЕ
	|	Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	влЗапрос.ОсновнаяКарточкаНоменклатуры,
	|	влЗапрос.ОсновнаяКарточкаНоменклатуры.ЕдиницаХраненияОстатков,
	|	Остатки.СерияНоменклатуры,
	|	ЕСТЬNULL(Остатки.СерияНоменклатуры.ДатаПроизводства, ДАТАВРЕМЯ(1, 1, 1)),
	|	Остатки.Качество,
	|	Остатки.КоличествоОстаток,
	|	влЗапрос.ОсновнаяКарточкаНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	влЗапрос.Номенклатура,
	|	влЗапрос.Номенклатура.ЕдиницаХраненияОстатков,
	|	Остатки.СерияНоменклатуры,
	|	ЕСТЬNULL(Остатки.СерияНоменклатуры.ДатаПроизводства, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(Остатки.Качество, ЗНАЧЕНИЕ(Справочник.Качество.Стандарт)),
	|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0),
	|	влЗапрос.ОсновнаяКарточкаНоменклатуры,
	|	2
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗначенияСвойствОбъектов.Объект КАК Номенклатура,
	|		ЗначенияСвойствОбъектов.Свойство КАК Свойство,
	|		ЗначенияСвойствОбъектов.Значение КАК ОсновнаяКарточкаНоменклатуры
	|	ИЗ
	|		РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|	ГДЕ
	|		ЗначенияСвойствОбъектов.Свойство = &Свойство_ОсновнаяКарточка) КАК влЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(, Склад = &Склад) КАК Остатки
	|		ПО влЗапрос.Номенклатура = Остатки.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	КоличествоОстаток УБЫВ";
	
	Запрос.УстановитьПараметр("Свойство_ОсновнаяКарточка", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("000160")); 
	Запрос.УстановитьПараметр("Склад", Склад); 
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции 

Процедура РаспределитьКоличествоОсновнойКарточкиПоАналогам(Состав, Склад)
	
	Если ТаблицаАналоговОсновныхКарточек = Неопределено Тогда
		ТаблицаАналоговОсновныхКарточек = ПолучитьТаблицуАналоговОсновныхКарточек(Склад);	
	КонецЕсли; 
	
	МассивСтрокНаУдаление = Новый Массив;
	
	КоличествоСтрок = Состав.Количество();
	
	Для Сч=0 По КоличествоСтрок-1 Цикл
		
		СтрТаб = Состав.Получить(Сч);
		
		ДатаПроизводства = Дата(1,1,1);
		
		Если ЗначениеЗаполнено(СтрТаб.СерияНоменклатуры) Тогда
			ДатаПроизводства = СтрТаб.СерияНоменклатуры.ДатаПроизводства;
		КонецЕсли;
		
		ОсновнаяКарточкаНоменклатуры = СтрТаб.Номенклатура;
		
		Если ТаблицаАналоговОсновныхКарточек.Найти(СтрТаб.Номенклатура, "Номенклатура") <> Неопределено Тогда
			ОсновнаяКарточкаНоменклатуры = ТаблицаАналоговОсновныхКарточек.Найти(СтрТаб.Номенклатура, "Номенклатура").ОсновнаяКарточкаНоменклатуры;		
			Если СтрТаб.Номенклатура <> ОсновнаяКарточкаНоменклатуры Тогда
				Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("Найден остаток ВМС, где номенклатура остатка '%1' не равна основной карточке '%2'. Будет попытка распределить по остаткам основной карточки", СтрТаб.Номенклатура, ОсновнаяКарточкаНоменклатуры), СтатусСообщения.Внимание);
			КонецЕсли; 
		КонецЕсли;  
		
		ОстаткиОсновнойКарточки = ТаблицаАналоговОсновныхКарточек.НайтиСтроки(Новый Структура("ОсновнаяКарточкаНоменклатуры, Порядок", ОсновнаяКарточкаНоменклатуры, 1));
		
		КоличествоДляРаспределения = СтрТаб.Количество;
		КачествоДляРаспределения = СтрТаб.Качество;
		СтрокаСкорректирована = (ОстаткиОсновнойКарточки.Количество() > 0) 
		ИЛИ (ОстаткиОсновнойКарточки.Количество() = 0 И ТаблицаАналоговОсновныхКарточек.Найти(СтрТаб.Номенклатура, "ОсновнаяКарточкаНоменклатуры") <> Неопределено)
		ИЛИ ((ОстаткиОсновнойКарточки.Количество() = 0) И ТаблицаАналоговОсновныхКарточек.Найти(СтрТаб.Номенклатура, "Номенклатура") <> Неопределено);
		
		Для каждого ЭлМассива Из ОстаткиОсновнойКарточки Цикл
			
			Если ЭлМассива.КоличествоОстаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если КоличествоДляРаспределения <= 0 Тогда
				Прервать;
			КонецЕсли; 
			
			НовСтр = Состав.Добавить();
			
			ЗаполнитьЗначенияСвойств(НовСтр, СтрТаб,,"Номенклатура, Качество, СерияНоменклатуры, ЕдиницаИзмерения");
			ЗаполнитьЗначенияСвойств(НовСтр, ЭлМассива, "Номенклатура, Качество, СерияНоменклатуры, ЕдиницаИзмерения");
			
			Если СтрТаб.ЕдиницаИзмерения.Коэффициент <> ЭлМассива.ЕдиницаИзмерения.Коэффициент Тогда
				// Переведем остатки WMS в единицы хранения остатков 1С
				Если СтрТаб.ЕдиницаИзмерения.Коэффициент > ЭлМассива.ЕдиницаИзмерения.Коэффициент Тогда
					СтрТаб.Количество = СтрТаб.Количество * СтрТаб.Коэффициент;
				ИначеЕсли СтрТаб.ЕдиницаИзмерения.Коэффициент < ЭлМассива.ЕдиницаИзмерения.Коэффициент Тогда
					СтрТаб.Количество = СтрТаб.Количество / СтрТаб.Коэффициент;
				КонецЕсли;	
				
				ВыборкаЕлиниц = Справочники.ЕдиницыИзмерения.Выбрать(, СтрТаб.Номенклатура);
				
				Пока ВыборкаЕлиниц.Следующий() Цикл
					
					Если ВыборкаЕлиниц.ПометкаУдаления Тогда
						Продолжить;
					КонецЕсли; 
					
					Если ВыборкаЕлиниц.ЕдиницаПоКлассификатору = ЭлМассива.ЕдиницаИзмерения.ЕдиницаПоКлассификатору Тогда
						Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("По товару '%1' изменилась единица измерения и пересчиталось количество
						|Единица до: %2
						|Единица после: %3", СтрТаб.Номенклатура, СтрТаб.ЕдиницаИзмерения, ВыборкаЕлиниц.Ссылка), СтатусСообщения.Внимание);
						СтрТаб.ЕдиницаИзмерения = ВыборкаЕлиниц.Ссылка;
						СтрТаб.Коэффициент = ВыборкаЕлиниц.Коэффициент;	
					КонецЕсли; 
					
				КонецЦикла; 
				
			КонецЕсли;  
			
			СтрТаб.Коэффициент = ЭлМассива.ЕдиницаИзмерения.Коэффициент;
			СтрТаб.Качество = ЭлМассива.Качество;
			
			Если КоличествоДляРаспределения >= ЭлМассива.КоличествоОстаток Тогда
				КоличествоДляРаспределения = КоличествоДляРаспределения - ЭлМассива.КоличествоОстаток;
				НовСтр.Количество = ЭлМассива.КоличествоОстаток;
				ЭлМассива.КоличествоОстаток = 0;
			ИначеЕсли КоличествоДляРаспределения <= ЭлМассива.КоличествоОстаток Тогда 
				НовСтр.Количество = КоличествоДляРаспределения;
				ЭлМассива.КоличествоОстаток = ЭлМассива.КоличествоОстаток - НовСтр.Количество;
				КоличествоДляРаспределения = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаСкорректирована Тогда
			МассивСтрокНаУдаление.Добавить(СтрТаб);
		КонецЕсли;
		
		Если КоличествоДляРаспределения <= 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Аналоги = ТаблицаАналоговОсновныхКарточек.НайтиСтроки(Новый Структура("ОсновнаяКарточкаНоменклатуры, ДатаПроизводства, Качество, Порядок", ОсновнаяКарточкаНоменклатуры, ДатаПроизводства, КачествоДляРаспределения, 2)); 
		
		Если Аналоги.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		СчАналог = 0;
		КолАналогов = Аналоги.Количество();
		Для каждого Аналог Из Аналоги Цикл
			
			СчАналог = СчАналог + 1;
			
			//Если Аналог.КоличествоОстаток <= 0 Тогда
			//	Продолжить;
			//КонецЕсли;
			
			НовСтр = Состав.Добавить();
			
			ЗаполнитьЗначенияСвойств(НовСтр, СтрТаб,,"Номенклатура, Качество, СерияНоменклатуры, ЕдиницаИзмерения");
			ЗаполнитьЗначенияСвойств(НовСтр, Аналог, "Номенклатура, Качество, СерияНоменклатуры, ЕдиницаИзмерения");
			
			Если СтрТаб.ЕдиницаИзмерения.Коэффициент <> НовСтр.ЕдиницаИзмерения.Коэффициент Тогда
				// Переведем остатки WMS в единицы хранения остатков 1С
				Если СтрТаб.ЕдиницаИзмерения.Коэффициент > НовСтр.ЕдиницаИзмерения.Коэффициент Тогда
					СтрТаб.Количество = СтрТаб.Количество * СтрТаб.Коэффициент;
				ИначеЕсли СтрТаб.ЕдиницаИзмерения.Коэффициент < НовСтр.ЕдиницаИзмерения.Коэффициент Тогда
					СтрТаб.Количество = СтрТаб.Количество / СтрТаб.Коэффициент;
				КонецЕсли;	
				
				ВыборкаЕлиниц = Справочники.ЕдиницыИзмерения.Выбрать(, СтрТаб.Номенклатура);
				
				Пока ВыборкаЕлиниц.Следующий() Цикл
					
					Если ВыборкаЕлиниц.ПометкаУдаления Тогда
						Продолжить;
					КонецЕсли; 
					
					Если ВыборкаЕлиниц.ЕдиницаПоКлассификатору = НовСтр.ЕдиницаИзмерения.ЕдиницаПоКлассификатору Тогда
						Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("По товару '%1' изменилась единица измерения и пересчиталось количество
						|Единица до: %2
						|Единица после: %3", СтрТаб.Номенклатура, СтрТаб.ЕдиницаИзмерения, ВыборкаЕлиниц.Ссылка), СтатусСообщения.Внимание);
						СтрТаб.ЕдиницаИзмерения = ВыборкаЕлиниц.Ссылка;
						СтрТаб.Коэффициент = ВыборкаЕлиниц.Коэффициент;	
					КонецЕсли; 
					
				КонецЦикла; 
				
			КонецЕсли;  
			
			НовСтр.Коэффициент = НовСтр.ЕдиницаИзмерения.Коэффициент;
			
			Если КоличествоДляРаспределения >= Аналог.КоличествоОстаток Тогда
				НовСтр.Количество = Аналог.КоличествоОстаток;
				КоличествоДляРаспределения = КоличествоДляРаспределения - Аналог.КоличествоОстаток;
				Аналог.КоличествоОстаток = 0;
			ИначеЕсли КоличествоДляРаспределения <= Аналог.КоличествоОстаток Тогда 
				НовСтр.Количество = КоличествоДляРаспределения;
				Аналог.КоличествоОстаток = Аналог.КоличествоОстаток - КоличествоДляРаспределения;
				КоличествоДляРаспределения = 0;
			КонецЕсли; 
			// Если это последний аналог и его остатка 1С не хватило для корректировки основной карточки, Тогда бросаем на него все оставшееся количество основной карточки
			Если КоличествоДляРаспределения > 0
				И СчАналог = КолАналогов Тогда
				
				НовСтр.Количество = НовСтр.Количество + КоличествоДляРаспределения;
				КоличествоДляРаспределения = 0;
				
				
			КонецЕсли; 
			
			Если КоличествоДляРаспределения <= 0 Тогда
				Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("Товар '%1'  перераспределился с учетом аналога '%2'", СтрТаб.Номенклатура, НовСтр.Номенклатура), СтатусСообщения.Внимание);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		
	КонецЦикла; 
	
	Для каждого СтрТаб Из Состав Цикл
		Если СтрТаб.Количество = 0 Тогда
			МассивСтрокНаУдаление.Добавить(СтрТаб);
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого ЭлМассива Из МассивСтрокНаУдаление Цикл
		Состав.Удалить(ЭлМассива);	
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПодобратьСкладДляВладельцаЗапасов(ВладелецЗапасов)
	
	Если ТипЗнч(ВладелецЗапасов) = Тип("СправочникСсылка.Кластеры") Тогда
		Возврат ЛогКомплекс;
	Иначе
		Возврат ЛогКомплекс_СОХ;
	КонецЕсли; 	
	
КонецФункции	 

Функция ПолучитьВладельцаЗапасов(ИдВладельцаЗапасов)
	
	ВладелецЗапасов = Справочники.Кластеры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдВладельцаЗапасов));			
	
	Если СокрЛП(ВладелецЗапасов.Код) = "" Тогда
		
		ВладелецЗапасов = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдВладельцаЗапасов));				
		
	КонецЕсли; 
	
	Если СокрЛП(ВладелецЗапасов.Код) = "" Тогда
		
		Лог1С.Вывести("Не удалось найти владельца запасов с кодом '{0}'", СтатусСообщения.Внимание, ИдВладельцаЗапасов);
		ВладелецЗапасов = Справочники.Кластеры.ПустаяСсылка();
		
	КонецЕсли; 
	
	Возврат ВладелецЗапасов;
	
КонецФункции	 

Функция ПреобразоватьДанныеВМС_В_1С(Состав)
	
	втТабЗнач = Новый ТаблицаЗначений;
	втТабЗнач.Колонки.Добавить("Номенклатура",              Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	втТабЗнач.Колонки.Добавить("ЕдиницаИзмерения",          Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	втТабЗнач.Колонки.Добавить("Коэффициент",               Новый ОписаниеТипов("Число",  , , Новый КвалификаторыЧисла(15, 4, ДопустимыйЗнак.Неотрицательный)));
	втТабЗнач.Колонки.Добавить("Качество",                  Новый ОписаниеТипов("СправочникСсылка.Качество"));
	втТабЗнач.Колонки.Добавить("Количество",                Новый ОписаниеТипов("Число",  , , Новый КвалификаторыЧисла(15, 4, ДопустимыйЗнак.Любой)));
	втТабЗнач.Колонки.Добавить("СерияНоменклатуры",         Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	втТабЗнач.Колонки.Добавить("ДатаПроизводства",          Новый ОписаниеТипов("Дата",   , , ,                            ,  Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	втТабЗнач.Колонки.Добавить("СрокГодности",              Новый ОписаниеТипов("Дата",   , , ,                            ,  Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	втТабЗнач.Колонки.Добавить("ИдПакета",                  Новый ОписаниеТипов("Строка", , , ,                            Новый КвалификаторыСтроки(50)));
	втТабЗнач.Колонки.Добавить("ИдСтроки",                  Новый ОписаниеТипов("Строка", , , ,                            Новый КвалификаторыСтроки(50)));
	втТабЗнач.Колонки.Добавить("КодКорректировки",          Новый ОписаниеТипов("Строка", , , ,                            Новый КвалификаторыСтроки(50)));
	втТабЗнач.Колонки.Добавить("ТипОперации",               Новый ОписаниеТипов("Строка", , , ,                            Новый КвалификаторыСтроки(15)));
	втТабЗнач.Колонки.Добавить("ВладелецЗапасов",           Новый ОписаниеТипов("СправочникСсылка.Кластеры"));
	втТабЗнач.Колонки.Добавить("КодОснованияКорректировки", Новый ОписаниеТипов("Число"));
	
	Для каждого ЭлКоллекции Из Состав Цикл
		
		ДопПараметрыДляЕГАИС = Новый Структура;
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Номенклатура", 		Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлКоллекции.MaterialCode)));			
		СтруктураЗаписи.Вставить("ЕдиницаИзмерения", 	Справочники.ЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлКоллекции.MaterialUnitCode)));
		СтруктураЗаписи.Вставить("Коэффициент", 		СтруктураЗаписи.ЕдиницаИзмерения.Коэффициент);
		СтруктураЗаписи.Вставить("Качество", 			ПолучитьСопоставленноеКачество(ЭлКоллекции.QualityTypeCode));
		СтруктураЗаписи.Вставить("Количество", 			ЭлКоллекции.Quantity);
		СтруктураЗаписи.Вставить("ДатаПроизводства",	ЭлКоллекции.ProductionDate);
		СтруктураЗаписи.Вставить("СрокГодности",		ЭлКоллекции.ExpirationDate);
		СтруктураЗаписи.Вставить("ИдПакета", 			ЭлКоллекции.DOCNUM);
		// Параметры для подбора серии в разрезе справки А и Б для алкольной продукции
		Если Состав.Колонки.Найти("MaterialSeriesCode") <> Неопределено
			И ЗначениеЗаполнено(ЭлКоллекции.MaterialSeriesCode)
			И СтруктураЗаписи.Номенклатура.СодержитСпирт Тогда
			
			МассивПодстрок = ОбщиеФункции.РазложитьСтрокуВМассив(ЭлКоллекции.MaterialSeriesCode, "_"); // FA-000000043472436_FB-000002952508683
			
			Если МассивПодстрок.Количество() > 0 Тогда
				ДопПараметрыДляЕГАИС.Вставить("ИдСправкиА", МассивПодстрок.Получить(0));
				ДопПараметрыДляЕГАИС.Вставить("ИдСправкиБ", МассивПодстрок.Получить(1));
			КонецЕсли; 
			
		КонецЕсли;
		
		Если СокрЛП(СтруктураЗаписи.Номенклатура.Код) = "" Тогда
			
			Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("Не удалось найти номенклатуру с кодом '%1'", ЭлКоллекции.MaterialCode), СтатусСообщения.ОченьВажное);
			Продолжить;
			
		КонецЕсли;
		
		СтруктураЗаписи.Вставить("СерияНоменклатуры", 	ПолучитьСериюНоменклатурыПоДатеПроизводства(СтруктураЗаписи.Номенклатура, СтруктураЗаписи.ДатаПроизводства, ДопПараметрыДляЕГАИС));
		
		Если Состав.Колонки.Найти("DeliveryTypeCode") <> Неопределено Тогда
			СтруктураЗаписи.Вставить("ТипОперации", ЭлКоллекции.DeliveryTypeCode);	
		ИначеЕсли Состав.Колонки.Найти("OperationCode") <> Неопределено Тогда 	
			СтруктураЗаписи.Вставить("ТипОперации", ЭлКоллекции.OperationCode);		
		КонецЕсли; 
		
		Если Состав.Колонки.Найти("OwnerCode") <> Неопределено Тогда
			СтруктураЗаписи.Вставить("ВладелецЗапасов", Справочники.Кластеры.ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлКоллекции.OwnerCode)));	
		Иначе
			СтруктураЗаписи.Вставить("ВладелецЗапасов", СтруктураЗаписи.Номенклатура.ДистрибьюторскийКонтракт.Кластер);	
		КонецЕсли;
		
		Если Состав.Колонки.Найти("tid") <> Неопределено Тогда
			СтруктураЗаписи.Вставить("ИдСтроки", ЭлКоллекции.tid);
		Иначе
			СтруктураЗаписи.Вставить("ИдСтроки", "");	
		КонецЕсли;	
		
		Если Состав.Колонки.Найти("CorrectionCode") <> Неопределено Тогда
			СтруктураЗаписи.Вставить("КодКорректировки", ЭлКоллекции.CorrectionCode);	
		Иначе
			СтруктураЗаписи.Вставить("КодКорректировки", "");		
		КонецЕсли;
		
		Если Состав.Колонки.Найти("FormatCorrection") <> Неопределено Тогда
			СтруктураЗаписи.Вставить("КодОснованияКорректировки", ЭлКоллекции.FormatCorrection);	
		Иначе
			СтруктураЗаписи.Вставить("КодОснованияКорректировки", 0);		
		КонецЕсли;
		
		НовСтр = втТабЗнач.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтруктураЗаписи);
		
	КонецЦикла;	
	
	Возврат втТабЗнач;
	
КонецФункции

Процедура УстановитьСвязьМеждуПарнымиДвижениями(ПараметрыПрихода, ПараметрыРасхода)
	
	Если ЗначениеЗаполнено(ПараметрыПрихода.Объект) 
		И ЗначениеЗаполнено(ПараметрыПрихода.Основание) Тогда
		
		ДокументПрихода = ПараметрыПрихода.Объект.ПолучитьОбъект();
		Если НЕ ДокументПрихода.Заблокирован() Тогда
			ДокументПрихода.Основание = ДокументПрихода.Основание + " / " +ПараметрыПрихода.Основание;
			ДокументПрихода.Записать();
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыРасхода.Объект) 
		И ЗначениеЗаполнено(ПараметрыРасхода.Основание) Тогда
		
		ДокументРасхода = ПараметрыРасхода.Объект.ПолучитьОбъект();
		Если НЕ ДокументРасхода.Заблокирован() Тогда
			ДокументРасхода.Основание = ДокументРасхода.Основание + " / " +ПараметрыРасхода.Основание;
			ДокументРасхода.Записать();
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьКлассификациюТиповКорректировокЗапасовWMS()
	КлассификаторТиповКорректировокЗапасов = Новый Соответствие();		
	КлассификаторТиповКорректировокЗапасов.Вставить("+", "Одиночное приходование");
	КлассификаторТиповКорректировокЗапасов.Вставить("-", "Одиночное списание");
	КлассификаторТиповКорректировокЗапасов.Вставить("DATE", "Изменение сроков годности");
	КлассификаторТиповКорректировокЗапасов.Вставить("STOCK", "Изменение качества");
	КлассификаторТиповКорректировокЗапасов.Вставить("OWNER", "Изменение владельца запасов");
	КлассификаторТиповКорректировокЗапасов.Вставить("SERIES", "Изменение партии");
КонецФункции

Функция ПолучитьКлассификациюПоТипуКорректировки(ТипКорректировки)
	Возврат КлассификаторТиповКорректировокЗапасов[ТипКорректировки];
КонецФункции

Процедура ПолучитьКорректировкиЗапасов()
	
	Попытка
		Результат = ВыполнитьКоманду("select 1 where exists (select * from StockCorrection where CHECKED_BY_PI is null)"); // Основной
	Исключение
		Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("Не удалось выполнить операцию 'СоздатьДокументыКорректировкиЗапасов' по причине: %1", ОписаниеОшибки()), СтатусСообщения.ОченьВажное);
		Возврат;
	КонецПопытки;
	
	Если НЕ Результат.EOF Тогда
		
		СтруктураЗаписи = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьСтруктуруЗаписи();
		СтруктураЗаписи.Объект 		= Документы.РегистраторЗаписи.СоздатьНовыйДокумент();
		СтруктураЗаписи.ДатаЗаписи	= ТекущаяДата();
		СтруктураЗаписи.ДатаВремяПолученияЗаявкиСервисом = ТекущаяДата(); 
		СтруктураЗаписи.Источник 	= "WMS";
		СтруктураЗаписи.Приемник 	= "1С";
		СтруктураЗаписи.Статус		= Справочники.СтатусыЗаявок.Новая;
		СтруктураЗаписи.Текст		= "СоздатьДокументыКорректировкиЗапасов()"; 
		
		РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДобавитьЗапись(СтруктураЗаписи);											
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОтветыWMSПоЗаявкам()
	
	Если НЕ Автотесты Тогда
		
		Попытка
			Результат = ВыполнитьКоманду(ОбщиеФункции._СтрШаблон_("exec GetDocnum @filter = '%1'", ОбщиеФункции._СтрШаблон_("docnum.DOC_SENDER='%1' and docnum.DOC_RECEIVER='%2' and docnum.CHECKED_BY_PI is null and docnum.RecordDate >= ''%3''", "'WMS'", "'1С'", Формат(ТекущаяДата() - 28800, "ДФ='dd-MM-yyyy HH:mm:ss'"))));
		Исключение
			ВызватьИсключение "При создании заявок WMS-1C произошел сбой по причине: "+ОписаниеОшибки();
		КонецПопытки;	
		
	Иначе                                                                                                                                                                                                                                                                                        
		
		Попытка
			Результат = ВыполнитьКоманду("select NEWID() as docnum, null as proc_date, null as proc_date_beg, null as proc_status, null as comment, GETDATE() as RecordDate");
		Исключение
			ВызватьИсключение "При создании заявок WMS-1C произошел сбой по причине: "+ОписаниеОшибки();
		КонецПопытки;	
		
	КонецЕсли; 
	
	ТаблицаСтатусов.Очистить();
	
	ЗаполнитьТаблицуСтатусов(Результат);	
	
	Для каждого Заявка Из ТаблицаСтатусов Цикл
		
		Если Заявка.ТипОтвета = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ЗаписьСуществует(Новый Структура("Источник, Приемник, Идентификатор", "WMS", "1С", Заявка.ИдПакета)) = Истина Тогда
			Продолжить;
		КонецЕсли;  
		
		СтруктураЗаписи = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьСтруктуруЗаписи();
		СтруктураЗаписи.Источник = "WMS";
		СтруктураЗаписи.Приемник = "1С";
		СтруктураЗаписи.Статус = Справочники.СтатусыЗаявок.Новая;
		СтруктураЗаписи.Объект = Документы.РегистраторЗаписи.СоздатьНовыйДокумент();
		СтруктураЗаписи.Идентификатор = Заявка.ИдПакета;
		СтруктураЗаписи.ДатаВремяПолученияЗаявкиСервисом = Заявка.ДатаЗаписи;
		СтруктураЗаписи.ДатаЗаписи = ТекущаяДата(); 
		СтруктураЗаписи.Текст = ОбщиеФункции._СтрШаблон_("СоздатьДокументы1С(""%1"")", Заявка.ИдПакета);
		
		РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДобавитьЗапись(СтруктураЗаписи);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуСоответствийКачеств()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Качество.Ссылка,
	|	Качество.ВнешнийКодWMS
	|ИЗ
	|	Справочник.Качество КАК Качество
	|ГДЕ
	|	Качество.ВнешнийКодWMS <> """"";
	
	ТаблицаСопоставленияКачеств = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры 

Функция ПолучитьСопоставленноеКачество(ВнешнийКод)
	
	Качество = Справочники.Качество.Стандарт;
	
	СтрТабСопоставленноеКачество = ТаблицаСопоставленияКачеств.Найти(ВнешнийКод, "ВнешнийКодWMS");
	
	Если СтрТабСопоставленноеКачество <> Неопределено Тогда
		Качество = СтрТабСопоставленноеКачество.Ссылка;
	КонецЕсли; 
	
	Возврат Качество;
	
КонецФункции	

Процедура ПолучитьЗаказыУдаленныеИзБ2Б()
	
	Попытка
		Результат = ВыполнитьКоманду("exec Get_B2BDeleteHdrRequest");
	Исключение
		Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("Не удалось выполнить операцию 'ПолучитьЗаказыУдаленныеИзБ2Б' по причине: %1", ОписаниеОшибки()), СтатусСообщения.ОченьВажное);
		Возврат;
	КонецПопытки;
	
	втТабЗнач = ПоместитьНаборЗаписейSQLВТабЗнач(Результат);
	
	Для каждого СтрТаб Из втТабЗнач Цикл
		
		ДокСсылка = НайтиОбъектПоИД(СтрТаб.ExternalCode, СтрТаб.DeliveryType);
		
		СтруктураЗаписи = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьСтруктуруЗаписи();
		СтруктураЗаписи.Объект 		= Документы.РегистраторЗаписи.СоздатьНовыйДокумент(Строка(ДокСсылка));
		СтруктураЗаписи.ДатаЗаписи	= ТекущаяДата();
		СтруктураЗаписи.ДатаВремяПолученияЗаявкиСервисом = ТекущаяДата(); 
		СтруктураЗаписи.Источник 	= "WMS";
		СтруктураЗаписи.Приемник 	= "1С";
		СтруктураЗаписи.Статус		= Справочники.СтатусыЗаявок.Новая;
		СтруктураЗаписи.Текст		= ОбщиеФункции._СтрШаблон_("ОтменитьПроведениеДокумента(""%1"", ""%2"", ""%3"", ""%4"")", 
		СтрТаб.ExternalCode, СтрТаб.DeliveryType, Строка(СтрТаб.RecordDate), СтрТаб.Username);
		
		РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДобавитьЗапись(СтруктураЗаписи);
		
		ВыполнитьКоманду(ОбщиеФункции._СтрШаблон_("exec Patch_B2BDeleteHdrRequest @ExternalCode='%1', @CHECKED_BY_PI='%2'",
		СтрТаб.ExternalCode, Формат(ТекущаяДата(), "ДФ='dd-MM-yyyy HH:MM:ss'")));
		
	КонецЦикла; 
	
КонецПроцедуры

Функция ПолучитьЭкспедитораИзМаршрута(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаршрутЭкспедитораДокументыОснования.Ссылка.Экспедитор КАК Экспедитор
	|ИЗ
	|	Документ.МаршрутЭкспедитора.ДокументыОснования КАК МаршрутЭкспедитораДокументыОснования
	|ГДЕ
	|	МаршрутЭкспедитораДокументыОснования.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Экспедитор;	
	Иначе
		Возврат ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьПолучателяРСО(ДокументОснование)
	
	ПолучательРСО = ДокументОснование.Контрагент;
	
	Если ОбщиеФункции.ЕстьРеквизитДокумента("ВидПоставки", ДокументОснование.Метаданные()) Тогда
		
		ВидПоставки = ДокументОснование.ВидПоставки;
		
		Если ВидПоставки.Доставка Тогда
			
			Если ВидПоставки.ЧерезТорговогоПредставителя Тогда
				ПолучательРСО = ДокументОснование.Ответственный.ФизЛицо;
			Иначе
				ПолучательРСО = ПолучитьЭкспедитораИзМаршрута(ДокументОснование);
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли; 
	
	Возврат ПолучательРСО
	
КонецФункции

Процедура СформироватьОтчет(ТабЗнач)
	//	
Конецпроцедуры

Процедура ДобавитьСтрокуНовойСерии(СтруктураЗаписи)
	
	НовСтр = ДополнительныеПараметры.НовыеСерии.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтр, СтруктураЗаписи);
	
	Лог1С.Вывести("Создана новая серия '{0}' по товару '{1}'", СтатусСообщения.Внимание, СтруктураЗаписи.СерияНоменклатуры, СтруктураЗаписи.Номенклатура);
	
КонецПроцедуры	

Процедура ДобавитьСтрокуДляОбработкиВручную(СтруктураЗаписи)
	
	НовСтр = ДополнительныеПараметры.ОбработкаОшибокПоЗагрузкеОписей.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтр, СтруктураЗаписи);
	
	Лог1С.Вывести("Добавлена строка с материалом {0} для обработки вручную", СтатусСообщения.БезСтатуса, СтруктураЗаписи.НаименованиеМатериала);
	
КонецПроцедуры	 

Функция ПоместитьНаборЗаписейSQLВТабЗнач(НаборЗаписей)
	
	ТабЗнач = Новый ТаблицаЗначений;
	
	Для каждого Поле Из НаборЗаписей.Fields Цикл
		ТабЗнач.Колонки.Добавить(Поле.Name);	
	КонецЦикла; 
	
	Пока НЕ НаборЗаписей.EOF Цикл
		
		НовСтр = ТабЗнач.Добавить();
		
		Для каждого Колонка Из ТабЗнач.Колонки Цикл
			НовСтр[Колонка.Имя] = НаборЗаписей.Fields(Колонка.Имя).Value;
		КонецЦикла; 
		
		НаборЗаписей.MoveNext();
		
	КонецЦикла; 
	
	Возврат ТабЗнач;
	
КонецФункции

Функция ПолучитьСериюНоменклатурыПоДатеПроизводства(Владелец, ДатаПроизводства, ДопПараметрыДляЕГАИС = Неопределено, ДопПараметрыМеркурий = Неопределено)
	
	СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
	
	Если НЕ (Владелец.МодельСкладскогоУчета.КонтрольДатыПроизводства
		ИЛИ Владелец.МодельСкладскогоУчета.КонтрольСроковГодности) Тогда
		Возврат СерияНоменклатуры;	
	КонецЕсли;		
	
	ИдСправкиА = ?(ДопПараметрыДляЕГАИС <> Неопределено И ДопПараметрыДляЕГАИС.Свойство("ИдСправкиА"), ДопПараметрыДляЕГАИС.ИдСправкиА, "");
	ИдСправкиБ = ?(ДопПараметрыДляЕГАИС <> Неопределено И ДопПараметрыДляЕГАИС.Свойство("ИдСправкиБ"), ДопПараметрыДляЕГАИС.ИдСправкиБ, "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	влЗапрос.СерияНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕГАИС_СоответствиеСерийНоменклатуры.СерияНоменклатуры КАК СерияНоменклатуры
	|	ИЗ
	|		РегистрСведений.ЕГАИС_СоответствиеСерийНоменклатуры КАК ЕГАИС_СоответствиеСерийНоменклатуры
	|	ГДЕ
	|		ЕГАИС_СоответствиеСерийНоменклатуры.СерияНоменклатуры.Владелец = &Владелец
	|		И ЕГАИС_СоответствиеСерийНоменклатуры.InformA_RegId = &ИдСправкиА
	|		И ЕГАИС_СоответствиеСерийНоменклатуры.InformBRegId = &ИдСправкиБ
	|  		И ЕГАИС_СоответствиеСерийНоменклатуры.СерияНоменклатуры.ДатаПроизводства = &ДатаПроизводства 
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ЕГАИС_СоответствиеСерийНоменклатуры.СерияНоменклатуры
	|	ИЗ
	|		РегистрСведений.ЕГАИС_СоответствиеСерийНоменклатуры КАК ЕГАИС_СоответствиеСерийНоменклатуры
	|	ГДЕ
	|		ЕГАИС_СоответствиеСерийНоменклатуры.СерияНоменклатуры.Владелец = &Владелец
	|		И ЕГАИС_СоответствиеСерийНоменклатуры.InformA_RegId = &ИдСправкиА
	|  		И ЕГАИС_СоответствиеСерийНоменклатуры.СерияНоменклатуры.ДатаПроизводства = &ДатаПроизводства 
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		СерииНоменклатуры.Ссылка
	|	ИЗ
	|		Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|	ГДЕ
	|		СерииНоменклатуры.Владелец = &Владелец
	|		И СерииНоменклатуры.ДатаПроизводства = &ДатаПроизводства) КАК влЗапрос";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	ЗАпрос.УстановитьПараметр("ИдСправкиА", ИдСправкиА); 
	ЗАпрос.УстановитьПараметр("ИдСправкиБ", ИдСправкиБ); 
	Запрос.УстановитьПараметр("ДатаПроизводства", ДатаПроизводства);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда		
		СерияНоменклатуры = ВыборкаДетальныеЗаписи.СерияНоменклатуры;	
	Иначе
		Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("Для номенклатуры '%1' с моделью складского учета '%2' не удалось найти серию по причине: не найдена серия с датой производства '%3'", 
		Владелец, Владелец.МодельСкладскогоУчета, ДатаПроизводства), СтатусСообщения.Внимание);	
	КонецЕсли;
	
	Возврат СерияНоменклатуры;
	
КонецФункции 

Процедура ЗаполнитьТаблицуСтатусов(Результат)
	
	ТаблицаСтатусов.Очистить();
	
	Пока не Результат.EOF цикл 
		
		НовСтр = ТаблицаСтатусов.Добавить();
		НовСтр.ТипОтвета = Результат.Fields("type_response").Value;
		НовСтр.ИдПакета = Результат.Fields("docnum").Value;
		НовСтр.ДатаОбработки = Результат.Fields("proc_date").Value;
		НовСтр.ДатаНачалаОбработки = Результат.Fields("proc_date_beg").Value;
		НовСтр.Статус = Результат.Fields("proc_status").Value;
		НовСтр.Комментарий = Результат.Fields("comment").Value;
		НовСтр.ДатаЗаписи = Результат.Fields("RecordDate").Value;
		
		Результат.MoveNext();
		
	КонецЦикла;
	
КонецПроцедуры	

// Функция - Найти объект по ИД
// Выполняет поиск объекта 1С по переданному идентификатору
// 
// Параметры:
//  Ид			 - Строка	- Уникальный идентификатор объекта строкой
//  ТипОбъекта	 - Строка	 - Возможные значения (IN - входящие заявки, OUT - исходящие заявки)
// 
// Возвращаемое значение:
//   - ДокументСсылка
//
Функция НайтиОбъектПоИД(Ид, ТипОбъекта)
	
	Если НЕ ЗначениеЗаполнено(ТипОбъекта)
		ИЛИ (ЗначениеЗаполнено(ТипОбъекта) И Найти(ВРЕГ("IN, OUT, RPC, RPD"), ТипОбъекта) = 0) Тогда
		Лог1С.Вывести("Не удалось найти объект по идентификатору {0} по причине: неизвестный тип объекта '{1}'. При проверке заполнения поля 'ТипОбъекта' найдена ошибка: 
		|'ТипОбъекта' должен быть заполнен и иметь значение 'IN, OUT, RPC, RPD'", СтатусСообщения.ОченьВажное, Ид, ТипОбъекта);
		Возврат Неопределено;
	КонецЕсли;  
	
	ДокСсылка = Неопределено;
	
	Если СтрДлина(Ид) < 36 Тогда
		Возврат ДокСсылка;
	КонецЕсли;
	
	уид = Новый УникальныйИдентификатор(ид);
	
	Если Врег(ТипОбъекта) = "IN" Тогда
		
		ДокСсылка = Документы.ЗаказПоставщику.ПолучитьСсылку(уид);
		
		Если СокрЛП(ДокСсылка.Номер) = "" Тогда
			ДокСсылка = Документы.ВозвратТоваровОтПокупателя.ПолучитьСсылку(Уид);
		КонецЕсли;	
		
		Если СокрЛП(ДокСсылка.Номер) = "" Тогда
			ДокСсылка = Документы.ПеремещениеТоваров.ПолучитьСсылку(Уид);
		КонецЕсли;
		
		Если СокрЛП(ДокСсылка.Номер) = "" Тогда
			ДокСсылка = Документы.ОприходованиеТоваров.ПолучитьСсылку(Уид);
		КонецЕсли;
		
		Если СокрЛП(ДокСсылка.Номер) = "" Тогда
			ДокСсылка = Документы.ИнвентаризацияДоставки.ПолучитьСсылку(Уид);
		КонецЕсли;
		
	ИначеЕсли Врег(ТипОбъекта) = "OUT" Тогда
		
		ДокСсылка = Документы.ОтгрузкаТоваровУслуг.ПолучитьСсылку(уид);
		
		Если СокрЛП(ДокСсылка.Номер) = "" Тогда
			ДокСсылка = Документы.ВозвратТоваровПоставщику.ПолучитьСсылку(уид);
		КонецЕсли;
		
		Если СокрЛП(ДокСсылка.Номер) = "" Тогда
			ДокСсылка = Документы.ПеремещениеТоваров.ПолучитьСсылку(Уид);
		КонецЕсли;
		
		Если СокрЛП(ДокСсылка.Номер) = "" Тогда
			ДокСсылка = Документы.СписаниеТоваров.ПолучитьСсылку(Уид);
		КонецЕсли;
		
		Если СокрЛП(ДокСсылка.Номер) = "" Тогда
			ДокСсылка = Документы.ВозвратТоваровПоставщику.ПолучитьСсылку(Уид);
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат ДокСсылка;
	
КонецФункции

Функция ВыполнитьКоманду(Знач СтрокаКоманды, ИспользоватьТранзакцию = Ложь, ДопПараметры = Неопределено) Экспорт
	
	Если ИспользоватьТранзакцию
		И (ТипЗнч(ДопПараметры) = Тип("Структура") 
		И ДопПараметры.Свойство("ИмяТранзакции") 
		И ДопПараметры.Свойство("ОписаниеТранзакции")
		) Тогда
		
		СтрокаКоманды = ОбщиеФункции._СтрШаблон_("
		|BEGIN TRAN @TranName WITH MARK N'@TranMark';
		|BEGIN TRY  
		|%1
		|END TRY
		|BEGIN CATCH
		|	IF @@TRANCOUNT > 0
		|  		ROLLBACK TRAN @TranName;
		|   THROW;  
		|END CATCH;   
		|
		|IF @@TRANCOUNT > 0
		|   COMMIT TRAN @TranName;", 
		СтрокаКоманды);
		
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "@TranName", ОбщиеФункции._СтрШаблон_("""%1""", ДопПараметры.ИмяТранзакции));
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "@TranMark", ОбщиеФункции._СтрШаблон_("%1", ДопПараметры.ОписаниеТранзакции));
		
	КонецЕсли; 
	
	Попытка		
		Команда.CommandText = СтрокаКоманды;
		Результат = Команда.Execute();
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура Инициализация()
	
	ВнешСистема = Обмен_1С_Транзит_ПовтИсп.ПолучитьВнешнююСистему();
	
	УстановитьСоединение();
	
	Если ВнешСистема.Пустая() Тогда
		ВызватьИсключение "Не найдена внешняя система с настройками для обмена с транзитной базой";
	КонецЕсли; 
	
	УзелОбмена = Справочники.ВнешниеСистемы.ПолучитьЗначенияКлюча(ВнешСистема, "УзелОбмена");		
	// Свойство склада "Используется WMS". Признак, что можно выгружать/загружать заявки в трандитную базу
	СвойствоСклада_ИспользуетсяWMS = Справочники.ВнешниеСистемы.ПолучитьЗначенияКлюча(ВнешСистема, "СвойствоСклада_ИспользуетсяWMS");
	// Номера палетов после консолидации заявок
	СвойствоДокумента_НомерПалета = Справочники.ВнешниеСистемы.ПолучитьЗначенияКлюча(ВнешСистема, "СвойствоДокумента_НомерПалета");	
	// Количество упаковок (штрихкодов WMS)
	СвойствоДокумента_КоличествоУпаковок = Справочники.ВнешниеСистемы.ПолучитьЗначенияКлюча(ВнешСистема, "СвойствоДокумента_КоличествоУпаковок");	
	
	СоставУзла = Метаданные.ПланыОбмена.ОбменWMSтранзит.Состав;		
	КаталогХраненияЛогов = Справочники.ВнешниеСистемы.ПолучитьЗначенияКлюча(ВнешСистема, "КаталогХраненияЛогов");
	КаталогОбмена = Справочники.ВнешниеСистемы.ПолучитьЗначенияКлюча(ВнешСистема, "КаталогОбмена");
	
	Автотесты = Ложь;
	
	ТаблицаСтатусов = Новый ТаблицаЗначений;
	ТаблицаСтатусов.Колонки.Добавить("ТипОтвета");
	ТаблицаСтатусов.Колонки.Добавить("ИдПакета");
	ТаблицаСтатусов.Колонки.Добавить("ДатаНачалаОбработки");
	ТаблицаСтатусов.Колонки.Добавить("ДатаОбработки");
	ТаблицаСтатусов.Колонки.Добавить("Статус");
	ТаблицаСтатусов.Колонки.Добавить("Комментарий");
	ТаблицаСтатусов.Колонки.Добавить("ДатаЗаписи");
	
	Лог1С = Обмен_1С_Транзит.ПолучитьНастроенныйОбъектЛога(КаталогХраненияЛогов);
	
	ЗаполнитьТаблицуСоответствийКачеств();
	
	СоздатьКлассификациюТиповКорректировокЗапасовWMS();
	
	ЛогКомплекс = Справочники.ВнешниеСистемы.ПолучитьЗначенияКлюча(ВнешСистема, "ОсновнойСклад");
	ЛогКомплекс_СОХ = Справочники.ВнешниеСистемы.ПолучитьЗначенияКлюча(ВнешСистема, "СкладОтветХранения"); // ЛОГИСТИЧЕСКИЙ КОМПЛЕКС (СОХ), пока отсутствует
	
	ОрганизацияПоУмолчанию = Справочники.ВнешниеСистемы.ПолучитьЗначенияКлюча(ВнешСистема, "Организация");
	
	КодОперацииКорректировкиПоПросьбеПоклажедателя = 2;
	
КонецПроцедуры

// Процедура - Финализировать
// Закрывает файл с логом и соединение sql
Процедура Финализировать() Экспорт
	
	Соединение = Неопределено;
	Лог1С.Закрыть();
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область ТЕСТЫ

#Область Служебные_процедуры_и_функции

Процедура Настроить() Экспорт
	
	Автотесты = Истина;
	
КонецПроцедуры

Процедура ОчиститьНастройки() Экспорт
	
	//Финализировать();
	
КонецПроцедуры

Функция ПолучитьСписокМетодов() Экспорт
	
	СписокМетодов = Новый СписокЗначений;
	СписокМетодов.Добавить("ТестСоздатьЗаявкиПоДокументамДляОтправкиВТранзит");
	СписокМетодов.Добавить("ТестВыгрузитьДанные");
	СписокМетодов.Добавить("ТестПолучитьЗаявкиВОбработке");
	СписокМетодов.Добавить("ТестПолучитьСтатусыЗаявокИзТранзитнойБазы");
	СписокМетодов.Добавить("ТестЗагрузитьДанные");
	СписокМетодов.Добавить("ТестСоздатьЗаявкуДля1С");
	СписокМетодов.Добавить("ТестОбработатьЗаявкиДля1С");
	СписокМетодов.Добавить("ТестПолучитьКорректировкиЗапасов");
	СписокМетодов.Добавить("ТестСоздатьДокументыКорректировкиЗапасов");
	СписокМетодов.Добавить("ТестПреобразоватьДанныеВМС_В_1С_КорректировкаЗапасов");
	СписокМетодов.Добавить("ТестДобавитьПринадлежностьЗапасовКОрганизации");
	СписокМетодов.Добавить("ТестПроверитьНаличиеКолонокПриКорректировкеЗапасов");
	СписокМетодов.Добавить("ТестПроверитьНаличиеКолонокПриОбработкеОтвета");
	СписокМетодов.Добавить("ТестПолучитьВладельцаЗапасов");
	СписокМетодов.Добавить("ТестПодобратьСкладДляВладельцаЗапасов");
	СписокМетодов.Добавить("ТестПолучитьСериюНоменклатурыПоДатеПроизводства");
	СписокМетодов.Добавить("ТестСоздатьСериюНоменклатуры");
	СписокМетодов.Добавить("ТестПолучитьЗапасыНаСкладеИзWMS");
	СписокМетодов.Добавить("ТестРаспределитьКоличествоОсновнойКарточкиПоАналогам");
	//	
	Возврат СписокМетодов;
	
КонецФункции

#КонецОбласти

#Область Тестовые_методы

Процедура ТестСоздатьЗаявкуДля1С() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		СоздатьЗаявкиДля1С();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
	КонецПопытки;
	
	ОтменитьТранзакцию();
	
КонецПроцедуры

Процедура ТестСоздатьЗаявкиПоДокументамДляОтправкиВТранзит() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		//СоздатьЗаявкиПоДокументамДляОтправкиВТранзит();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
	КонецПопытки;
	
	ОтменитьТранзакцию();
	
КонецПроцедуры

Процедура ТестВыгрузитьДанные() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		//СоздатьЗаявкиПоДокументамДляОтправкиВТранзит();
		ВыгрузитьДанные();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
	КонецПопытки; 
	
	ОтменитьТранзакцию();
	
КонецПроцедуры

Процедура ТестПолучитьЗаявкиВОбработке() Экспорт
	
	Результат = Неопределено;
	
	Попытка
		Результат = ПолучитьЗаявкиВОбработке();
	Исключение
		ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки();     
	КонецПопытки;
	
	Утверждения.ПроверитьИстину(Результат <> Неопределено);
	
КонецПроцедуры 

Процедура ТестПолучитьСтатусыЗаявокИзТранзитнойБазы() Экспорт
	
	Попытка
		ПолучитьСтатусыЗаявокИзТранзитнойБазы();
	Исключение
		ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
	КонецПопытки;	
	
КонецПроцедуры 

Процедура ТестЗагрузитьДанные() Экспорт
	
	НачатьТранзакцию();
	Попытка
		ЗагрузитьДанные();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
	КонецПопытки;	
	
	ОтменитьТранзакцию();
	
КонецПроцедуры

Процедура ТестОбработатьЗаявкиДля1С() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		ОбработатьЗаявкиДля1С();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
	КонецПопытки;	
	
	ОтменитьТранзакцию();
	
КонецПроцедуры 

Процедура ТестСоздатьРасходныйСкладскойОрдер(ДокументОснование)
	
	НачатьТранзакцию();
	
	Попытка
		СоздатьРасходныйСкладскойОрдер(Новый Структура("Ссылка, Состояние", ДокументОснование, "SHIPPED"));
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
	КонецПопытки;	
	
	ОтменитьТранзакцию();	
	
КонецПроцедуры

Процедура ТестПолучитьКорректировкиЗапасов() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		ПолучитьКорректировкиЗапасов();
	Исключение
		ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
	КонецПопытки;
	
	ОтменитьТранзакцию();
	
КонецПроцедуры 

Процедура ТестСоздатьДокументыКорректировкиЗапасов() Экспорт
	
	СоздатьДокументыКорректировкиЗапасов();
	
КонецПроцедуры

Процедура ТестПреобразоватьДанныеВМС_В_1С_КорректировкаЗапасов() Экспорт
	
	Попытка
		Результат = ВыполнитьКоманду("select top 50 ISNULL(TRY_CONVERT(nvarchar(50),tid),'') AS tid, DocumentCode, CorrectionCode, OperationCode, MaterialCode, Quantity, MaterialUnitCode, QualityTypeCode, OwnerCode, DOCNUM, ProductionDate, ExpirationDate
		|from StockCorrection where CHECKED_BY_PI is null order by RecordDate DESC"); // для отладки
		
		втТабЗнач = ПоместитьНаборЗаписейSQLВТабЗнач(Результат);
		втТабЗнач2 = ПреобразоватьДанныеВМС_В_1С(втТабЗнач);
		
	Исключение
		ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
	КонецПопытки;
	
КонецПроцедуры

Процедура ТестДобавитьПринадлежностьЗапасовКОрганизации() Экспорт
	
	Попытка
		Результат = ВыполнитьКоманду("select top 50 ISNULL(TRY_CONVERT(nvarchar(50),tid),'') AS tid, DocumentCode, CorrectionCode, OperationCode, MaterialCode, Quantity, MaterialUnitCode, QualityTypeCode, OwnerCode, DOCNUM, ProductionDate, ExpirationDate
		|from StockCorrection where CHECKED_BY_PI is null and ExpirationDate < '"+Формат(КонецГода(ТекущаяДата()), "ДФ=dd-MM-yyyy")+"' or ExpirationDate is null order by RecordDate DESC"); // для отладки
		
		втТабЗнач = ПоместитьНаборЗаписейSQLВТабЗнач(Результат);
		втТабЗнач2 = ПреобразоватьДанныеВМС_В_1С(втТабЗнач);
		КоличествоДо = втТабЗнач2.Количество();
		ДобавитьПринадлежностьЗапасовКОрганизации(втТабЗнач2);
		Если КоличествоДо <> втТабЗнач2.Количество() Тогда
			ВызватьИсключение ОбщиеФункции._СтрШаблон_("После добавления принадлежности организаций, изменилось количество строк:
			|Было: %1
			|Стало: %2", втТабЗнач.Количество(), втТабЗнач2.Количество());
		КонецЕсли;
		
	Исключение
		ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
	КонецПопытки;	
	
КонецПроцедуры

Процедура ТестПреобразоватьДанныеВМС_В_1С_ОтветПоЗаявкам() Экспорт
	
	Попытка
		Результат = ВыполнитьКоманду("SET NOCOUNT ON
		|declare @RandomDocNum nvarchar(50)
		|set @RandomDocNum = isnull((select TRY_CONVERT(nvarchar(50), (select top 1 DOCNUM from tbl_DeliveryResponse where CHECKED_BY_PI is null))), '')
		|exec GetDeliveryResponce @DocNum = @RandomDocNum"); 
		
		втТабЗнач = ПоместитьНаборЗаписейSQLВТабЗнач(Результат);
		втТабЗнач.Удалить(0);
		втТабЗнач2 = ПреобразоватьДанныеВМС_В_1С(втТабЗнач);
		
	Исключение
		ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
	КонецПопытки;
	
КонецПроцедуры 

Процедура ТестПроверитьНаличиеКолонокПриКорректировкеЗапасов() Экспорт
	
	Попытка
		Результат = ВыполнитьКоманду("select top 50 ISNULL(TRY_CONVERT(nvarchar(50),tid),'') AS tid, DocumentCode, CorrectionCode, OperationCode, MaterialCode, Quantity, MaterialUnitCode, QualityTypeCode, OwnerCode, DOCNUM, ProductionDate, ExpirationDate
		|from StockCorrection where CHECKED_BY_PI is null order by RecordDate DESC"); // для отладки
		
		втТабЗнач = ПоместитьНаборЗаписейSQLВТабЗнач(Результат);
		втТабЗнач2 = ПреобразоватьДанныеВМС_В_1С(втТабЗнач);
		
		ДобавитьПринадлежностьЗапасовКОрганизации(втТабЗнач2);
		
		Утверждения.ПроверитьИстину(втТабЗнач2.Колонки.Найти("ИдСтроки") <> Неопределено 
		И втТабЗнач2.Колонки.Найти("КодКорректировки") <> Неопределено
		И втТабЗнач2.Колонки.Найти("ВладелецЗапасов") <> Неопределено);
		
	Исключение
		ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
	КонецПопытки;
	
	
КонецПроцедуры 

Процедура ТестПроверитьНаличиеКолонокПриОбработкеОтвета() Экспорт
	
	Попытка
		Результат = ВыполнитьКоманду("SET NOCOUNT ON
		|declare @RandomDocNum nvarchar(50)
		|set @RandomDocNum = isnull((select TRY_CONVERT(nvarchar(50), (select top 1 DOCNUM from tbl_DeliveryResponse where CHECKED_BY_PI is null))), '')
		|exec GetDeliveryResponce @DocNum = @RandomDocNum"); 
		
		втТабЗнач = ПоместитьНаборЗаписейSQLВТабЗнач(Результат);
		втТабЗнач.Удалить(0);
		втТабЗнач2 = ПреобразоватьДанныеВМС_В_1С(втТабЗнач);
		
		Утверждения.ПроверитьИстину(втТабЗнач2.Колонки.Найти("ИдСтроки") <> Неопределено 
		И втТабЗнач2.Колонки.Найти("КодКорректировки") <> Неопределено
		И втТабЗнач2.Колонки.Найти("ВладелецЗапасов") <> Неопределено);
		
	Исключение
		ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
	КонецПопытки;
	
КонецПроцедуры

Процедура ТестПолучитьВладельцаЗапасов() Экспорт
	
	КластерВакилов = Справочники.Кластеры.НайтиПоКоду("000000003");
	ВладелецЗапасов = ПолучитьВладельцаЗапасов(Строка(КластерВакилов.УникальныйИдентификатор()));
	Утверждения.Проверить(НЕ ВладелецЗапасов.Пустая() И ТипЗнч(ВладелецЗапасов) = Тип("СправочникСсылка.Кластеры"), "Владельцем запасов должен быть 'Кластер Вакилов'");
	
	ПоклажедательКомпур = Справочники.Контрагенты.НайтиПоКоду("Ц00012253");
	ВладелецЗапасов = ПолучитьВладельцаЗапасов(Строка(ПоклажедательКомпур.УникальныйИдентификатор()));
	Утверждения.Проверить(НЕ ВладелецЗапасов.Пустая() И ТипЗнч(ВладелецЗапасов) = Тип("СправочникСсылка.Контрагенты"), "Владельцем запасов должен быть 'Компур МПК ЗАО'");
	
	ВладелецЗапасов = ПолучитьВладельцаЗапасов(Новый УникальныйИдентификатор());
	Утверждения.Проверить(ВладелецЗапасов.Пустая() И ТипЗнч(ВладелецЗапасов) = Тип("СправочникСсылка.Кластеры"), "Владелец запасов не найден. Стандартным типом владельца является справочник Кластеры");
	
КонецПроцедуры

Процедура ТестПодобратьСкладДляВладельцаЗапасов() Экспорт
	
	КластерВакилов = Справочники.Кластеры.НайтиПоКоду("000000003");
	ВладелецЗапасов = ПолучитьВладельцаЗапасов(Строка(КластерВакилов.УникальныйИдентификатор()));
	Утверждения.Проверить(ЛогКомплекс = ПодобратьСкладДляВладельцаЗапасов(ВладелецЗапасов));
	
	ПоклажедательКомпур = Справочники.Контрагенты.НайтиПоКоду("Ц00012253");
	ВладелецЗапасов = ПолучитьВладельцаЗапасов(Строка(ПоклажедательКомпур.УникальныйИдентификатор()));
	Утверждения.Проверить(ЛогКомплекс <> ПодобратьСкладДляВладельцаЗапасов(ВладелецЗапасов)); // здесь вернется ЛогКомплекс_СОХ
	
	ВладелецЗапасов = ПолучитьВладельцаЗапасов(Новый УникальныйИдентификатор());
	Утверждения.Проверить(ЛогКомплекс = ПодобратьСкладДляВладельцаЗапасов(ВладелецЗапасов));		
	
КонецПроцедуры	 

Процедура ТестПолучитьСериюНоменклатурыПоДатеПроизводства() Экспорт
	
	Серия = ПолучитьСериюНоменклатурыПоДатеПроизводства(Справочники.Номенклатура.НайтиПоКоду("Ц060448627"), Дата(2020, 06, 15));
	Утверждения.ПроверитьИстину(Серия.Пустая(), "Серия для товара Betulla 70, daino, 2 (72/6) Бежевый, т.к учет без сроков годности");
	
	Серия = ПолучитьСериюНоменклатурыПоДатеПроизводства(Справочники.Номенклатура.НайтиПоКоду("Ц00088286"), Дата(2020, 01, 29), Новый Структура("ИдСправкиА, ИдСправкиБ", "FA-000000044177599", "FB-000002920295983"));
	Утверждения.ПроверитьИстину(НЕ Серия.Пустая() И Серия.ДатаПроизводства = Дата(2020, 01, 29), 
	"(ЛЕДОКОЛ крепкое светлое фильтр. пиво 8% 1,5л *6 ПЭТ). Должна подобраться серия с датой производства 27.01.2020");
	
	Серия = ПолучитьСериюНоменклатурыПоДатеПроизводства(Справочники.Номенклатура.НайтиПоКоду("Ц00088286"), Дата(2020, 01, 27));
	Утверждения.ПроверитьИстину(Серия.Пустая() ,"(ЛЕДОКОЛ крепкое светлое фильтр. пиво 8% 1,5л *6 ПЭТ). Не удалось найти серию с датой производства 27.01.2020");
	
КонецПроцедуры

Процедура ТестСоздатьСериюНоменклатуры() Экспорт
	
	Попытка
		СоздатьСериюНоменклатуры(Справочники.Номенклатура.НайтиПоКоду("Ц060448627"), Дата(2020, 06, 15), Дата(2021, 06, 15));
	Исключение
		Утверждения.Проверить(Истина, "(Betulla 70, daino, 2 (72/6) Бежевый). Не удалось создать серию.");
	КонецПопытки;		
	
	Попытка
		СоздатьСериюНоменклатуры(Справочники.Номенклатура.НайтиПоКоду("Ц00088286"), Дата(1, 1, 1), Дата(2020, 12, 31));
	Исключение
		Утверждения.Проверить(Истина, "(ЛЕДОКОЛ крепкое светлое фильтр. пиво 8% 1,5л *6 ПЭТ). Дата производства не заполнена.");
	КонецПопытки;
	
	Попытка
		СоздатьСериюНоменклатуры(Справочники.Номенклатура.НайтиПоКоду("Ц00088286"), Дата(2020, 01, 01), Дата(1, 1, 1));
	Исключение
		Утверждения.Проверить(Истина, "(ЛЕДОКОЛ крепкое светлое фильтр. пиво 8% 1,5л *6 ПЭТ). Срок годности не заполнен.");
	КонецПопытки;
	
	Попытка
		СоздатьСериюНоменклатуры(Справочники.Номенклатура.НайтиПоКоду("Ц00088286"), ОбщиеФункции.ДобавитьДень(ТекущаяДата(), 1), Дата(2020, 12, 31));
	Исключение
		ТекстСообщения = ОбщиеФункции._СтрШаблон_("(ЛЕДОКОЛ крепкое светлое фильтр. пиво 8% 1,5л *6 ПЭТ). Дата производства '%1' > текущей даты.", Формат(ОбщиеФункции.ДобавитьДень(ТекущаяДата(), 1), "ДФ=dd.MM.yyyy"));
		Утверждения.Проверить(Истина, ТекстСообщения);
	КонецПопытки;
	
	Попытка
		СоздатьСериюНоменклатуры(Справочники.Номенклатура.НайтиПоКоду("Ц00088286"), Дата(2020, 01, 01), ОбщиеФункции.ДобавитьДень(ТекущаяДата(), -1));
	Исключение
		ТекстСообщения = ОбщиеФункции._СтрШаблон_("(ЛЕДОКОЛ крепкое светлое фильтр. пиво 8% 1,5л *6 ПЭТ). Срок годности '%1' < текущей даты.", Формат(ОбщиеФункции.ДобавитьДень(ТекущаяДата(), -1), "ДФ=dd.MM.yyyy"));
		Утверждения.Проверить(Истина, ТекстСообщения);
	КонецПопытки;
	
	НачатьТранзакцию();
	
	Попытка
		СоздатьСериюНоменклатуры(Справочники.Номенклатура.НайтиПоКоду("Ц00088286"), ТекущаяДата(), ОбщиеФункции.ДобавитьПериод(ТекущаяДата(), 6, Перечисления.Периодичность.Месяц));	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
	КонецПопытки;
	
	ОтменитьТранзакцию();
	
КонецПроцедуры	 

Процедура ТестПолучитьЗапасыНаСкладеИзWMS() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		Форма = ПолучитьФорму("фЗагрузкиИнвОписей");
		ЗоныХранения = Новый СписокЗначений;
		ЗоныХранения.Добавить("Зона консолидации «Общая»");
		ДополнительныеПараметры = Новый Структура("СписокДокументов, ОбработкаОшибокПоЗагрузкеОписей, НовыеСерии, ЗоныХранения", 
		Новый СписокЗначений, Форма.тзОбработкиОшибок, Форма.тзНовыеСерии, ЗоныХранения);
		ПолучитьЗапасыНаСкладеИзWMS(Новый Структура("Owner, MaterialGroups", "1", "901"), Ложь);	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
	КонецПопытки;
	
	ОтменитьТранзакцию();
	
КонецПроцедуры

Процедура ТестРаспределитьКоличествоОсновнойКарточкиПоАналогам() Экспорт
	
	втТабЗнач = Новый ТаблицаЗначений;
	втТабЗнач.Колонки.Добавить("Номенклатура");
	втТабЗнач.Колонки.Добавить("Ячейка");
	втТабЗнач.Колонки.Добавить("СерияНоменклатуры");
	втТабЗнач.Колонки.Добавить("ЕдиницаИзмерения");
	втТабЗнач.Колонки.Добавить("Коэффициент");
	втТабЗнач.Колонки.Добавить("Качество");
	втТабЗнач.Колонки.Добавить("Количество");
	
	НовСтр = втТабЗнач.Добавить();
	НовСтр.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("Ц00100713");
	НовСтр.СерияНоменклатуры = Справочники.СерииНоменклатуры.НайтиПоНаименованию("18.02.2019 (18.08.2019)", истина,, НовСтр.Номенклатура);
	НовСтр.ЕдиницаИзмерения = НовСтр.Номенклатура.ЕдиницаХраненияОстатков;
	НовСтр.Коэффициент = НовСтр.ЕдиницаИзмерения.Коэффициент;
	НовСтр.Качество = Справочники.Качество.Стандарт;
	НовСтр.Количество = 1000;
	
	НовСтр = втТабЗнач.Добавить();
	НовСтр.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("Ц00100710");
	НовСтр.СерияНоменклатуры = Справочники.СерииНоменклатуры.НайтиПоНаименованию("12.02.2020 (12.08.2020)", истина,, НовСтр.Номенклатура);
	НовСтр.ЕдиницаИзмерения = НовСтр.Номенклатура.ЕдиницаПродаж2;
	НовСтр.Коэффициент = НовСтр.ЕдиницаИзмерения.Коэффициент;
	НовСтр.Качество = Справочники.Качество.Стандарт;
	НовСтр.Количество = 100;
	
	ТаблицаАналоговОсновныхКарточек = Новый ТаблицаЗначений;
	// Номенклатура, ЕдиницаИзмерения, СерияНоменклатуры, КоличествоОстаток, ДатаПроизводства, ОсновнаяКарточкаНоменклатуры, Качество
	ТаблицаАналоговОсновныхКарточек.Колонки.Добавить("Номенклатура");
	ТаблицаАналоговОсновныхКарточек.Колонки.Добавить("ОсновнаяКарточкаНоменклатуры");
	ТаблицаАналоговОсновныхКарточек.Колонки.Добавить("СерияНоменклатуры");
	ТаблицаАналоговОсновныхКарточек.Колонки.Добавить("ДатаПроизводства");
	ТаблицаАналоговОсновныхКарточек.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаАналоговОсновныхКарточек.Колонки.Добавить("Качество");
	ТаблицаАналоговОсновныхКарточек.Колонки.Добавить("КоличествоОстаток");
	
	НовСтр = ТаблицаАналоговОсновныхКарточек.Добавить();
	НовСтр.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("Ц00102314");
	НовСтр.ОсновнаяКарточкаНоменклатуры = Справочники.Номенклатура.НайтиПоКоду("Ц00100713");
	НовСтр.СерияНоменклатуры = Справочники.СерииНоменклатуры.НайтиПоНаименованию("18.02.2019 (18.08.2019)", истина,, НовСтр.Номенклатура);
	НовСтр.ЕдиницаИзмерения = НовСтр.Номенклатура.ЕдиницаХраненияОстатков;
	НовСтр.ДатаПроизводства = Дата(2019, 02, 18);
	НовСтр.Качество = Справочники.Качество.Стандарт;
	НовСтр.КоличествоОстаток = 2000;
	
	НовСтр = ТаблицаАналоговОсновныхКарточек.Добавить();
	НовСтр.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("Ц060460537");
	НовСтр.ОсновнаяКарточкаНоменклатуры = Справочники.Номенклатура.НайтиПоКоду("Ц00100710");
	НовСтр.СерияНоменклатуры = Справочники.СерииНоменклатуры.НайтиПоНаименованию("12.02.2020 (12.08.2020)", истина,, НовСтр.Номенклатура);
	НовСтр.ЕдиницаИзмерения = НовСтр.Номенклатура.ЕдиницаХраненияОстатков;
	НовСтр.ДатаПроизводства = Дата(2020, 02, 12);
	НовСтр.Качество = Справочники.Качество.Стандарт;
	НовСтр.КоличествоОстаток = 1500;
	
	РаспределитьКоличествоОсновнойКарточкиПоАналогам(втТабЗнач, ЛогКомплекс);
	
	Утверждения.ПроверитьИстину(втТабЗнач.Найти(Справочники.Номенклатура.НайтиПоКоду("Ц00100713"), "Номенклатура") = Неопределено,
	ОбщиеФункции._СтрШаблон_("Остаток WMS по товару '%1' должен полностью распределиться на товар '%2'", Справочники.Номенклатура.НайтиПоКоду("Ц00100713"), Справочники.Номенклатура.НайтиПоКоду("Ц00102314")));
	
	Утверждения.ПроверитьИстину(втТабЗнач.Найти(Справочники.Номенклатура.НайтиПоКоду("Ц00100710"), "Номенклатура") <> Неопределено
	И втТабЗнач.Найти(Справочники.Номенклатура.НайтиПоКоду("Ц060460537"), "Номенклатура") <> Неопределено
	И втТабЗнач.Найти(Справочники.Номенклатура.НайтиПоКоду("Ц00100710"), "Номенклатура").Количество = 500
	И втТабЗнач.Найти(Справочники.Номенклатура.НайтиПоКоду("Ц060460537"), "Номенклатура").Количество = 1500, 
	ОбщиеФункции._СтрШаблон_("Остаток WMS по товару '%1' должен частично распределиться на товар '%2'", Справочники.Номенклатура.НайтиПоКоду("Ц00100710"), Справочники.Номенклатура.НайтиПоКоду("Ц060460537")));		
	
КонецПроцедуры

#КонецОбласти 


#КонецОбласти 

Инициализация();

