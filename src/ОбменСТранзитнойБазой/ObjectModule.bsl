// Автор: Боровик Артём Олегович

Перем Соединение Экспорт;
Перем Команда;
Перем УзелОбмена;
Перем СоставУзла;
Перем Настройки;
Перем ТаблицаСтатусов;
Перем Автотесты;
Перем Лог1С экспорт;
Перем СвойствоСклада_ИспользуетсяWMS;
Перем СвойствоДокумента_НомерПалета;
Перем ТаблицаСопоставленияКачеств;

#Область ПрограммныйИнтерфейс
 
	Процедура ВыгрузитьДанные() экспорт
		
		Если Соединение = Неопределено Тогда
			Лог1с.Вывести("Операция прервана по причине: соединение с транзитной базой не установлено.", СтатусСообщения.ОченьВажное);
			ВызватьИсключение "Операция прервана по причине: соединение с транзитной базой не установлено.";
		КонецЕсли; 
		
		ВыгрузитьЗаявкиВТранзит();
		// Закрываем файл с логом и соединение sql
		Финализировать();
		
	КонецПроцедуры

	Процедура ЗагрузитьДанные() экспорт
		
		Если Соединение = Неопределено Тогда
			Лог1с.Вывести("Операция прервана по причине: соединение с транзитной базой не установлено.", СтатусСообщения.ОченьВажное);
			ВызватьИсключение "Операция прервана по причине: соединение с транзитной базой не установлено.";
		КонецЕсли;
		
		// 1. Обновляем статусы заявок 1с - транзит
		ОбновитьСтатусыЗаявок();
		// 2. Создаем заявки вмс-1с
		СоздатьЗаявкиДля1С();
		// Закрываем файл с логом и соединение sql		
		Финализировать();
			
	КонецПроцедуры
	
	Процедура ПолучитьЗапасыНаСкладеИзWMS(ПараметрыОтчета, ТолькоПросмотр, АдресСпискаДокументов, АдресТаблицыДляОбработкиОшибок) экспорт
		
		Лог1С.Вывести("Запущена процедура получения остатков из WMS", СтатусСообщения.Информация);
		
		Если Соединение = Неопределено Тогда
			Лог1с.Вывести("Операция прервана по причине: соединение с транзитной базой не установлено.", СтатусСообщения.БезСтатуса);
			ВызватьИсключение "Операция прервана по причине: соединение с транзитной базой не установлено.";
		КонецЕсли;
		
		ПараметрыОтчетаСтрокой = "";
		
		Для каждого КлючИЗначение Из ПараметрыОтчета Цикл
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				ПараметрыОтчетаСтрокой = ОбщиеФункции._СтрШаблон_("%1%2@%3='%4'", ПараметрыОтчетаСтрокой, ?(ПараметрыОтчетаСтрокой = "", "", ", "), КлючИЗначение.Ключ, КлючИЗначение.Значение)			
			КонецЕсли; 
		КонецЦикла; 
		
		Попытка
			Лог1С.Вывести("Идет получение данных", СтатусСообщения.Информация);
			Результат = ВыполнитьКоманду("exec repWarehouseSummary "+ПараметрыОтчетаСтрокой);	
		Исключение
		    Сообщить(ОбщиеФункции._СтрШаблон_("Операция 'ПолучитьЗапасыНаСкладеИзWMS' прервана по причине: %1", ОписаниеОшибки()));
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		ТабЗнач = ПоместитьНаборЗаписейSQLВТабЗнач(Результат);
		Лог1С.Вывести("Данные получены", СтатусСообщения.Информация);
		
		Попытка
			Если НЕ ТолькоПросмотр Тогда
				Лог1С.Вывести("Запущена процедура создания инвентаризационных описей", СтатусСообщения.Информация);
				СоздатьИнвОписи(ТабЗнач, АдресСпискаДокументов, АдресТаблицыДляОбработкиОшибок);
			Иначе
				Лог1С.Вывести("Запущена процедура формирования отчета", СтатусСообщения.Информация);
				СформироватьОтчет(ТабЗнач);
			КонецЕсли;	
		Исключение
		    Лог1С.Вывести("Не удалось выполнить операцию 'ПолучитьЗапасыНаСкладеИзWMS' по причине: {0}", СтатусСообщения.ОченьВажное, ОписаниеОшибки());
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;	 
			
	КонецПроцедуры
	
#Область РАБОТА_С_ЗАЯВКАМИ
	
	Процедура СоздатьЗаявкиДляТранзита() экспорт
		
		ТаблицаНастроекСтруктур = Справочники.ОписаниеСтруктурТранзитнойБазы.ПолучитьНастройкиСтруктурВПорядкеВыполнения();
		
		Для каждого Настройка Из ТаблицаНастроекСтруктур Цикл
			
			ИдПакета = Строка(Новый УникальныйИдентификатор());
			
			Справочники.ОписаниеСтруктурТранзитнойБазы.СформироватьТекстЗаявки(Настройка.Ссылка, 
			Новый Структура("ИдПакета, Лог1С, УдалятьРегистрациюИзменений, ОтобразитьСодержимое, ТекДата", ИдПакета, Лог1С, Истина, Ложь, ТекущаяДата()));
			
		КонецЦикла; 
		
		Финализировать();
		
	КонецПроцедуры
		
	Процедура ОбработатьЗаявкиДля1С() экспорт
		
		Лог1С.Вывести("Начало обработки заявок 1С", СтатусСообщения.Обычное);
		
		Если Соединение = Неопределено Тогда
			Лог1с.Вывести("Операция прервана по причине: соединение с транзитной базой не установлено.", СтатусСообщения.ОченьВажное);
			ВызватьИсключение "Операция прервана по причине: соединение с транзитной базой не установлено.";
		КонецЕсли;
		
		Источник = "WMS";
		Приемник = "1С";
			
		НовыеЗаявки = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьЗаявкиПоСтатусам("*",
																										Справочники.СтатусыЗаявок.Новая, Источник, Приемник,
																										"Документ.РегистраторЗаписи");
		МассивОшибок = Новый Массив;	
		
		Для каждого СтрТаб Из НовыеЗаявки Цикл
			
			Если НЕ ТранзакцияАктивна() Тогда
				НачатьТранзакцию();
			КонецЕсли; 
			
			СтруктураЗаписи = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьСтруктуруЗаписи();
			ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрТаб);
			
			Попытка
				Выполнить(СтрТаб.Текст);
				СтруктураЗаписи.Статус = Справочники.СтатусыЗаявок.УспешноОбработана;
				Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("Заявка с идентификатором '%1' выполнена успешно", СтрТаб.Идентификатор), СтатусСообщения.Информация);
			Исключение
								
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();					
				КонецЕсли; 
				
				СтруктураЗаписи.ОшибкиВыполнения = ИнформацияОбОшибке().Описание;
				СтруктураЗаписи.Статус = Справочники.СтатусыЗаявок.Отклонена;			
				
				Лог1С.Вывести("Не удалось выполнить заявку с идентификатором {0} по причине: {1}", СтатусСообщения.ОченьВажное, СтрТаб.Идентификатор, ОписаниеОшибки());
				Перейти ~БезПодтвержденияDOCNUM;
				
			КонецПопытки;
			
			// Отметить в транзите, что заявка с идентификатором выполнена
			Если ЗначениеЗаполнено(СтруктураЗаписи.Идентификатор) Тогда
				
				Попытка
					ВыполнитьКоманду(ОбщиеФункции._СтрШаблон_("exec DocNumIsDone @DocNum='%1', @checked_by='%2', @proc_date='%3', @autotest=%4",
					СтрТаб.Идентификатор, 
					Формат(СтруктураЗаписи.ДатаВремяПолученияЗаявкиСервисом, "ДФ='dd-MM-yyyy HH:mm:ss'"),
					Формат(ТекущаяДата(), "ДФ='dd-MM-yyyy HH:mm:ss'"),
					Формат(Автотесты, "БЛ=0; БИ=1"))
					);
				Исключение
					
					Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("Не удалось установить (PROCESSED_STATUS_DATE, PROCESSED_STATUS, CHECKED_BY_PI) в таблицах (DOCNUM, hdr_DeliveryResponce, tbl_DeliveryResponce) для идентификатору пакета '%1' по причине:
					|%2", СтрТаб.Идентификатор, ОписаниеОшибки()), СтатусСообщения.ОченьВажное);		
					
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
					
					СтруктураЗаписи.ОшибкиВыполнения = ИнформацияОбОшибке().Описание;
					СтруктураЗаписи.Статус = Справочники.СтатусыЗаявок.Отклонена;			
					
					Лог1С.Вывести("Не удалось подтвердить заявку с идентификатором {0} в транзитной базе по причине: {1}", СтатусСообщения.ОченьВажное, СтрТаб.Идентификатор, ИнформацияОбОшибке().Описание);
					
				КонецПопытки;
				
			КонецЕсли; 
			
			~БезПодтвержденияDOCNUM:

			СтруктураЗаписи.ДатаВремяПолученияРезультатаВыполненияЗаявки = ТекущаяДата();
			
			// Если автотесты, тогда выполним одну заявку и прервем цикл
			Если Автотесты Тогда
				Прервать;
			КонецЕсли; 
			
			Если ТранзакцияАктивна() Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли; 
			
			РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДобавитьЗапись(СтруктураЗаписи);	
			
		КонецЦикла;
		
		Лог1С.Вывести("Окончание обработки заявок 1С", СтатусСообщения.Обычное);
		
		// Закрываем файл с логом и соединение sql
		Финализировать();
																										
	КонецПроцедуры 
	
	Процедура ВыгрузитьЗаявкиВТранзит()
		
		Заявки = ПолучитьЗаявкиДляОбработки();
		
		Для каждого СтрЗаявка Из Заявки Цикл
			
			ТекстОшибки = "";
			
			Попытка
				ВыполнитьКоманду(СтрЗаявка.Текст, Истина, Новый Структура("ИмяТранзакции, ОписаниеТранзакции", СтрЗаявка.Объект.Номер+"_"+Формат(СтрЗаявка.Объект.Дата,"ДФ=yyyyMMddHHmmss"), ""+СтрЗаявка.Объект));
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Лог1С.Вывести("Не удалось выгрузить заявку с идентификатором '{0}' по причине: 
				|	{1}", СтатусСообщения.ОченьВажное, СтрЗаявка.Идентификатор, ТекстОшибки);
				Если Автотесты Тогда
					ВызватьИсключение ТекстОшибки;
				КонецЕсли; 
			КонецПопытки;
			
			СтруктураЗаписи = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьСтруктуруЗаписи();
			ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрЗаявка);
			
			СтруктураЗаписи.ДатаВремяПолученияЗаявкиСервисом = ТекущаяДата();
			СтруктураЗаписи.ДатаЗаписи = ТекущаяДата();
			СтруктураЗаписи.Статус = ?(ПустаяСтрока(ТекстОшибки), Справочники.СтатусыЗаявок.Отправлена, Справочники.СтатусыЗаявок.Отклонена);
			СтруктураЗаписи.ОшибкиВыполнения = ТекстОшибки;
			
			РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДобавитьЗапись(СтруктураЗаписи);
			
		КонецЦикла;
		
	КонецПроцедуры	 
	
	Процедура СоздатьЗаявкиДля1С()
		
		Если НЕ Автотесты Тогда
			
			Попытка
				Результат = ВыполнитьКоманду(ОбщиеФункции._СтрШаблон_("exec GetDocnum @filter = '%1'", ОбщиеФункции._СтрШаблон_("docnum.DOC_SENDER='%1' and docnum.DOC_RECEIVER='%2' and docnum.CHECKED_BY_PI is null and docnum.RecordDate >= ''%3''", "'WMS'", "'1С'", Формат(ТекущаяДата() - 28800, "ДФ='dd-MM-yyyy HH:mm:ss'"))));
			Исключение
				ВызватьИсключение "При создании заявок WMS-1C произошел сбой по причине: "+ОписаниеОшибки();
			КонецПопытки;	
			
		Иначе                                                                                                                                                                                                                                                                                        
			
			Попытка
				Результат = ВыполнитьКоманду("select NEWID() as docnum, null as proc_date, null as proc_date_beg, null as proc_status, null as comment, GETDATE() as RecordDate");
			Исключение
				ВызватьИсключение "При создании заявок WMS-1C произошел сбой по причине: "+ОписаниеОшибки();
			КонецПопытки;	
			
		КонецЕсли; 
		
		ТаблицаСтатусов.Очистить();
		
		ЗаполнитьТаблицуСтатусов(Результат);	
		
		Для каждого Заявка Из ТаблицаСтатусов Цикл
			
			Если Заявка.ТипОтвета = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Если РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ЗаписьСуществует(Новый Структура("Источник, Приемник, Идентификатор", "WMS", "1С", Заявка.ИдПакета)) = Истина Тогда
				Продолжить;
			КонецЕсли;  
			
			СтруктураЗаписи = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьСтруктуруЗаписи();
			СтруктураЗаписи.Источник = "WMS";
			СтруктураЗаписи.Приемник = "1С";
			СтруктураЗаписи.Статус = Справочники.СтатусыЗаявок.Новая;
			СтруктураЗаписи.Объект = Документы.РегистраторЗаписи.СоздатьНовыйДокумент();
			СтруктураЗаписи.Идентификатор = Заявка.ИдПакета;
			СтруктураЗаписи.ДатаВремяПолученияЗаявкиСервисом = Заявка.ДатаЗаписи;
			СтруктураЗаписи.ДатаЗаписи = ТекущаяДата(); 
			СтруктураЗаписи.Текст = ОбщиеФункции._СтрШаблон_("СоздатьДокументы1С(""%1"")", Заявка.ИдПакета);
			
			РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДобавитьЗапись(СтруктураЗаписи);
			
		КонецЦикла;
		
		// Загрузить заявки, удаленные в B2B
		ПолучитьЗаказыУдаленныеИзБ2Б();
		
	КонецПроцедуры
		
#КонецОбласти
	
#Область РАБОТА_С_ДОКУМЕНТАМИ

	Процедура СоздатьДокументы1С(ИдентификаторПакета)
		
		ТекЗаявка = Неопределено;
		РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ЗаписьСуществует(Новый Структура("Источник, Приемник, Идентификатор", "WMS", "1С", ИдентификаторПакета), ТекЗаявка);
		
		Если ТекЗаявка = Неопределено Тогда
			Лог1С.Вывести("Не удалось найти в журнале заявку с идентификатором: {1}", СтатусСообщения.Внимание, ИдентификаторПакета);
			Возврат;	
		КонецЕсли; 
				
		Попытка
			Результат = ВыполнитьКоманду(ОбщиеФункции._СтрШаблон_("exec GetDeliveryResponce @DocNum='%1'", ИдентификаторПакета));
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		Попытка
			ДляЗаполнения = ПолучитьДанныеДляЗаполненияДокументов(Результат);
			ОбработкаЗаполненияДокументов(ДляЗаполнения);
		Исключение
		    ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		// В журнале заявок добавим запись по документу, что документ успешно обработан в 2-х системах
		Если ЗначениеЗаполнено(ДляЗаполнения.Ссылка)
			И ТипЗнч(ДляЗаполнения.Ссылка) <> Тип("Строка") Тогда
			
			СтруктураЗаписи = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьСтруктуруЗаписи();
			СтруктураЗаписи.Объект = ДляЗаполнения.Ссылка;
			СтруктураЗаписи.Источник = "WMS";
			СтруктураЗаписи.Приемник = "1С";
			СтруктураЗаписи.Идентификатор = ИдентификаторПакета;
			СтруктураЗаписи.ДатаВремяПолученияРезультатаВыполненияЗаявки = ТекущаяДата();
			СтруктураЗаписи.ДатаЗаписи = ТекущаяДата();
			СтруктураЗаписи.Статус = Справочники.СтатусыЗаявок.УспешноОбработана;
			
			РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДобавитьЗапись(СтруктураЗаписи);
			
		КонецЕсли; 
				
	КонецПроцедуры

	Функция ПроверитьСтруктуруПодчиненности(КритерийОтбора, Основание, ТипПодчиненногоОбъекта)
		
		Результат = Ложь;	
		
		МассивПодчиненныхДокументов = КритерийОтбора.Найти(Основание);
		
		Для каждого ЭлМассива Из МассивПодчиненныхДокументов Цикл
			
			Результат = (ТипЗнч(ЭлМассива.Ссылка) = ТипПодчиненногоОбъекта) И ЭлМассива.Ссылка.Проведен;
			
			Если Результат Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла; 
		
		Возврат Результат;
		
	КонецФункции

	Функция ПолучитьДоступныеКолонкиДокумента(МетаданныеДокумента)
		
		ЖелаемыеКолонки = "GUID_Строки, Номенклатура, ДоговорВладельца, ЕдиницаИзмерения, Качество, Количество, СерияНоменклатуры";
		РеквизитыТЧ = МетаданныеДокумента.ТабличныеЧасти.Товары.Реквизиты;
		
		ДоступныеКолонки = "НомерСтроки";
		
		Для каждого реквизит Из РеквизитыТЧ Цикл
			
			Если Найти(ВРЕГ(ЖелаемыеКолонки), ВРЕГ(реквизит.Имя)) > 0 Тогда
				ДоступныеКолонки = ДоступныеКолонки + ?(ДоступныеКолонки = "", "", ",")	+ реквизит.Имя;	
			КонецЕсли; 
			
		КонецЦикла; 
		
		Возврат ДоступныеКолонки;
		
	КонецФункции 
	
	Процедура ДобавитьНовуюСтрокуВСостав(Состав, Данные, НомерСтроки)
		
		НовСтр = Состав.Добавить();
		НовСтр.НомерСтроки			= НомерСтроки;
		НовСтр.Номенклатура 		= Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Данные.Fields("MaterialCode").Value));
		НовСтр.ЕдиницаИзмерения 	= Справочники.ЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(Данные.Fields("MaterialUnitCode").Value));	
		НовСтр.КоличествоФакт		= Число(Данные.Fields("Quantity").Value);
		
		Если Данные.Fields("ProductionDate").Value <> NULL Тогда
			НовСтр.ДатаПроизводства = Данные.Fields("ProductionDate").Value;	
		КонецЕсли;
		
		Если Данные.Fields("ExpirationDate").Value <> NULL Тогда
			НовСтр.СрокГодности 	= Данные.Fields("ExpirationDate").Value;	
		КонецЕсли;
		
	КонецПроцедуры
	 
	// Функция - Получить данные для заполнения документов
	// Обрабатывает ответ, полученный в результате выполнения функции "GetDeliveryResponce" в транзитной базе
	// Параметры:
	//  Ответ	 - ComObject	 - 
	// 
	// Возвращаемое значение:
	//   - Структура с ключами "Ссылка, Состав"
	//
	Функция ПолучитьДанныеДляЗаполненияДокументов(Ответ)
		
		ДляЗаполнения = Новый Структура("Ссылка, Состав, Состояние");
		
		НомерСтроки = 1;
		
		ТипДокумента = "";
		
		Пока НЕ Ответ.EOF Цикл
			
			Если Ответ.Fields("DeliveryTypeCode").Value <> NULL Тогда
				
				ТипДокумента = Ответ.Fields("DeliveryTypeCode").Value;
				// Заголовки документа
				Ссылка = НайтиОбъектПоИД(Ответ.Fields("DeliveryRequestCode").Value, Ответ.Fields("DeliveryTypeCode").Value);
				
				Если НЕ ЗначениеЗаполнено(Ссылка)
					ИЛИ Найти(Строка(Ссылка), "Object") > 0
					ИЛИ Найти(Строка(Ссылка), "Объект") > 0 Тогда
					ТекстОшибки = ОбщиеФункции._СтрШаблон_("Не удалось получить ссылку с идентификатором: %1", Ответ.Fields("DeliveryRequestCode").Value);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
				ДляЗаполнения.Ссылка = Ссылка;
				ДляЗаполнения.Состояние = Ответ.Fields("Status").Value; 				
				
				Если ЗначениеЗаполнено(Ответ.Fields("PaletNumbers").Value) Тогда
					ДляЗаполнения.Вставить("НомераПалетов", Ответ.Fields("PaletNumbers").Value);	
				КонецЕсли; 
				
				ДляЗаполнения.Состав = Ссылка.Товары.ВыгрузитьКолонки(ПолучитьДоступныеКолонкиДокумента(Ссылка.Метаданные()));			
				ДляЗаполнения.Состав.Колонки.Добавить("КоличествоФакт", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10,3)));
				ДляЗаполнения.Состав.Колонки.Добавить("ДатаПроизводства", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
				ДляЗаполнения.Состав.Колонки.Добавить("СрокГодности", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
				ДляЗаполнения.Состав.Колонки.Добавить("Партия");
				Если ДляЗаполнения.Состав.Колонки.Найти("Качество") = Неопределено Тогда
					ДляЗаполнения.Состав.Колонки.Добавить("Качество", Новый ОписаниеТипов("СправочникСсылка.Качество"));
				КонецЕсли; 
				
			Иначе
				
				Если Число(Ответ.Fields("Quantity").Value) = 0 Тогда
					Ответ.MoveNext();
					Продолжить;
				КонецЕсли; 
								
				СтрокаОтгрузки = ДляЗаполнения.Ссылка.Товары.Найти(Ответ.Fields("ExternalCode").Value, "GUID_Строки");
				
				Если СтрокаОтгрузки = Неопределено И ТипДокумента = "OUT" Тогда
					ТекстОшибки = ОбщиеФункции._СтрШаблон_("Не найдена строка отгрузки по GUID_Строки: '%1'", Ответ.Fields("ExternalCode").Value);
					Лог1С.Вывести(ТекстОшибки, СтатусСообщения.ОченьВажное);
					ВызватьИсключение ТекстОшибки;
				ИначеЕсли СтрокаОтгрузки = Неопределено И ТипДокумента = "IN" Тогда 	
					ДобавитьНовуюСтрокуВСостав(ДляЗаполнения.Состав, Ответ, НомерСтроки);
					НомерСтроки = НомерСтроки + 1;
					Ответ.MoveNext();
					Продолжить;
				КонецЕсли; 
				
				// Таб. часть
				НовСтр = ДляЗаполнения.Состав.Добавить();
				НовСтр.GUID_Строки = Ответ.Fields("ExternalCode").Value;
				
				ЗаполнитьЗначенияСвойств(НовСтр, СтрокаОтгрузки);
				
				НовСтр.НомерСтроки = НомерСтроки;
										
				НовСтр.Количество = СтрокаОтгрузки.Количество;
				НовСтр.КоличествоФакт = Число(Ответ.Fields("Quantity").Value);
				
				Если Ответ.Fields("MaterialUnitCode").Value <> NULL Тогда
					НовСтр.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(Ответ.Fields("MaterialUnitCode").Value));	
				КонецЕсли; 
				
				Если НовСтр.ЕдиницаИзмерения <> НовСтр.Номенклатура.ЕдиницаХраненияОстатков Тогда
					
					НовСтр.КоличествоФакт = ?(НовСтр.ЕдиницаИзмерения.Коэффициент > НовСтр.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
					НовСтр.КоличествоФакт * НовСтр.ЕдиницаИзмерения.Коэффициент,   
					НовСтр.КоличествоФакт / НовСтр.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент);
					
				КонецЕсли;
				
				Если Ответ.Fields("ProductionDate").Value <> NULL Тогда
					НовСтр.ДатаПроизводства = Ответ.Fields("ProductionDate").Value;	
				КонецЕсли;
				
				Если Ответ.Fields("ExpirationDate").Value <> NULL Тогда
					НовСтр.СрокГодности = Ответ.Fields("ExpirationDate").Value;	
				КонецЕсли;
				
				Если Ответ.Fields("MaterialSeriesCode").Value <> NULL Тогда
					НовСтр.Партия = Ответ.Fields("MaterialSeriesCode").Value;	
				КонецЕсли; 
				
				
				Если Ответ.Fields("QualityTypeCode").Value <> NULL Тогда
					НовСтр.Качество = ПолучитьСопоставленноеКачество(Ответ.Fields("QualityTypeCode").Value);
				КонецЕсли;
				
					
				Если СтрокаОтгрузки.ЕдиницаИзмерения <> СтрокаОтгрузки.Номенклатура.ЕдиницаХраненияОстатков Тогда
					
					НовСтр.Количество = ?(СтрокаОтгрузки.ЕдиницаИзмерения.Коэффициент > НовСтр.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
					СтрокаОтгрузки.Количество * СтрокаОтгрузки.ЕдиницаИзмерения.Коэффициент,   
					СтрокаОтгрузки.Количество / НовСтр.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент);
					
				КонецЕсли;
				
				НовСтр.ЕдиницаИзмерения = СтрокаОтгрузки.Номенклатура.ЕдиницаХраненияОстатков;
				
				НомерСтроки = НомерСтроки + 1;
						
			КонецЕсли; 
			
			Ответ.MoveNext();
			
		КонецЦикла; 
		
		// Найдем не отобранные товары и допишем их в состав с количеством 0
		Если ЗначениеЗаполнено(ДляЗаполнения.Ссылка) Тогда
						
			Для каждого СтрТабЧасть Из ДляЗаполнения.Ссылка.Товары Цикл
				
				Если ТипДокумента = "IN" Тогда
					Прервать;	
				КонецЕсли; 
				
				Если ДляЗаполнения.Состав.Найти(СтрТабЧасть.GUID_Строки, "GUID_Строки") = Неопределено Тогда
					
					НовСтр = ДляЗаполнения.Состав.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрТабЧасть);
					
					НовСтр.НомерСтроки = ДляЗаполнения.Состав.Количество() + 1;
					
				КонецЕсли; 
				
			КонецЦикла;
		Иначе
			ВызватьИсключение "Процедура 'GetDeliveryResponce' вернула пустой набор записей";
		КонецЕсли; 
		
		Возврат ДляЗаполнения;
		
	КонецФункции

	Процедура ОбработкаЗаполненияДокументов(ДляЗаполнения)
		
		Если ТипЗнч(ДляЗаполнения.Ссылка) = Тип("ДокументСсылка.ОтгрузкаТоваровУслуг") Тогда
			
			СоздатьДокументыРеализации(ДляЗаполнения);
			
		ИначеЕсли ТипЗнч(ДляЗаполнения.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда 
			
			СоздатьДокументыЗакупок(ДляЗаполнения);
			
		ИначеЕсли ТипЗнч(ДляЗаполнения.Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров")
			И ДляЗаполнения.Ссылка.Склад.Код = "Ц00223" Тогда 	// Отправитель лог. комплекс
			
			СоздатьДокументыПоИсходящимПеремещениям(ДляЗаполнения);
			
		ИначеЕсли ТипЗнч(ДляЗаполнения.Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров")
			И ДляЗаполнения.Ссылка.СкладПолучатель.Код = "Ц00223" Тогда 	// Получатель лог. комплекс
			
			СоздатьДокументыПоВходящимПеремещениям(ДляЗаполнения);
			
		ИначеЕсли ТипЗнч(ДляЗаполнения.Ссылка) = Тип("ДокументСсылка.СписаниеТоваров") Тогда 	
			
			ОбновитьСписаниеТоваров(ДляЗаполнения);
			
		ИначеЕсли ТипЗнч(ДляЗаполнения.Ссылка) = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда 	
			
			ОбновитьОприходованиеТоваров(ДляЗаполнения);	
			
		ИначеЕсли ТипЗнч(ДляЗаполнения.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда 	
			
			СоздатьДокументыПоВозвратуОтПокупателя(ДляЗаполнения);
			
		ИначеЕсли ТипЗнч(ДляЗаполнения.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда 	
			
			СоздатьДокументыПоВозвратуПоставщику(ДляЗаполнения);			
			
		КонецЕсли; 	
		
	КонецПроцедуры
	
	Процедура ОтменитьПроведениеДокумента(ИдДокумента, ТипДокумента, ДатаУдаленияБ2Б, ПользовательВМС)
		
		ДокСсылка = НайтиОбъектПоИД(ИдДокумента, ТипДокумента);
		
		Если НЕ ЗначениеЗаполнено(ДокСсылка)
			ИЛИ Найти(Строка(ДокСсылка), "Object") > 0
			ИЛИ Найти(Строка(ДокСсылка), "Объект") > 0 Тогда
			ТекстОшибки = ОбщиеФункции._СтрШаблон_("Не удалось получить ссылку с идентификатором: %1", ИдДокумента);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Попытка
			
			ДокОбъект = ДокСсылка.ПолучитьОбъект();
			ДокОбъект.Комментарий = ОбщиеФункции._СтрШаблон_("%1	Документ распроведен по причине: удален из WMS в ""%2"" пользователем ""%3""", 
				ДокСсылка.Комментарий, ДатаУдаленияБ2Б, ПользовательВМС);
				
			Если ДокОбъект.Проведен Тогда
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);			
			Иначе
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли; 
			
			Если НЕ ДокОбъект.ПометкаУдаления Тогда
				ДокОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли; 
			
			ВыполнитьКоманду(ОбщиеФункции._СтрШаблон_("exec Patch_B2BDeleteHdrRequest @ExternalCode='%1', @CHECKED_BY_PI='%2'",
							ИдДокумента, Формат(ТекущаяДата(), "ДФ='dd-MM-yyyy HH:MM:ss'")));
							
			РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.УдалитьЗапись(Новый Структура("Объект, Источник, Приемник", ДокСсылка, "1С", "TRANSIT"));
			РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.УдалитьЗапись(Новый Структура("Объект, Источник, Приемник", ДокСсылка, "WMS", "1С"));							
				
		Исключение
		    ТекстОшибки = ОбщиеФункции._СтрШаблон_("Не удалось выполнить операцию 'ОтменитьПроведениеДокумента' по причине: ", ОписаниеОшибки());
			Лог1С.Вывести(ТекстОшибки, СтатусСообщения.ОченьВажное);
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
				
	КонецПроцедуры
	 
#Область РЕАЛИЗАЦИЯ
	
	Процедура ОбновитьДокументОтгрузки(ДляЗаполнения)
		//		
	КонецПроцедуры
	   
	Процедура СоздатьДокументыРеализации(ДляЗаполнения)
		
		Если НЕ ДляЗаполнения.Ссылка.Проведен Тогда
			Лог1С.Вывести("Не удалось создать цепочку документов на основании {0} по причине: документ не проведен", СтатусСообщения.Внимание, ДляЗаполнения.Ссылка);
			Возврат;
		КонецЕсли;
		
		Если НЕ ДляЗаполнения.Ссылка.Склад.ОрдерныйУчетПоРасходу Тогда
			ОбновитьДокументОтгрузки(ДляЗаполнения);	
			Возврат;
		КонецЕсли; 
		
		// Создать документ "Задание складу на отбор"
		Если НЕ ПроверитьСтруктуруПодчиненности(КритерииОтбора.ДокументыПоОтгрузкеТоваровУслуг, ДляЗаполнения.Ссылка, Тип("ДокументСсылка.ЗаданиеСкладуНаОтбор")) Тогда
			СоздатьЗаданиеСкладуНаОтбор(ДляЗаполнения);
		КонецЕсли; 
		
		// Создать документ "Отбор запасов на складе"
		Если НЕ ПроверитьСтруктуруПодчиненности(КритерииОтбора.ДокументыПоОтгрузкеТоваровУслуг, ДляЗаполнения.Ссылка, Тип("ДокументСсылка.ОтборЗапасовНаСкладе")) Тогда
			СоздатьОтборЗапасовНаСкладе(ДляЗаполнения);
		КонецЕсли;
		
		// Создать документ "Расходный складской ордер"
		Если НЕ ПроверитьСтруктуруПодчиненности(КритерииОтбора.ДокументыПоОтгрузкеТоваровУслуг, ДляЗаполнения.Ссылка, Тип("ДокументСсылка.РасходныйСкладскойОрдер")) Тогда
			СоздатьРасходныйСкладскойОрдер(ДляЗаполнения);
		КонецЕсли;
		
		Если ДляЗаполнения.Свойство("НомераПалетов")
			И ЗначениеЗаполнено(ДляЗаполнения.НомераПалетов) Тогда
			
			ОбщиеФункции.УстановитьЗначениеСвойства(Новый Структура("Объект, Свойство, Значение", 
				ДляЗаполнения.Ссылка, СвойствоДокумента_НомерПалета, ДляЗаполнения.НомераПалетов));
			
		КонецЕсли; 
	
КонецПроцедуры 

	Процедура СоздатьДокументыПоВозвратуОтПокупателя(ДляЗаполнения)
		
		Если НЕ ПроверитьСтруктуруПодчиненности(КритерииОтбора.ДокументыПоВозвратуОтПокупателя, ДляЗаполнения.Ссылка, Тип("ДокументСсылка.ПриходныйСкладскойОрдер")) Тогда
			СоздатьПриходныйСкладскойОрдер(ДляЗаполнения);
		КонецЕсли;	
		
	КонецПроцедуры
	 
#КонецОбласти 

#Область ЗАКУПКИ

	Процедура СоздатьПоступлениеТоваровУслуг(ДляЗаполнения)
		
		Если ВРЕГ(ДляЗаполнения.Состояние) <>  "COMPLETED"
			ИЛИ ДляЗаполнения.Свойство("ПриходныйОрдер") = Ложь Тогда
			Возврат;	
		КонецЕсли; 
		
		Попытка
			Лог1С.Вывести("Попытка создать ПТУ на основании {0}", СтатусСообщения.БезСтатуса, ДляЗаполнения.Ссылка);
			ДокОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			Лог1С.Вывести("Удалось создать ПТУ на основании {0}", СтатусСообщения.БезСтатуса, ДляЗаполнения.Ссылка);
			ДокОбъект.Заполнить(ДляЗаполнения.Ссылка);
			Лог1С.Вывести("Удалось заполнить ПТУ на основании {0}", СтатусСообщения.БезСтатуса, ДляЗаполнения.Ссылка);
			ДокОбъект.Дата = ТекущаяДата();
			ДокОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
			
			// Заполним колонку "Приходный ордер"
			Для каждого СтрТабЧасть Из ДокОбъект.Товары Цикл
				СтрТабЧасть.ПриходныйОрдер = ДляЗаполнения.ПриходныйОрдер;
			КонецЦикла; 
			
			ДокОбъект.Записать();
			Лог1С.Вывести("Попытка создать ПТУ на основании {0} завершена успешно", СтатусСообщения.БезСтатуса, ДляЗаполнения.Ссылка);
		Исключение
			Лог1С.Вывести("Не удалось создать ПТУ на основании '{0}' по причине: {1}", СтатусСообщения.ОченьВажное, ДляЗаполнения.Ссылка, ОписаниеОшибки());
		    ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
				
	КонецПроцедуры
	
	Процедура СоздатьДокументыПоВозвратуПоставщику(ДляЗаполнения)
		
		Если НЕ ПроверитьСтруктуруПодчиненности(КритерииОтбора.ДокументыПоВозвратуПоставщику, ДляЗаполнения.Ссылка, Тип("ДокументСсылка.РасходныйСкладскойОрдер")) Тогда
			СоздатьРасходныйСкладскойОрдер(ДляЗаполнения);
		КонецЕсли;	
		
	КонецПроцедуры	 
	
	Процедура СоздатьДокументыЗакупок(ДляЗаполнения)
		
		Лог1С.Вывести("Попытка создать цепочку документов на основании {0}", СтатусСообщения.БезСтатуса, ДляЗаполнения.Ссылка);
		
		Если НЕ ДляЗаполнения.Ссылка.Проведен Тогда
			Лог1С.Вывести("Не удалось создать цепочку документов на основании {0} по причине: документ не проведен", СтатусСообщения.Внимание, ДляЗаполнения.Ссылка);
			Возврат;
		КонецЕсли; 
		
		Если НЕ ПроверитьСтруктуруПодчиненности(КритерииОтбора.ДокументыПоЗаказуПоставщику, ДляЗаполнения.Ссылка, Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) Тогда
			СоздатьПриходныйСкладскойОрдер(ДляЗаполнения);	
			СоздатьПоступлениеТоваровУслуг(ДляЗаполнения);		
		КонецЕсли; 
		
	КонецПроцедуры
	 
#КонецОбласти 

#Область УПРАВЛЕНИЕ_СКЛАДОМ

	Процедура СоздатьЗаданиеСкладуНаОтбор(ДляЗаполнения)
		
		Попытка
			ДокОбъект = Документы.ЗаданиеСкладуНаОтбор.СоздатьДокумент(); 
			ДокОбъект.Заполнить(ДляЗаполнения.Ссылка);
			ДокОбъект.ПолучитьСсылкуНового();
			ДокОбъект.Дата = ТекущаяДата();
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение
			Лог1С.Вывести("Не удалось создать задание на отбор на основании '{0}' по причине: {1}", СтатусСообщения.ОченьВажное, ДляЗаполнения.Ссылка, ОписаниеОшибки());
		    ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецПроцедуры

	Процедура СоздатьОтборЗапасовНаСкладе(ДляЗаполнения)
		
		Если ВРЕГ(ДляЗаполнения.Состояние) =  "ACCEPTED" Тогда
			Возврат;	
		КонецЕсли;
		// Добавить заполнение дат производства по меркурий и серий для алкоголя
		Попытка
			ДокОбъект = Документы.ОтборЗапасовНаСкладе.СоздатьДокумент(); 
			ДокОбъект.Заполнить(ДляЗаполнения.Ссылка);		
			ДокОбъект.Кладовщик = ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
			ДокОбъект.Контролер = ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
			ДокОбъект.Статус = Перечисления.СтатусыСкладскихДокументов.Открыт;
			
			// Заполним таб.части данными из WMS
			
			ДокОбъект.ЛистОтбора.Очистить();
			ДокОбъект.ЛистОтбора1.Очистить();
			ДокОбъект.ЛистОтбора2.Очистить();
			ДокОбъект.ЛистОтбора3.Очистить();
			ДокОбъект.ЛистОтбора4.Очистить();
			ДокОбъект.ЛистОтбора5.Очистить();
			ДокОбъект.ЛистОтбора6.Очистить();
			ДокОбъект.СерииОтбора.Очистить();
			ДокОбъект.Марки.Очистить();
			
			Для каждого вмсСтрТаб Из ДляЗаполнения.Состав Цикл
				
				Если ДокОбъект.ЛистОтбора.Найти(вмсСтрТаб.Номенклатура, "Номенклатура") <> Неопределено Тогда
					НовСтр = ДокОбъект.ЛистОтбора.Найти(вмсСтрТаб.Номенклатура, "Номенклатура");
					НовСтр.КоличествоФакт = НовСтр.КоличествоФакт + вмсСтрТаб.КоличествоФакт;
				Иначе
					
					НовСтр = ДокОбъект.ЛистОтбора.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, вмсСтрТаб);
					
					НовСтр.ЗаказНаОтгрузку = ДляЗаполнения.Ссылка;
					НовСтр.Порядок = вмсСтрТаб.НомерСтроки;
					НовСтр.КоличествоПлан = вмсСтрТаб.Количество;
					НовСтр.Весовой = вмсСтрТаб.Номенклатура.Весовой;

				КонецЕсли; 
												
				//--------------------------------------------
				
				НовСтр = ДокОбъект.СерииОтбора.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, вмсСтрТаб);
				
				НовСтр.ЗаказНаОтгрузку = ДляЗаполнения.Ссылка;
				НовСтр.Порядок = вмсСтрТаб.НомерСтроки;
				НовСтр.КоличествоПлан = вмсСтрТаб.Количество;
				
				Если ЗначениеЗаполнено(вмсСтрТаб.ДатаПроизводства) Тогда
					
					ДопПараметрыДляЕГАИС = Новый Структура;
					// Параметры для подбора серии в разрезе справки А и Б для алкольной продукции
					Если ЗначениеЗаполнено(вмсСтрТаб.Партия)
						И вмсСтрТаб.Номенклатура.СодержитСпирт Тогда
						
						МассивПодстрок = ОбщиеФункции.РазложитьСтрокуВМассив(вмсСтрТаб.Партия, "_"); // FA-000000043472436_FB-000002952508683
						
						Если МассивПодстрок.Количество() > 0 Тогда
							ДопПараметрыДляЕГАИС.Вставить("ИдСправкиА", МассивПодстрок.Получить(0));
							ДопПараметрыДляЕГАИС.Вставить("ИдСправкиБ", МассивПодстрок.Получить(1));
						КонецЕсли; 
						
					КонецЕсли; 
					
					НовСтр.СерияНоменклатурыОтбора = ПолучитьСериюНоменклатурыПоДатеПроизводства(НовСтр.Номенклатура, вмсСтрТаб.ДатаПроизводства, ДопПараметрыДляЕГАИС);
					НовСтр.ДатаПроизводства = вмсСтрТаб.ДатаПроизводства;
					
				КонецЕсли; 
				
				
			КонецЦикла; 
			
			//	
			ДокОбъект.ПолучитьСсылкуНового();
			ДокОбъект.Дата = ТекущаяДата();
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение
			Лог1С.Вывести("Не удалось создать отбор запасов на основании '{0}' по причине: {1}", СтатусСообщения.ОченьВажное, ДляЗаполнения.Ссылка, ОписаниеОшибки());
		    ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;	
		
	КонецПроцедуры
	
	Процедура СоздатьРасходныйСкладскойОрдер(ДляЗаполнения)
		
		Если ВРЕГ(ДляЗаполнения.Состояние) <>  "SHIPPED" Тогда
			Возврат;	
		КонецЕсли; 
		
		Попытка
			ДокОбъект = Документы.РасходныйСкладскойОрдер.СоздатьДокумент(); 
			ДокОбъект.Заполнить(ДляЗаполнения.Ссылка);
			
			Если НЕ ЗначениеЗаполнено(ДокОбъект.Получатель) Тогда
				ДокОбъект.Получатель = ОпределитьПолучателяРСО(ДляЗаполнения.Ссылка);
			КонецЕсли; 
			
			ДокОбъект.ПолучитьСсылкуНового();
			ДокОбъект.Дата = ТекущаяДата();
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение
			Лог1С.Вывести("Не удалось создать РСО на основании '{0}' по причине: {1}", СтатусСообщения.ОченьВажное, ДляЗаполнения.Ссылка, ОписаниеОшибки());
		    ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецПроцедуры 
	
	Процедура СоздатьПриходныйСкладскойОрдер(ДляЗаполнения)
		
		Если НЕ ДляЗаполнения.Ссылка.Склад.ОрдерныйУчетПоПриходу Тогда
			Возврат;
		КонецЕсли; 
		
		Если ВРЕГ(ДляЗаполнения.Состояние) <>  "COMPLETED" Тогда
			Возврат;	
		КонецЕсли;
		
		Попытка
			Лог1С.Вывести("Попытка создать ПСО на основании {0}", СтатусСообщения.БезСтатуса, ДляЗаполнения.Ссылка);
			ДокОбъект = Документы.ПриходныйСкладскойОрдер.СоздатьДокумент();
			ДокОбъект.Заполнить(ДляЗаполнения.Ссылка);
			ДокОбъект.Товары.Очистить();
			ДокОбъект.Дата = ТекущаяДата();
			ДокОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
			
			// Заполним обязательные реквизиты
			НовСтр = ДокОбъект.Разгрузка.Добавить();
			Новстр.Грузчик = ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
			ДокОбъект.ВремяНачала = ТекущаяДата();
			ДокОбъект.ВремяОкончания = ТекущаяДата();
			ДокОбъект.Карщик = ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
			ДокОбъект.КоличествоЧасовИспользованияКары = 1;
			
			// Заполним таб. часть "Товары" на основании факта из WMS
			Для каждого вмсСтрТаб Из ДляЗаполнения.Состав Цикл
				НовСтр = ДокОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, вмсСтрТаб);
				НовСтр.Количество = вмсСтрТаб.КоличествоФакт;
				НовСтр.Качество = Справочники.Качество.Стандарт;
				НовСтр.Коэффициент = НовСтр.ЕдиницаИзмерения.Коэффициент;
				НовСтр.СерияНоменклатуры = ПолучитьСериюНоменклатурыПоДатеПроизводства(НовСтр.Номенклатура, вмсСтрТаб.ДатаПроизводства);
				Если НовСтр.СерияНоменклатуры.Пустая()
					И НовСтр.Номенклатура.МодельСкладскогоУчета.ВестиУчетПоСериям Тогда
					НовСтр.СерияНоменклатуры = СоздатьСериюНоменклатуры(НовСтр.Номенклатура, вмсСтрТаб.ДатаПроизводства, вмсСтрТаб.СрокГодности);
				КонецЕсли; 
			КонецЦикла;	
			
			ДокОбъект.Записать();
			
			Лог1С.Вывести("Попытка создать ПСО на основании {0} завершена успешно", СтатусСообщения.БезСтатуса, ДляЗаполнения.Ссылка);
			
		Исключение
			Лог1С.Вывести("Не удалось создать ПСО на основании '{0}' по причине: {1}", СтатусСообщения.ОченьВажное, ДляЗаполнения.Ссылка, ОписаниеОшибки());
		    ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		//Попытка
		//	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);	
		//Исключение
		//    Лог1С.Вывести("Не удалось провести ПСО на основании '{0}' по причине: {1}", СтатусСообщения.ОченьВажное, ДляЗаполнения.Ссылка, ОписаниеОшибки());
		//КонецПопытки;
		//
		ДляЗаполнения.Вставить("ПриходныйОрдер", ДокОбъект.Ссылка);
				
	КонецПроцедуры
	
	Процедура СоздатьИнвОписи(ТабЗнач, АдресСпискаДокументов, АдресТаблицыДляОбработкиОшибок)
		
		Если ТабЗнач.Количество() = 0 Тогда
			Лог1С.Вывести("Результат запроса пустой", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли; 
		
		ТаблицаСТехноЗонами = ТабЗнач.Скопировать(, "TechnoZone, OwnerStock");
		ТаблицаСТехноЗонами.Свернуть("TechnoZone, OwnerStock");
		
		ЛогКомлекс = Справочники.Склады.НайтиПоКоду("Ц00223");
		
		СписокДокументов = ДополнительныеПараметры.СписокДокументов;

		Для каждого СтрТехноЗона Из ТаблицаСТехноЗонами Цикл
			
			ДокОбъект = Документы.ИнвентаризационнаяОпись.СоздатьДокумент();
			ДокОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
			ДокОбъект.Склад = ЛогКомлекс;
			
			КопияТовары = ДокОбъект.Товары.ВыгрузитьКолонки();
						
			мОстаткиТекущейЗоны = ТабЗнач.НайтиСтроки(Новый Структура("TechnoZone, OwnerStock", СтрТехноЗона.TechnoZone, СтрТехноЗона.OwnerStock));
			
			Лог1С.Вывести("Формируется инвентаризационная опись, где владелец запасов: {0}. Техн. зона: {1}", СтатусСообщения.Информация, СтрТехноЗона.OwnerStock, СтрТехноЗона.TechnoZone);
			
			Для каждого ЭлМассива Из мОстаткиТекущейЗоны Цикл
				
				СтруктураЗаписи = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, СерияНоменклатуры, Количество, Качество, Ячейка");
				
				СтруктураЗаписи.Номенклатура 		= Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлМассива.Material_id));
				
				СтруктураЗаписи.ЕдиницаИзмерения 	= Справочники.ЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлМассива.MaterialUnit_id));
				
				СтруктураЗаписи.Коэффициент 		= СтруктураЗаписи.ЕдиницаИзмерения.Коэффициент;	
				
				СтруктураЗаписи.СерияНоменклатуры 	= ПолучитьСериюНоменклатурыПоДатеПроизводства(СтруктураЗаписи.Номенклатура, Дата(ЭлМассива.ProdDate));
				
				СтруктураЗаписи.Количество 			= Число(ЭлМассива.BaseQuantity);
				
				СтруктураЗаписи.Качество 			= ПолучитьКачество1СНаОснованииВидаЗапасаWMS(ЭлМассива.StockType_id);
				
				СтруктураЗаписи.Ячейка 				= ЭлМассива.StorageObject;
				
				// Проверки заполнения
				
				Отказ = Ложь;
				
				Если НЕ ЗначениеЗаполнено(СтруктураЗаписи.Номенклатура)
					ИЛИ СокрЛП(СтруктураЗаписи.Номенклатура.Код) = "" Тогда
					Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("Не удалось найти номенклатуру '%1' с кодом '%2'", ЭлМассива.Material, ЭлМассива.Material_id), СтатусСообщения.ОченьВажное);
					Отказ = Истина;
				КонецЕсли; 
				
				Если НЕ ЗначениеЗаполнено(СтруктураЗаписи.ЕдиницаИзмерения) Тогда
					Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("Для номенклатуры '%1' не удалось найти единицу измерения '%2' с кодом '%3'", 
						СтруктураЗаписи.Номенклатура, ЭлМассива.Unit, ЭлМассива.MaterialUnit_id), СтатусСообщения.ОченьВажное);	
					Отказ = Истина;
				КонецЕсли; 
				
				Если (СтруктураЗаписи.Номенклатура.МодельСкладскогоУчета.КонтрольДатыПроизводства
					ИЛИ СтруктураЗаписи.Номенклатура.МодельСкладскогоУчета.КонтрольСроковГодности)
					И ЭлМассива.ProdDate = "19000101"
					И НЕ ЗначениеЗаполнено(СтруктураЗаписи.СерияНоменклатуры) Тогда
					
					Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("Для номенклатуры '%1' с моделью складского учета '%2' не удалось найти серию с датой производства '%3'", 
						СтруктураЗаписи.Номенклатура, СтруктураЗаписи.Номенклатура.МодельСкладскогоУчета, Дата(ЭлМассива.ProdDate)), СтатусСообщения.ОченьВажное);
						
					Отказ = Истина;
					
				ИначеЕсли (СтруктураЗаписи.Номенклатура.МодельСкладскогоУчета.КонтрольДатыПроизводства
					ИЛИ СтруктураЗаписи.Номенклатура.МодельСкладскогоУчета.КонтрольСроковГодности)
					И НЕ ЭлМассива.ProdDate = "19000101"
					И НЕ ЗначениеЗаполнено(СтруктураЗаписи.СерияНоменклатуры)
					И Дата(ЭлМассива.ProdDate) > ТекущаяДата()  Тогда 
					
					Отказ = Истина;	
					
				ИначеЕсли (СтруктураЗаписи.Номенклатура.МодельСкладскогоУчета.КонтрольДатыПроизводства
					ИЛИ СтруктураЗаписи.Номенклатура.МодельСкладскогоУчета.КонтрольСроковГодности)
					И НЕ ЭлМассива.ProdDate = "19000101"
					И НЕ ЗначениеЗаполнено(СтруктураЗаписи.СерияНоменклатуры) Тогда
					
					СтруктураЗаписи.СерияНоменклатуры = СоздатьСериюНоменклатуры(СтруктураЗаписи.Номенклатура, Дата(ЭлМассива.ProdDate), Дата(ЭлМассива.ExpDate));
					
					ДобавитьСтрокуНовойСерии(СтруктураЗаписи);
					
				КонецЕсли; 
				
				Если Отказ Тогда
					// Добавим в структуру записи, данные WMS
					СтруктураЗаписи.Вставить("НаименованиеМатериала", ЭлМассива.Material);
					СтруктураЗаписи.Вставить("ЕдиницаWMS", ЭлМассива.Unit);
					СтруктураЗаписи.Вставить("ЗонаWMS", ЭлМассива.TechnoZone);
					СтруктураЗаписи.Вставить("ВладелецЗапаса", ЭлМассива.OwnerStock);
					Если НЕ ЭлМассива.ProdDate = "19000101" Тогда
						СтруктураЗаписи.Вставить("ДатаПроизводства", Дата(ЭлМассива.ProdDate));
					КонецЕсли; 
					
					ДобавитьСтрокуДляОбработкиВручную(СтруктураЗаписи);
					
					Продолжить;
					
				КонецЕсли; 
				
				НовСтр = КопияТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, СтруктураЗаписи);
				
				Если НовСтр.Номенклатура.ВетКонтроль
					ИЛИ НовСтр.Номенклатура.ДистрибьюторскийКонтракт.ИспользоватьВетКонтроль Тогда
					
					НовСтр.ДатаПроизводстваНачало 				= НовСтр.СерияНоменклатуры.ДатаПроизводства;
					НовСтр.ДатаПроизводстваОкончание 			= НовСтр.СерияНоменклатуры.ДатаПроизводства;
					НовСтр.ДатаОкончанияСрокаГодностиНачало 	= НовСтр.СерияНоменклатуры.СрокГодности;
					НовСтр.ДатаОкончанияСрокаГодностиОкончание 	= НовСтр.СерияНоменклатуры.СрокГодности;
					
				КонецЕсли; 
										
			КонецЦикла;
			
			Если КопияТовары.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			КопияТовары.Свернуть("Номенклатура, Ячейка, СерияНоменклатуры, ЕдиницаИзмерения, Коэффициент, Качество, ДатаПроизводстваНачало, ДатаПроизводстваОкончание, ДатаОкончанияСрокаГодностиНачало, ДатаОкончанияСрокаГодностиОкончание", "Количество");
			
			ДокОбъект.Товары.Загрузить(КопияТовары); // Сворачиваем в 1С, т.к нам нужны остатки в разрезе наших качеств, а не WMS
			ДокОбъект.Комментарий = ОбщиеФункции._СтрШаблон_("WMS. Владелец запасов: %1. Зона: %2", СтрТехноЗона.OwnerStock, СтрТехноЗона.TechnoZone);
			ДокОбъект.Дата = ТекущаяДата(); 
			
			Попытка
				ДокОбъект.Записать();
				Лог1С.Вывести("Документ сформирован", СтатусСообщения.Информация);
				СписокДокументов.Добавить(ДокОбъект.Ссылка);
			Исключение
			    Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось записать инвентаризационную опись '%1' по причине: %2", ДокОбъект.Комментарий, ОписаниеОшибки()), СтатусСообщения.ОченьВажное);
			КонецПопытки; 
			
		КонецЦикла;
				
	КонецПроцедуры	 

#КонецОбласти 

#Область УПРАВЛЕНИЕ_ЗАПАСАМИ

	Процедура ОбновитьСписаниеТоваров(ДляЗаполнения)
		
		МассивРасхождений = Новый Массив;
		
		Для каждого вмсСтрТаб Из ДляЗаполнения.Состав Цикл
			
			Если вмсСтрТаб.Количество <> вмсСтрТаб.КоличествоФакт Тогда
				
				МассивРасхождений.Добавить(Новый Структура("GUID_Строки, Количество, ЕдиницаИзмерения",
					вмсСтрТаб.GUID_Строки, вмсСтрТаб.КоличествоФакт, вмсСтрТаб.ЕдиницаИзмерения));
				
			КонецЕсли;
			
			Если (вмсСтрТаб.Номенклатура.МодельСкладскогоУчета.КонтрольДатыПроизводства
					ИЛИ вмсСтрТаб.Номенклатура.МодельСкладскогоУчета.КонтрольСроковГодности)
				И (вмсСтрТаб.Номенклатура.СодержитСпирт 
					ИЛИ вмсСтрТаб.Номенклатура.ВетКонтроль) тогда
					
				// Проверка отгруженных сроков со сроками в документе	
				
				СтрокаТабЧасти = ДляЗаполнения.Ссылка.Товары.Найти(вмсСтрТаб.GUID_Строки, "GUID_Строки");
				
				Если СтрокаТабЧасти.СерияНоменклатуры.ДатаПроизводства <> вмсСтрТаб.ДатаПроизводства Тогда
					
					Серия = ПолучитьСериюНоменклатурыПоДатеПроизводства(вмсСтрТаб.Номенклатура, вмсСтрТаб.ДатаПроизводства);
					
					Если ЗначениеЗаполнено(Серия) Тогда
						МассивРасхождений.Добавить(Новый Структура("GUID_Строки, СерияНоменклатуры",
							вмсСтрТаб.GUID_Строки, Серия));	
					КонецЕсли; 	
					
				КонецЕсли; 	
				
			КонецЕсли; 
			
		КонецЦикла;	
		
		Если МассивРасхождений.Количество() > 0 Тогда
			
			ДокОбъект = ДляЗаполнения.Ссылка.ПолучитьОбъект();
			ДокОбъект.Дата = ТекущаяДата(); 
			ДокОбъект.ДополнительныеСвойства.Вставить("Источник", "1С");
			ДокОбъект.Комментарий = ОбщиеФункции._СтрШаблон_("%1	Скорректирована на основании факта WMS", ДокОбъект.Комментарий);
			
			Для каждого ЭлМассива Из МассивРасхождений Цикл
				
				СтрокаДокумента = ДокОбъект.Товары.Найти(ЭлМассива.GUID_Строки, "GUID_Строки");
				
				Если СтрокаДокумента <> Неопределено Тогда
					
					ЗаполнитьЗначенияСвойств(СтрокаДокумента, ЭлМассива);
					
				КонецЕсли; 
				
			КонецЦикла; 
			
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			
		КонецЕсли; 
		
	КонецПроцедуры
	
	Процедура ОбновитьОприходованиеТоваров(ДляЗаполнения)
		//		
	КонецПроцедуры 
	
	Процедура СоздатьДокументыПоИсходящимПеремещениям(ДляЗаполнения)
		
		// Создать документ "Расходный складской ордер"
		Если НЕ ПроверитьСтруктуруПодчиненности(КритерииОтбора.ДокументыПоПеремещениюТоваров, ДляЗаполнения.Ссылка, Тип("ДокументСсылка.РасходныйСкладскойОрдер")) Тогда
			СоздатьРасходныйСкладскойОрдер(ДляЗаполнения);
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура СоздатьДокументыПоВходящимПеремещениям(ДляЗаполнения)
		
		Если НЕ ПроверитьСтруктуруПодчиненности(КритерииОтбора.ДокументыПоПеремещениюТоваров, ДляЗаполнения.Ссылка, Тип("ДокументСсылка.ПриходныйСкладскойОрдер")) Тогда
			СоздатьПриходныйСкладскойОрдер(ДляЗаполнения);
		КонецЕсли;	
		
	КонецПроцедуры
	 	
	Функция СоздатьСериюНоменклатуры(Номенклатура, ДатаПроизводства, СрокГодности)
		
		Перем НоваяСерия;
		
		ТекстОшибки = "";
		
		Если НЕ ЗначениеЗаполнено(Номенклатура)
			ИЛИ НЕ ЗначениеЗаполнено(ДатаПроизводства)
			ИЛИ НЕ ЗначениеЗаполнено(СрокГодности) Тогда
			
			ТекстОшибки = ОбщиеФункции._СтрШаблон_("Не удалось создать серию номенклатуры для товара %1 по причине: не заполнены обязательные поля
			|Номенклатура: %2
			|Дата производства: %3
			|Срок годности: %4", Номенклатура, Номенклатура, ДатаПроизводства, СрокГодности);
			
			Лог1С.Вывести(ТекстОшибки, СтатусСообщения.Внимание );
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли; 
		
		Попытка
			
			НовЭлемент = Справочники.СерииНоменклатуры.СоздатьЭлемент();
			НовЭлемент.Владелец = Номенклатура;
			НовЭлемент.Наименование = ОбщиеФункции._СтрШаблон_("%1 (%2)", Формат(ДатаПроизводства, "ДЛФ=D"), Формат(СрокГодности, "ДЛФ=D"));
			НовЭлемент.ДатаПроизводства = ДатаПроизводства;
			НовЭлемент.СрокГодности = СрокГодности;
			НовЭлемент.КоличествоПериодовГодности = (СрокГодности - ДатаПроизводства) / 86400;
			НовЭлемент.ПериодГодности = Перечисления.Периодичность.День;
			НовЭлемент.ДатаСозданияСерии = ТекущаяДата();
			НовЭлемент.Комментарий = "Создана автоматически на основании данных WMS";
			
			НовЭлемент.Записать();
			
			НоваяСерия = НовЭлемент.Ссылка;
	
		Исключение
			ТекстОшибки = ОбщиеФункции._СтрШаблон_("Не удалось записать серию номенклатуры для товара %1 по причине: %2", Номенклатура, ОписаниеОшибки());
			Лог1С.Вывести(ТекстОшибки, СтатусСообщения.Внимание);
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
				
		Возврат НоваяСерия;
	
	КонецФункции

#КонецОбласти 

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СТАТУСЫ_ЗАЯВОК
	
	Процедура ОбновитьСтатусыЗаявок() экспорт
		
		Заявки = ПолучитьЗаявкиВОбработке();
		ПолучитьСтатусыЗаявокИзТранзитнойБазы();	
		
		Для каждого СтрЗаявка Из Заявки Цикл
			
			СтруктураЗаписи = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьСтруктуруЗаписи();
			ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрЗаявка);
			
			СтатусЗаявкиВТранзите = ТаблицаСтатусов.Найти(СтрЗаявка.Идентификатор, "ИдПакета");
			
			Если СтатусЗаявкиВТранзите = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			СтруктураЗаписи.ДатаВремяПолученияЗаявкиСервисом = СтатусЗаявкиВТранзите.ДатаНачалаОбработки;
			СтруктураЗаписи.ДатаВремяПолученияРезультатаВыполненияЗаявки = СтатусЗаявкиВТранзите.ДатаОбработки;	 		
			СтруктураЗаписи.ДатаЗаписи = ТекущаяДата();
			
			Если СтатусЗаявкиВТранзите <> Неопределено
				И Найти(ВРЕГ(СтатусЗаявкиВТранзите.Статус), "OK") > 0 Тогда
				СтруктураЗаписи.Статус = Справочники.СтатусыЗаявок.УспешноОбработана;
			ИначеЕсли СтатусЗаявкиВТранзите <> Неопределено
				И Найти(ВРЕГ(СтатусЗаявкиВТранзите.Статус), "ER") > 0 Тогда
				СтруктураЗаписи.Статус = Справочники.СтатусыЗаявок.Отклонена;
				СтруктураЗаписи.ОшибкиВыполнения = СтатусЗаявкиВТранзите.Комментарий;
			ИначеЕсли СтатусЗаявкиВТранзите = Неопределено
				ИЛИ (СтатусЗаявкиВТранзите <> Неопределено И СтатусЗаявкиВТранзите.Статус = null) тогда
				СтруктураЗаписи.Статус = Справочники.СтатусыЗаявок.Обрабатывается;
			КонецЕсли; 
			
			РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДобавитьЗапись(СтруктураЗаписи);
			
		КонецЦикла;
		
	КонецПроцедуры
	
	Функция ПолучитьЗаявкиДляОбработки()
		
		РезультатЗапроса = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьЗаявкиПоСтатусам("Объект, Источник, Приемник, Текст, Идентификатор", 
		Справочники.СтатусыЗаявок.Новая, "1С", "TRANSIT",,,"УПОРЯДОЧИТЬ ПО ДатаЗаписи"); 
		
		Возврат РезультатЗапроса;		
		
	КонецФункции
	
	Функция ПолучитьЗаявкиВОбработке()
		
		СписокСтатусов = Новый СписокЗначений;
		СписокСтатусов.Добавить(Справочники.СтатусыЗаявок.Отправлена);
		СписокСтатусов.Добавить(Справочники.СтатусыЗаявок.Обрабатывается);
		
		РезультатЗапроса = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьЗаявкиПоСтатусам("Объект, Источник, Приемник, Текст, Идентификатор", 
		СписокСтатусов, "1С", "TRANSIT");
		
		Возврат РезультатЗапроса;
		
	КонецФункции
	
	Функция ПолучитьСтатусыЗаявокИзТранзитнойБазы()
		
		МинДатаЗаписи = НачалоДня(ТекущаяДата());
		
		СписокСтатусов = Новый СписокЗначений;
		СписокСтатусов.Добавить(Справочники.СтатусыЗаявок.Отправлена);
		СписокСтатусов.Добавить(Справочники.СтатусыЗаявок.Обрабатывается);
		
		Выборка = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьЗаявкиПоСтатусам("МИНИМУМ(ДатаЗаписи) КАК МинДатаЗаписи", 
		СписокСтатусов, "1С", "TRANSIT",,"Выборка");
		
		
		Если Выборка.Следующий() Тогда
			Если ТипЗнч(Выборка.МинДатаЗаписи) = Тип("Дата") Тогда
				МинДатаЗаписи = Выборка.МинДатаЗаписи;
			КонецЕсли; 
		КонецЕсли; 
		
		Попытка
			Результат = ВыполнитьКоманду(ОбщиеФункции._СтрШаблон_("exec GetDocnum @filter = '%1'", ОбщиеФункции._СтрШаблон_("docnum.DOC_SENDER='%1' and docnum.DOC_RECEIVER='%2' and docnum.RecordDate >= ''%3''", "'1С'", "'WMS'", Формат(МинДатаЗаписи, "ДФ='dd-MM-yyyy HH:MM:ss'"))));
		Исключение
			Сообщить(ОписаниеОшибки());
			ВызватьИсключение "При обновлении статусов заявок 1C-TRANSIT произошел сбой по причине: "+ОписаниеОшибки();
		КонецПопытки;
		
		ТаблицаСтатусов.Очистить();
		
		ЗаполнитьТаблицуСтатусов(Результат);
		
	КонецФункции 
	
#КонецОбласти 
	
#Область ПРОЧЕЕ
	
	Процедура ЗаполнитьТаблицуСоответствийКачеств()
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Качество.Ссылка,
		|	Качество.ВнешнийКодWMS
		|ИЗ
		|	Справочник.Качество КАК Качество
		|ГДЕ
		|	Качество.ВнешнийКодWMS <> """"";
		
		ТаблицаСопоставленияКачеств = Запрос.Выполнить().Выгрузить();
		
	КонецПроцедуры 
	
	Функция ПолучитьСопоставленноеКачество(ВнешнийКод)
		
		Качество = Справочники.Качество.Стандарт;
		
		СтрТабСопоставленноеКачество = ТаблицаСопоставленияКачеств.Найти(ВнешнийКод, "ВнешнийКодWMS");
		
		Если СтрТабСопоставленноеКачество <> Неопределено Тогда
			Качество = СтрТабСопоставленноеКачество.Ссылка;
		КонецЕсли; 
		
		Возврат Качество;
		
	КонецФункции	
	
	Процедура ПолучитьЗаказыУдаленныеИзБ2Б()
		
		Попытка
			Результат = ВыполнитьКоманду("exec Get_B2BDeleteHdrRequest");
		Исключение
		    Лог1С.Вывести(ОбщиеФункции._СтрШаблон_("Не удалось выполнить операцию 'ПолучитьЗаказыУдаленныеИзБ2Б' по причине: %1", ОписаниеОшибки()), СтатусСообщения.ОченьВажное);
			Возврат;
		КонецПопытки;
		
		втТабЗнач = ПоместитьНаборЗаписейSQLВТабЗнач(Результат);
		
		Для каждого СтрТаб Из втТабЗнач Цикл
			
			ДокСсылка = НайтиОбъектПоИД(СтрТаб.ExternalCode, СтрТаб.DeliveryType);
			
			СтруктураЗаписи = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьСтруктуруЗаписи();
			СтруктураЗаписи.Объект 		= Документы.РегистраторЗаписи.СоздатьНовыйДокумент(Строка(ДокСсылка));
			СтруктураЗаписи.ДатаЗаписи	= ТекущаяДата();
			СтруктураЗаписи.ДатаВремяПолученияЗаявкиСервисом = ТекущаяДата(); 
			СтруктураЗаписи.Источник 	= "WMS";
			СтруктураЗаписи.Приемник 	= "1С";
			СтруктураЗаписи.Статус		= Справочники.СтатусыЗаявок.Новая;
			СтруктураЗаписи.Текст		= ОбщиеФункции._СтрШаблон_("ОтменитьПроведениеДокумента(""%1"", ""%2"", ""%3"", ""%4"")", 
											СтрТаб.ExternalCode, СтрТаб.DeliveryType, Строка(СтрТаб.RecordDate), СтрТаб.Username);
											
			РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДобавитьЗапись(СтруктураЗаписи);											
			
		КонецЦикла; 
		
	КонецПроцедуры
	 
	Функция ПолучитьЭкспедитораИзМаршрута(ДокументОснование)
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МаршрутЭкспедитораДокументыОснования.Ссылка.Экспедитор КАК Экспедитор
		|ИЗ
		|	Документ.МаршрутЭкспедитора.ДокументыОснования КАК МаршрутЭкспедитораДокументыОснования
		|ГДЕ
		|	МаршрутЭкспедитораДокументыОснования.ДокументОснование = &ДокументОснование";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() тогда
			Возврат ВыборкаДетальныеЗаписи.Экспедитор;	
		Иначе
			Возврат ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
		КонецЕсли;

	КонецФункции
	 	
	Функция ОпределитьПолучателяРСО(ДокументОснование)
		
		ПолучательРСО = ДокументОснование.Контрагент;
		
		Если ОбщиеФункции.ЕстьРеквизитДокумента("ВидПоставки", ДокументОснование.Метаданные()) Тогда
			
			ВидПоставки = ДокументОснование.ВидПоставки;
			
			Если ВидПоставки.Доставка Тогда
				
				Если ВидПоставки.ЧерезТорговогоПредставителя Тогда
					ПолучательРСО = ДокументОснование.Ответственный.ФизЛицо;
				Иначе
					ПолучательРСО = ПолучитьЭкспедитораИзМаршрута(ДокументОснование);
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли; 
		
		Возврат ПолучательРСО
		
	КонецФункции
	 
	Процедура СформироватьОтчет(ТабЗнач)
		//	
	Конецпроцедуры
	
	Процедура ДобавитьСтрокуНовойСерии(СтруктураЗаписи)
		
		НовСтр = ДополнительныеПараметры.НовыеСерии.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтруктураЗаписи);
		
		Лог1С.Вывести("Создана новая серия '{0}' по товару '{1}'", СтатусСообщения.Внимание, СтруктураЗаписи.СерияНоменклатуры, СтруктураЗаписи.Номенклатура);
		
	КонецПроцедуры	
	
	Процедура ДобавитьСтрокуДляОбработкиВручную(СтруктураЗаписи)
		
		НовСтр = ДополнительныеПараметры.ОбработкаОшибокПоЗагрузкеОписей.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтруктураЗаписи);
		
		Лог1С.Вывести("Добавлена строка с материалом {0} для обработки вручную", СтатусСообщения.БезСтатуса, СтруктураЗаписи.НаименованиеМатериала);
		
	КонецПроцедуры
	 
	Функция ПолучитьКачество1СНаОснованииВидаЗапасаWMS(ИдентификаторВидаЗапаса)
		
		Если ИдентификаторВидаЗапаса = 8 Тогда // Брак
			Возврат ПредопределенноеЗначение("Справочник.Качество.Брак");	
		ИначеЕсли ИдентификаторВидаЗапаса = 13 Тогда // Просрочен	
			Возврат Справочники.Качество.НайтиПоКоду("Ц00005"); // Срок
		ИначеЕсли ИдентификаторВидаЗапаса = 14 Тогда // Ограничено годен
			Возврат Справочники.Качество.НайтиПоКоду("Ц00001"); // Короткие сроки
		Иначе
			Возврат ПредопределенноеЗначение("Справочник.Качество.Стандарт");	 
		КонецЕсли; 
		
	КонецФункции	 

	Функция ПоместитьНаборЗаписейSQLВТабЗнач(НаборЗаписей)
		
		ТабЗнач = Новый ТаблицаЗначений;
		
		Для каждого Поле Из НаборЗаписей.Fields Цикл
			ТабЗнач.Колонки.Добавить(Поле.Name);	
		КонецЦикла; 
		
		Пока НЕ НаборЗаписей.EOF Цикл
			
			НовСтр = ТабЗнач.Добавить();
			
			Для каждого Колонка Из ТабЗнач.Колонки Цикл
				НовСтр[Колонка.Имя] = НаборЗаписей.Fields(Колонка.Имя).Value;
			КонецЦикла; 
			
			НаборЗаписей.MoveNext();
			
		КонецЦикла; 
		
		Возврат ТабЗнач;
		
	КонецФункции
	 
	Функция ПолучитьСериюНоменклатурыПоДатеПроизводства(Владелец, ДатаПроизводства, ДопПараметрыДляЕГАИС = Неопределено, ДопПараметрыМеркурий = Неопределено)
		
		СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
		ИдСправкиА = ?(ДопПараметрыДляЕГАИС <> Неопределено И ДопПараметрыДляЕГАИС.Свойство("ИдСправкиА"), ДопПараметрыДляЕГАИС.ИдСправкиА, "");
		ИдСправкиБ = ?(ДопПараметрыДляЕГАИС <> Неопределено И ДопПараметрыДляЕГАИС.Свойство("ИдСправкиБ"), ДопПараметрыДляЕГАИС.ИдСправкиБ, "");
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	влЗапрос.СерияНоменклатуры
			|ИЗ
			|	(ВЫБРАТЬ
			|		ЕГАИС_СоответствиеСерийНоменклатуры.СерияНоменклатуры КАК СерияНоменклатуры
			|	ИЗ
			|		РегистрСведений.ЕГАИС_СоответствиеСерийНоменклатуры КАК ЕГАИС_СоответствиеСерийНоменклатуры
			|	ГДЕ
			|		ЕГАИС_СоответствиеСерийНоменклатуры.СерияНоменклатуры.Владелец = &Владелец
			|		И ЕГАИС_СоответствиеСерийНоменклатуры.InformA_RegId = &ИдСправкиА
			|		И ЕГАИС_СоответствиеСерийНоменклатуры.InformBRegId = &ИдСправкиБ
			|  		И ЕГАИС_СоответствиеСерийНоменклатуры.СерияНоменклатуры.ДатаПроизводства = &ДатаПроизводства 
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		ЕГАИС_СоответствиеСерийНоменклатуры.СерияНоменклатуры
			|	ИЗ
			|		РегистрСведений.ЕГАИС_СоответствиеСерийНоменклатуры КАК ЕГАИС_СоответствиеСерийНоменклатуры
			|	ГДЕ
			|		ЕГАИС_СоответствиеСерийНоменклатуры.СерияНоменклатуры.Владелец = &Владелец
			|		И ЕГАИС_СоответствиеСерийНоменклатуры.InformA_RegId = &ИдСправкиА
			|  		И ЕГАИС_СоответствиеСерийНоменклатуры.СерияНоменклатуры.ДатаПроизводства = &ДатаПроизводства 
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		СерииНоменклатуры.Ссылка
			|	ИЗ
			|		Справочник.СерииНоменклатуры КАК СерииНоменклатуры
			|	ГДЕ
			|		СерииНоменклатуры.Владелец = &Владелец
			|		И СерииНоменклатуры.ДатаПроизводства = &ДатаПроизводства) КАК влЗапрос";
		
		Запрос.УстановитьПараметр("Владелец", Владелец);
		ЗАпрос.УстановитьПараметр("ИдСправкиА", ИдСправкиА); 
		ЗАпрос.УстановитьПараметр("ИдСправкиБ", ИдСправкиБ); 
		Запрос.УстановитьПараметр("ДатаПроизводства", ДатаПроизводства);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда		
			СерияНоменклатуры = ВыборкаДетальныеЗаписи.СерияНоменклатуры;	
		КонецЕсли;
		
		Возврат СерияНоменклатуры;
			
	КонецФункции 

	Процедура ЗаполнитьТаблицуСтатусов(Результат)
		
		ТаблицаСтатусов.Очистить();
		
		Пока не Результат.EOF цикл 
			
			НовСтр = ТаблицаСтатусов.Добавить();
			НовСтр.ТипОтвета = Результат.Fields("type_response").Value;
			НовСтр.ИдПакета = Результат.Fields("docnum").Value;
			НовСтр.ДатаОбработки = Результат.Fields("proc_date").Value;
			НовСтр.ДатаНачалаОбработки = Результат.Fields("proc_date_beg").Value;
			НовСтр.Статус = Результат.Fields("proc_status").Value;
			НовСтр.Комментарий = Результат.Fields("comment").Value;
			НовСтр.ДатаЗаписи = Результат.Fields("RecordDate").Value;
			
			Результат.MoveNext();
			
		КонецЦикла;
		
	КонецПроцедуры	
	 
	// Функция - Найти объект по ИД
	// Выполняет поиск объекта 1С по переданному идентификатору
	// 
	// Параметры:
	//  Ид			 - Строка	- Уникальный идентификатор объекта строкой
	//  ТипОбъекта	 - Строка	 - Возможные значения (IN - входящие заявки, OUT - исходящие заявки)
	// 
	// Возвращаемое значение:
	//   - ДокументСсылка
	//
	Функция НайтиОбъектПоИД(Ид, ТипОбъекта)
		
		Если НЕ ЗначениеЗаполнено(ТипОбъекта)
			ИЛИ (ЗначениеЗаполнено(ТипОбъекта) И Найти(ВРЕГ("IN, OUT, RPC, RPD"), ТипОбъекта) = 0) Тогда
			ВызватьИсключение "При проверке заполнения поля 'ТипОбъекта' найдена ошибка: 
			|'ТипОбъекта' должен быть заполнен и иметь значение 'IN, OUT, RPC, RPD'";
		КонецЕсли; 
		
		ДокСсылка = Неопределено;
		
		уид = Новый УникальныйИдентификатор(ид);
		
		Если Врег(ТипОбъекта) = "IN" Тогда
			
			ДокСсылка = Документы.ЗаказПоставщику.ПолучитьСсылку(уид);
			
			Если СокрЛП(ДокСсылка.Номер) = "" Тогда
				ДокСсылка = Документы.ВозвратТоваровОтПокупателя.ПолучитьСсылку(Уид);
			КонецЕсли;	
			
			Если СокрЛП(ДокСсылка.Номер) = "" Тогда
				ДокСсылка = Документы.ПеремещениеТоваров.ПолучитьСсылку(Уид);
			КонецЕсли;
			
			Если СокрЛП(ДокСсылка.Номер) = "" Тогда
				ДокСсылка = Документы.ОприходованиеТоваров.ПолучитьСсылку(Уид);
			КонецЕсли;
			
			Если СокрЛП(ДокСсылка.Номер) = "" Тогда
				ДокСсылка = Документы.ИнвентаризацияДоставки.ПолучитьСсылку(Уид);
			КонецЕсли;
						
		ИначеЕсли Врег(ТипОбъекта) = "OUT" Тогда
			
			ДокСсылка = Документы.ОтгрузкаТоваровУслуг.ПолучитьСсылку(уид);
			
			Если СокрЛП(ДокСсылка.Номер) = "" Тогда
				ДокСсылка = Документы.ВозвратТоваровПоставщику.ПолучитьСсылку(уид);
			КонецЕсли;
			
			Если СокрЛП(ДокСсылка.Номер) = "" Тогда
				ДокСсылка = Документы.ПеремещениеТоваров.ПолучитьСсылку(Уид);
			КонецЕсли;
			
			Если СокрЛП(ДокСсылка.Номер) = "" Тогда
				ДокСсылка = Документы.СписаниеТоваров.ПолучитьСсылку(Уид);
			КонецЕсли;
			
			Если СокрЛП(ДокСсылка.Номер) = "" Тогда
				ДокСсылка = Документы.ВозвратТоваровПоставщику.ПолучитьСсылку(Уид);
			КонецЕсли;
			
		КонецЕсли; 
		
		Возврат ДокСсылка;
		
	КонецФункции
	 
	Функция ВыполнитьКоманду(Знач СтрокаКоманды, ИспользоватьТранзакцию = Ложь, ДопПараметры = Неопределено) экспорт
		
		Если ИспользоватьТранзакцию
			И (ТипЗнч(ДопПараметры) = Тип("Структура") 
				И ДопПараметры.Свойство("ИмяТранзакции") 
				И ДопПараметры.Свойство("ОписаниеТранзакции")
				) Тогда
				
			СтрокаКоманды = ОбщиеФункции._СтрШаблон_("
			|BEGIN TRAN @TranName WITH MARK N'@TranMark';
			|BEGIN TRY  
			|%1
			|END TRY
			|BEGIN CATCH
			|	IF @@TRANCOUNT > 0
			|  		ROLLBACK TRAN @TranName;
			|   THROW;  
			|END CATCH;   
			|
			|IF @@TRANCOUNT > 0
			|   COMMIT TRAN @TranName;", 
			СтрокаКоманды);
			
			СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "@TranName", ОбщиеФункции._СтрШаблон_("""%1""", ДопПараметры.ИмяТранзакции));
			СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "@TranMark", ОбщиеФункции._СтрШаблон_("%1", ДопПараметры.ОписаниеТранзакции));
			
		КонецЕсли; 
		
		Попытка		
			Команда.CommandText = СтрокаКоманды;
			Результат = Команда.Execute();
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		Возврат Результат;
		
	КонецФункции

	Процедура Инициализация()
		
		Если Соединение <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		//Сообщить("Инициализация. Начало");
		
		//Подключение к SQL-серверу
		СтрокаПодключения = Справочники.СтрокиСоединенияСБазами.TRANSIT.Наименование;
				
		Если НЕ Справочники.СтрокиСоединенияСБазами.TRANSIT.ДоступКБазеЗапрещен Тогда
			
			Попытка
				Соединение  = Новый COMОбъект("ADODB.Connection");
				Команда     = Новый COMОбъект("ADODB.Command");			
				Соединение.ConnectionString = ОбщиеФункции._СтрШаблон_(СтрокаПодключения, "agat190srx");
				//Соединение.ConnectionString = "Provider=SQLOLEDB.1;User ID=sa_dev;Pwd=agat190srx;Persist Security Info=True;Data Source=217.25.210.138,1433;Initial Catalog=TRANSIT;";
				Соединение.ConnectionTimeout = 15;
				Соединение.CommandTimeout = 600;
				Соединение.Open();
				Команда.ActiveConnection   = Соединение;
			Исключение
				Сообщить("Внимание соединение с сервером базы TRANSIT не установлено. Дальнейшая работа невозможна");
				Сообщить(ОписаниеОшибки());
				Соединение = Неопределено;
				//Возврат;
			КонецПопытки;
			
		Иначе
			
			Сообщить("Доступ к базе запрещен: "+Справочники.СтрокиСоединенияСБазами.TRANSIT.Наименование, СтатусСообщения.Внимание);			
			
		КонецЕсли;	
				
		//Сообщить("Подключение к транзитной базе прошло успешно");
		
		УзелОбмена = ПланыОбмена.ОбменWMSтранзит.НайтиПоКоду("12");
		
		// Свойство склада "Используется WMS". Признак, что можно выгружать/загружать заявки в трандитную базу
		СвойствоСклада_ИспользуетсяWMS = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("001301");
		// Номера палетов после консолидации заявок
		СвойствоДокумента_НомерПалета = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("001312"); 
		
		СоставУзла = Метаданные.ПланыОбмена.ОбменWMSтранзит.Состав;
		
		Настройки = Новый Структура;
		
		Автотесты = Ложь;
		
		ТаблицаСтатусов = Новый ТаблицаЗначений;
		ТаблицаСтатусов.Колонки.Добавить("ТипОтвета");
		ТаблицаСтатусов.Колонки.Добавить("ИдПакета");
		ТаблицаСтатусов.Колонки.Добавить("ДатаНачалаОбработки");
		ТаблицаСтатусов.Колонки.Добавить("ДатаОбработки");
		ТаблицаСтатусов.Колонки.Добавить("Статус");
		ТаблицаСтатусов.Колонки.Добавить("Комментарий");
		ТаблицаСтатусов.Колонки.Добавить("ДатаЗаписи");
		
		Лог1С = Обмен_1С_Транзит.ПолучитьНастроенныйОбъектЛога();
		
		ЗаполнитьТаблицуСоответствийКачеств();
		
		//Сообщить("Инициализация. Окончание");
				
	КонецПроцедуры

	// Процедура - Финализировать
	// Закрывает файл с логом и соединение sql
	Процедура Финализировать() экспорт
		
		Соединение = Неопределено;
		Лог1С.Закрыть();
		
	КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область ТЕСТЫ

#Область Служебные_процедуры_и_функции

	Процедура Настроить() экспорт
		// запустить скрипт из макета "SQL_TESTS_CREATE_PROC"		
		Автотесты = Истина;
	КонецПроцедуры

	Процедура ОчиститьНастройки() экспорт
		
		Соединение = Неопределено;
		
	КонецПроцедуры

	Функция ПолучитьСписокМетодов() экспорт
		
		СписокМетодов = Новый СписокЗначений;
		СписокМетодов.Добавить("ТестСоздатьЗаявкиПоДокументамДляОтправкиВТранзит");
		СписокМетодов.Добавить("ТестВыгрузитьДанные");
		СписокМетодов.Добавить("ТестПолучитьЗаявкиВОбработке");
		СписокМетодов.Добавить("ТестПолучитьСтатусыЗаявокИзТранзитнойБазы");
		СписокМетодов.Добавить("ТестЗагрузитьДанные");
		СписокМетодов.Добавить("ТестСоздатьЗаявкуДля1С");
		СписокМетодов.Добавить("ТестОбработатьЗаявкиДля1С");
		//	
		Возврат СписокМетодов;
		
	КонецФункции
	 
#КонецОбласти

#Область Тестовые_методы

	Процедура ТестСоздатьЗаявкуДля1С() экспорт
		
		НачатьТранзакцию();
		
		Попытка
			СоздатьЗаявкиДля1С();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
		КонецПопытки;
		
		ОтменитьТранзакцию();
		
	КонецПроцедуры

	Процедура ТестСоздатьЗаявкиПоДокументамДляОтправкиВТранзит() экспорт
		
		НачатьТранзакцию();
		
		Попытка
			//СоздатьЗаявкиПоДокументамДляОтправкиВТранзит();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
		КонецПопытки;
		
		ОтменитьТранзакцию();
		
	КонецПроцедуры

	Процедура ТестВыгрузитьДанные() экспорт
		
		НачатьТранзакцию();
		
		Попытка
			
			//СоздатьЗаявкиПоДокументамДляОтправкиВТранзит();
			ВыгрузитьДанные();
			
		Исключение
			ОтменитьТранзакцию();
		    ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
		КонецПопытки; 
		
		ОтменитьТранзакцию();
		
	КонецПроцедуры

	Процедура ТестПолучитьЗаявкиВОбработке() экспорт
		
		Результат = Неопределено;
		
		Попытка
			Результат = ПолучитьЗаявкиВОбработке();
		Исключение
			ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки();     
		КонецПопытки;
		
		Утверждения.ПроверитьИстину(Результат <> Неопределено);
		
	КонецПроцедуры 

	Процедура ТестПолучитьСтатусыЗаявокИзТранзитнойБазы() экспорт
		
		Попытка
			ПолучитьСтатусыЗаявокИзТранзитнойБазы();
		Исключение
		    ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
		КонецПопытки;	
		
	КонецПроцедуры 

	Процедура ТестЗагрузитьДанные() экспорт
		
		НачатьТранзакцию();
		Попытка
			ЗагрузитьДанные();
		Исключение
			ОтменитьТранзакцию();
		    ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
		КонецПопытки;	
		
		ОтменитьТранзакцию();
		
	КонецПроцедуры

	Процедура ТестОбработатьЗаявкиДля1С() экспорт
	
	НачатьТранзакцию();
	
	Попытка
		ОбработатьЗаявкиДля1С();
	Исключение
		ОтменитьТранзакцию();
	    ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
	КонецПопытки;	
	
	ОтменитьТранзакцию();
	
КонецПроцедуры 

	Процедура ТестСоздатьРасходныйСкладскойОрдер(ДокументОснование)
		
		НачатьТранзакцию();
		
		Попытка
			СоздатьРасходныйСкладскойОрдер(Новый Структура("Ссылка, Состояние", ДокументОснование, "SHIPPED"));
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение "АВТОТЕСТЫ |  "+ОписаниеОшибки(); 
		КонецПопытки;	
		
		ОтменитьТранзакцию();	
		
	КонецПроцедуры
		 
//Тест для создания документов

#КонецОбласти 
  

#КонецОбласти 

Инициализация();
