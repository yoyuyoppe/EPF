
Перем ИдСтруктурыМатериалов, ИдентификаторФЗ, АдресСпискаДокументов, АдресТаблицыДляОбработкиОшибок;

#Область ОбработчикиСобытийФормы

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ВладелецФормы.ОбработкаОбъект.Соединение = Неопределено Тогда
		Сообщить("Дальнейшая работа невозможна по причине: не установлено соединение с базой WMS", СтатусСообщения.Внимание);
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьВидыОстатков(Отказ);
	ЗаполнитьВладельцевЗапасов(Отказ);
	ЗаполнитьГруппыМатериалов(Отказ);
	ЗаполнитьЗоныХранения(Отказ);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

Процедура пВидыОстатковНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидыОстатков.ЗаполнитьПометки(Ложь);
	
	ВидыОстатков.ОтметитьЭлементы("Виды остатков WMS");
	
	Для каждого ЭлСписка Из ВидыОстатков Цикл
		Если ЭлСписка.Пометка Тогда
			пВидыОстатков.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура пВладельцыЗапасовНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ВладельцыЗапасов.ЗаполнитьПометки(Ложь);
	
	ВладельцыЗапасов.ОтметитьЭлементы("Владельцы запасов в WMS");
	
	Для каждого ЭлСписка Из ВладельцыЗапасов Цикл
		Если ЭлСписка.Пометка Тогда
			пВладельцыЗапасов.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура пМатериалыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбораНоменклатуры = Справочники.Номенклатура.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбораНоменклатуры.ЗакрыватьПриВыборе  = Ложь;
	ФормаВыбораНоменклатуры.Открыть();
		
КонецПроцедуры

Процедура пМатериалыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Попытка
		ЗаполнитьМатериал(ВыбранноеЗначение);
	Исключение
	    Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось получить данные о материале из WMS по причине: %1", ОписаниеОшибки()));
	КонецПопытки; 
	
КонецПроцедуры

Процедура пГруппыМатериаловНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ГруппыМатериалов.ЗаполнитьПометки(Ложь);
	
	ГруппыМатериалов.ОтметитьЭлементы("Группы материлов в WMS");
	
	Для каждого ЭлСписка Из ГруппыМатериалов Цикл
		Если ЭлСписка.Пометка Тогда
			пГруппыМатериалов.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

Процедура кнРаспределитьПоДокументамНажатие(Элемент)
	
	Лог1с = ВладелецФормы.ОбработкаОбъект.Лог1С;
	
	Лог1с.Вывести("Запущено распределение обработанных строк по описям", СтатусСообщения.БезСтатуса);
	
	тзОбработкиОшибок.Свернуть("Обработана, ВладелецЗапаса, ЗонаWMS, Ячейка, Номенклатура, НаименованиеМатериала, ЕдиницаИзмерения, Коэффициент, ЕдиницаWMS, СерияНоменклатуры, ДатаПроизводства, Качество", "Количество");
	
	ТаблицаСТехноЗонами = тзОбработкиОшибок.Скопировать(, "ВладелецЗапаса, ЗонаWMS");
	ТаблицаСТехноЗонами.Свернуть("ВладелецЗапаса, ЗонаWMS");
	
	Для каждого СтрТаб Из ТаблицаСТехноЗонами Цикл
				
		Лог1С.Вывести("Распределение строк (Владелец запасов: {0}, Зона: {1})", СтатусСообщения.Информация, СтрТаб.ВладелецЗапаса, СтрТаб.ЗонаWMS);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ИнвентаризационнаяОпись.Ссылка) КАК Ссылка
		|ИЗ
		|	Документ.ИнвентаризационнаяОпись КАК ИнвентаризационнаяОпись
		|ГДЕ
		|   ИнвентаризационнаяОпись.Склад = &Склад
		|	И ИнвентаризационнаяОпись.Комментарий ПОДОБНО ""%""+&ВладелецЗапасов+""%""
		|	И ИнвентаризационнаяОпись.Комментарий ПОДОБНО ""%""+&ТехноЗона+""%""";
		
		Запрос.УстановитьПараметр("Склад", Справочники.Склады.НайтиПоКоду("Ц00223")); 
		Запрос.УстановитьПараметр("ВладелецЗапасов", СтрТаб.ВладелецЗапаса); 
		Запрос.УстановитьПараметр("ТехноЗона", СтрТаб.ЗонаWMS); 
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ДокОбъект = Неопределено;
		
		Если ВыборкаДетальныеЗаписи.Следующий() тогда
			ДокОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		Если ДокОбъект = Неопределено Тогда
			Лог1С.Вывести("Не удалось найти подходящий документ", СтатусСообщения.ОченьВажное);
			Продолжить;
		КонецЕсли; 
		
		мОстаткиТекущейЗоны = тзОбработкиОшибок.НайтиСтроки(Новый Структура("Обработана, ВладелецЗапаса, ЗонаWMS",  Истина, СтрТаб.ВладелецЗапаса, СтрТаб.ЗонаWMS));
		
		Для каждого ЭлМассива Из мОстаткиТекущейЗоны Цикл
			
			НовСтр = ДокОБъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ЭлМассива);
			
			Лог1С.Вывести("В документ {0} добавлена строка с номенклатурой '{1}' и серией '{2}'", СтатусСообщения.Внимание, 
				ДокОбъект.Ссылка, ЭлМассива.Номенклатура, ЭлМассива.СерияНоменклатуры);
				
		КонецЦикла; 
			
		Попытка
			ДокОбъект.Записать();
			// Удалим распределенные строки
			Для каждого ЭлМассива Из мОстаткиТекущейЗоны Цикл
				тзОбработкиОшибок.Удалить(ЭлМассива);
			КонецЦикла; 
		Исключение
		    Лог1С.Вывести("Не удалось записать документ {0} по причине: {1}", СтатусСообщения.ОченьВажное, ДокОбъект.Ссылка, ОписаниеОшибки());
		КонецПопытки;	
		
	КонецЦикла; 
	
	Лог1с.Вывести("Распределение обработанных строк по описям завершено", СтатусСообщения.БезСтатуса);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыВыполнить(Кнопка)
	
	ПараметрыОтчета = Новый Структура; 
	
	ЗаполнитьПараметрыОтчета(ПараметрыОтчета);
	
	ЗаполнитьДополнительныеПараметры(ВладелецФормы.ОбработкаОбъект.ДополнительныеПараметры);
			
	// ЗапуститьДлительнуюОперацию(ПараметрыОтчета); пока не работает
	НачатьТранзакцию();
	Попытка
		ВладелецФормы.ОбработкаОбъект.ПолучитьЗапасыНаСкладеИзWMS(ПараметрыОтчета, ТолькоПросмотр);
	Исключение
		ОтменитьТранзакцию();
	    Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
	ЗафиксироватьТранзакцию();
	
	ОтобразитьРезультат();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДополнительныеПараметры(ДополнительныеПараметры)
	
	ДополнительныеПараметры = ВладелецФормы.ОбработкаОбъект.ДополнительныеПараметры;
	
	ДополнительныеПараметры = Новый Структура("СписокДокументов, ОбработкаОшибокПоЗагрузкеОписей, НовыеСерии, ЗоныХранения", 
		Новый СписокЗначений, тзОбработкиОшибок, тзНовыеСерии, пЗоныХранения);
	
КонецПроцедуры
 
Процедура ЗаполнитьПараметрыОтчета(ПараметрыОтчета)
	
	Если ЗначениеЗаполнено(пВладельцыЗапасов) Тогда 
		ПараметрыОтчета.Вставить("Owner", ПреобразоватьЗначенияСпискаВСтроку(пВладельцыЗапасов));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(пМатериалы) Тогда 
		ПараметрыОтчета.Вставить("Materials", ПреобразоватьЗначенияСпискаВСтроку(пМатериалы));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(пМатериалы) Тогда 
		ПараметрыОтчета.Вставить("StockTypes", ПреобразоватьЗначенияСпискаВСтроку(пВидыОстатков));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(пГруппыМатериалов) Тогда
		ПараметрыОтчета.Вставить("MaterialGroups", ПреобразоватьЗначенияСпискаВСтроку(пГруппыМатериалов));	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапуститьДлительнуюОперацию(ПараметрыОтчета)
	
	АдресСпискаДокументов = ПоместитьВоВременноеХранилище(""); // Здесь будут хранится созданные описи
	
	АдресТаблицыДляОбработкиОшибок = ПоместитьВоВременноеХранилище(""); // Здесь будет хранится таб. часть обработки ОбработкаОшибокПоЗагрузкеОписей
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрыОтчета);
	МассивПараметров.Добавить(ТолькоПросмотр);
	МассивПараметров.Добавить(АдресСпискаДокументов);
	МассивПараметров.Добавить(АдресТаблицыДляОбработкиОшибок);
	
	НаименованиеЗадания = ?(ТолькоПросмотр, "Сформировать отчет по запасам WMS", "Создать инвентаризационные описи");
	Ключ = ОбщиеФункции._СтрШаблон_("%1_%2", ПараметрыСеанса.ТекущийПользователь.Идентификатор, ?(ТолькоПросмотр, "Отчет", "СоздатьОписи"));
	
	ФонЗадание = ФоновыеЗадания.Выполнить("Обмен_1С_Транзит.ПолучитьЗапасыНаСкладеИзWMS", МассивПараметров, Ключ, НаименованиеЗадания);
	ИдентификаторФЗ = ФонЗадание.УникальныйИдентификатор;
	ПодключитьОбработчикОжидания("ОтобразитьРезультатФонового", 5, Истина);
	
КонецПроцедуры
 
Процедура ОтобразитьРезультат()
	
	Сообщить("Операция завершена", СтатусСообщения.Информация);
	
	СписокДокументов = ВладелецФормы.ОбработкаОбъект.ДополнительныеПараметры.СписокДокументов;
	
	Если ТипЗнч(СписокДокументов) = Тип("СписокЗначений")
		И СписокДокументов.Количество() > 0 Тогда
		
		ФормаСпискаОписей = Документы.ИнвентаризационнаяОпись.ПолучитьФормуСписка();
		ФормаСпискаОписей.ДокументСписок.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
		ФормаСпискаОписей.ДокументСписок.Отбор.Ссылка.Значение = СписокДокументов;
		ФормаСпискаОписей.ДокументСписок.Отбор.Ссылка.Использование = истина;
		ФормаСпискаОписей.Открыть();
		
	КонецЕсли; 
	
	//втТабЗнач = ВладелецФормы.ОбработкаОбъект.ДополнительныеПараметры.ОбработкаОшибокПоЗагрузкеОписей;
	
	//Если ТипЗнч(втТабЗнач) = Тип("ТаблицаЗначений") тогда
	//	
	//	Для каждого СтрТаб Из втТабЗнач Цикл
	//		НовСтр = тзОбработкиОшибок.Добавить();
	//		ЗаполнитьЗначенияСвойств(НовСтр, СтрТаб);
	//	КонецЦикла;	
	//	
	//КонецЕсли;
	
	//втТабЗнач = ВладелецФормы.ОбработкаОбъект.ДополнительныеПараметры.НовыеСерии;
	
	//Если ТипЗнч(втТабЗнач) = Тип("ТаблицаЗначений") тогда
	//	
	//	Для каждого СтрТаб Из втТабЗнач Цикл
	//		НовСтр = тзНовыеСерии.Добавить();
	//		ЗаполнитьЗначенияСвойств(НовСтр, СтрТаб);
	//	КонецЦикла;	
	//	
	//КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьРезультатФонового()
	
	//ФонЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ИдентификаторФЗ));
	//
	//Если ФонЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
	//	
	//	СообщенияПользователя = ФонЗадание.ПолучитьСообщенияПользователю(Истина);
	//	
	//	Для каждого ЭлМассива Из СообщенияПользователя Цикл
	//		ЭлМассива.Сообщить();
	//	КонецЦикла; 
	//	
	//	ПодключитьОбработчикОжидания("ОтобразитьРезультат", 5, Истина);
	//	
	//ИначеЕсли ФонЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда 	
	//	
	//	Сообщить("Операция завершена", СтатусСообщения.Информация);
	//	
	//	СписокДокументов = ПолучитьИзВременногоХранилища(АдресСпискаДокументов);
	//	
	//	УдалитьИзВременногоХранилища(АдресСпискаДокументов);
	//	
	//	Если ТипЗнч(СписокДокументов) = Тип("СписокЗначений")
	//		И СписокДокументов.Количество() > 0 Тогда
	//		
	//		ФормаСпискаОписей = Документы.ИнвентаризационнаяОпись.ПолучитьФормуСписка();
	//		ФормаСпискаОписей.ДокументСписок.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	//		ФормаСпискаОписей.ДокументСписок.Отбор.Ссылка.Значение = СписокДокументов;
	//		ФормаСпискаОписей.ДокументСписок.Отбор.Ссылка.Использование = истина;
	//		ФормаСпискаОписей.Открыть();
	//		
	//	КонецЕсли; 
	//			
	//	втТабЗнач = ПолучитьИзВременногоХранилища(АдресТаблицыДляОбработкиОшибок);
	//	
	//	УдалитьИзВременногоХранилища(АдресТаблицыДляОбработкиОшибок);
	//	
	//	Если ТипЗнч(СписокДокументов) = Тип("ТаблицаЗначений") тогда
	//		
	//		Для каждого СтрТаб Из втТабЗнач Цикл
	//			НовСтр = тзОбработкиОшибок.Добавить();
	//			ЗаполнитьЗначенияСвойств(НовСтр, СтрТаб);
	//		КонецЦикла;	
	//		
	//	КонецЕсли;
	//	
	//ИначеЕсли ФонЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда 	
	//	
	//	СообщенияПользователя = ФонЗадание.ПолучитьСообщенияПользователю(Истина);
	//	
	//	Для каждого ЭлМассива Из СообщенияПользователя Цикл
	//		ЭлМассива.Сообщить();
	//	КонецЦикла;
	//	
	//	Сообщить("Операция завершена с ошибками по причине: "+ФонЗадание.ИнформацияОбОшибке.Описание, СтатусСообщения.ОченьВажное);
	//	
	//КонецЕсли; 
		
	
КонецПроцедуры 

Функция ПреобразоватьЗначенияСпискаВСтроку(ТекущийСписок)
	
	_ЗначенияСпискаВСтроке = "";
	
	Для каждого ЭлСписка Из ТекущийСписок Цикл
		_ЗначенияСпискаВСтроке = _ЗначенияСпискаВСтроке + ОбщиеФункции._СтрШаблон_("%1%2", ?(_ЗначенияСпискаВСтроке = "", "", ","), ЭлСписка.Значение);		
	КонецЦикла;
	
	Возврат _ЗначенияСпискаВСтроке;
	
КонецФункции

Процедура ЗаполнитьГруппыМатериалов(Отказ)
	
	Попытка
		Результат = ВладелецФормы.ОбработкаОбъект.ВыполнитьКоманду("select mg.tid, mg.NameRU from LEADWMS.dbo.MaterialGroups as mg");
	Исключение
		СообщитьОбОшибке(ОбщиеФункции._СтрШаблон_("Не удалось получить данные о группах материалов из WMS по причине: %1", ОписаниеОшибки()), Отказ,, СтатусСообщения.ОченьВажное);
		Возврат;
	КонецПопытки;
	
	Пока НЕ Результат.EOF Цикл
		
		ГруппыМатериалов.Добавить(Формат(Результат.Fields("tid").Value, "ЧГ=0"), Результат.Fields("NameRU").Value);
		
		Результат.MoveNext();
		
	КонецЦикла;
	
КонецПроцедуры
 
Процедура ЗаполнитьМатериал(Номенклатура1С)
	
	Если ИдСтруктурыМатериалов = Неопределено Тогда
		
		Результат = ВладелецФормы.ОбработкаОбъект.ВыполнитьКоманду("select ParameterType_id from LEADWMS.dbo.Structures where Identifier = 'Materials'");
		
		Пока НЕ Результат.EOF Цикл
			ИдСтруктурыМатериалов = Результат.Fields("ParameterType_id").Value;	
			Результат.MoveNext();
		КонецЦикла;
		
	КонецЕсли; 
			
	КодВыбраннойНоменклатуры_1С = ОбщиеФункции._СтрШаблон_("'%1'", Номенклатура1С.УникальныйИдентификатор());		
	
	Результат = ВладелецФормы.ОбработкаОбъект.ВыполнитьКоманду(ОбщиеФункции._СтрШаблон_("select LocalValue from LEADWMS.dbo.temp_ElementIntegration_%1 where TargetValue = %2",
		ИдСтруктурыМатериалов, КодВыбраннойНоменклатуры_1С)
	);
	
	КодМатериала_WMS = "";
	Пока НЕ Результат.EOF Цикл
		
		КодМатериала_WMS = Результат.Fields("LocalValue").Value;
		Результат.MoveNext();
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(КодМатериала_WMS) Тогда
		Сообщить("В базе WMS не найден товар "+Номенклатура1С, СтатусСообщения.ОченьВажное);	
	Иначе
		Если пМатериалы.НайтиПоЗначению(КодМатериала_WMS) = Неопределено Тогда
			пМатериалы.Добавить(Формат(КодМатериала_WMS, "ЧГ=0"), СокрЛП(Номенклатура1С.Наименование));
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры
 
Процедура ЗаполнитьВидыОстатков(Отказ)
	
	Попытка
		Результат = ВладелецФормы.ОбработкаОбъект.ВыполнитьКоманду("select st.tid, st.NameRU from LEADWMS.dbo.StockTypes as st");
	Исключение
		СообщитьОбОшибке(ОбщиеФункции._СтрШаблон_("Не удалось получить данные о видах остатков из WMS по причине: %1", ОписаниеОшибки()), Отказ,, СтатусСообщения.ОченьВажное);
		Возврат;
	КонецПопытки;
	
	Пока НЕ Результат.EOF Цикл
		
		ВидыОстатков.Добавить(Формат(Результат.Fields("tid").Value, "ЧГ=0"), Результат.Fields("NameRU").Value);
		
		Результат.MoveNext();
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаполнитьВладельцевЗапасов(Отказ)
	
	Попытка
		Результат = ВладелецФормы.ОбработкаОбъект.ВыполнитьКоманду("select tid, FullName from LEADWMS.dbo.Debtors where DebtorGroup_id = 1 and FullName like 'Кластер%'");
	Исключение
		СообщитьОбОшибке(ОбщиеФункции._СтрШаблон_("Не удалось получить данные о владельцах запасов из WMS по причине: %1", ОписаниеОшибки()), Отказ,, СтатусСообщения.ОченьВажное);
		Возврат;
	КонецПопытки;
	
	Пока НЕ Результат.EOF Цикл
		
		ВладельцыЗапасов.Добавить(Формат(Результат.Fields("tid").Value, "ЧГ=0"), Результат.Fields("FullName").Value);
		
		Результат.MoveNext();
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьЗоныХранения(Отказ)
	
	Попытка
		Результат = ВладелецФормы.ОбработкаОбъект.ВыполнитьКоманду("select tid, NameRU from LEADWMS.dbo.TechnoZones");
	Исключение
		СообщитьОбОшибке(ОбщиеФункции._СтрШаблон_("Не удалось получить данные о зонах хранения из WMS по причине: %1", ОписаниеОшибки()), Отказ,, СтатусСообщения.ОченьВажное);
		Возврат;
	КонецПопытки;
	
	Пока НЕ Результат.EOF Цикл
		
		//ЗоныХранения.Добавить(Формат(Результат.Fields("tid").Value, "ЧГ=0"), Результат.Fields("NameRU").Value);
		ЗоныХранения.Добавить(Результат.Fields("NameRU").Value);
		
		Результат.MoveNext();
		
	КонецЦикла;
	
	ЗоныХранения.ЗаполнитьПометки(Истина);
	
КонецПроцедуры

Процедура пЗоныХраненияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗоныХранения.ОтметитьЭлементы("Зоны хранения в WMS");
	
	Для каждого ЭлСписка Из ЗоныХранения Цикл
		Если ЭлСписка.Пометка Тогда
			пЗоныХранения.Добавить(ЭлСписка.Значение);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры
 
#КонецОбласти
