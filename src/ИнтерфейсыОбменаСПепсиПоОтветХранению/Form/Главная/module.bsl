
#Область ОбработчикиСобытийФормы

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтруктураЗаписи = Новый Структура("Объект, Свойство, Значение", Партнер, "ДатаПоследнегоОбмена", ТекущаяДатаСеанса());
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		РегистрыСведений.ДополнительныеРеквизиты_3PL.ДобавитьЗапись(СтруктураЗаписи);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = 1 Тогда
		
		НастройкиОбмена.Отбор.Объект.Установить(Партнер);
		
		СписокДоступныхСвойств = Новый СписокЗначений;
		СписокДоступныхСвойств.Добавить("ГруппаНоменклатуры");
		СписокДоступныхСвойств.Добавить("Склад");
		СписокДоступныхСвойств.Добавить("Контракт");
		СписокДоступныхСвойств.Добавить("ДатаПоследнегоОбмена");
		СписокДоступныхСвойств.Добавить("ДатаПоследнегоОбменаПоДокументам");
		СписокДоступныхСвойств.Добавить("ДатаПоследнегоОбменаПоМатериалам");
		СписокДоступныхСвойств.Добавить("ДатаПоследнегоОбменаПоПартиям");
		СписокДоступныхСвойств.Добавить("КаталогХраненияПечатныхФорм");
		СписокДоступныхСвойств.Добавить("ОсновнаяОрганизация");
		СписокДоступныхСвойств.Добавить("ОсновноеПодразделение");
		СписокДоступныхСвойств.Добавить("ОсновнойВидПоставки");
		СписокДоступныхСвойств.Добавить("ОсновнойДоговорПриемаНаХранение");
		СписокДоступныхСвойств.Добавить("ОсновнойПоставщик");
		СписокДоступныхСвойств.Добавить("ОсновнойТипЦенКонтрагента");
		СписокДоступныхСвойств.Добавить("ЗагрузитьПоставкуСНомером");
		
		НастройкиОбмена.Отбор.Свойство.ВидСравнения = ВидСравнения.ВСписке;
		НастройкиОбмена.Отбор.Свойство.Значение = СписокДоступныхСвойств;
		НастройкиОбмена.Отбор.Свойство.Использование = Истина;
			
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьСписокПартнеров()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеРеквизиты_3PL.Объект
	|ИЗ
	|	РегистрСведений.ДополнительныеРеквизиты_3PL КАК ДополнительныеРеквизиты_3PL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Объект) Тогда
			Продолжить;
		КонецЕсли; 
		
		СписокПартнеров.Добавить(Выборка.Объект);
		
	КонецЦикла;
	
КонецПроцедуры
 
Процедура ПартнерНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
    ВыбЭлемент = СписокПартнеров.ВыбратьЭлемент("Выберите партнера по ответ. хранению");
	
	Партнер = ВыбЭлемент.Значение;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ЗаполнитьСписокПартнеров();
	
	НачалоПериода = ТекущаяДатаСеанса();
	КонецПериода = ТекущаяДатаСеанса();
	
КонецПроцедуры

Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбновитьТаблицуРабочегоМестаОператора();
	
КонецПроцедуры

Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОбновитьТаблицуРабочегоМестаОператора();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

Процедура КоманднаяПанельЗаказыПоставщикуОбновитьТаблицуЗаказовПоставщику(Кнопка)
	
	ОбновитьТаблицуРабочегоМестаОператора();
	
КонецПроцедуры

Процедура КоманднаяПанельКоманднаяПанельОТУОбновитьТаблицуОТУ(Кнопка)
	
	ОбновитьТаблицуРабочегоМестаОператора();
	
КонецПроцедуры

Процедура КоманднаяПанельМаршрутыОбновитьТаблицуМаршрутов(Кнопка)
	
	ОбновитьТаблицуРабочегоМестаОператора();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

Процедура КнопкаПолучитьНоменклатуруНажатие(Элемент)
	
	ОчиститьСообщения();
	ПолучитьНоменклатуру();
	Сообщить("Операция завершена", СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура КнопкаПолучитьПартииНажатие(Элемент)
	
	ОчиститьСообщения();
	ПолучитьПартии();
	Сообщить("Операция завершена", СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура КнопкаПолучитьДокументыНажатие(Элемент)
	
	ОчиститьСообщения();
	ПолучитьДокументы();
	Сообщить("Операция завершена", СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура КнопкаПолучитьТранспортировкиНажатие(Элемент)
	
	ОчиститьСообщения();
	ПолучитьТранспортировки();
	Сообщить("Операция завершена", СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура КнопкаПодтвердитьПоставкиНажатие(Элемент)
	ОчиститьСообщения();
	ПодтвердитьПоставки();
	Сообщить("Операция завершена", СтатусСообщения.Информация);
КонецПроцедуры

Процедура КнопкаОтправитьОстаткиНажатие(Элемент)
	
	ОчиститьСообщения();
	ОтправитьТекущиеОстатки();
	Сообщить("Операция завершена", СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура КнопкаОтправитьКорректировкиОстатковНажатие(Элемент)
	
	ОчиститьСообщения();
	ОтправитьКорректировкиОстатков();
	Сообщить("Операция завершена", СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура КнопкаОбновитьПоставкиНажатие(Элемент)
	
	ОчиститьСообщения();
	ОбновитьСтатусыТранспортировок();
	Сообщить("Операция завершена", СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура КнопкаВыгрузитьМаршрутыНажатие(Элемент)
	
	ОчиститьСообщения();
	ВыгрузитьМаршрутыЭкспедиторов();
	Сообщить("Операция завершена", СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура КнопкаПолучитьПечатныеФормыНажатие(Элемент)
	
	ОчиститьСообщения();
	ПолучитьПечатныеФормы();
	Сообщить("Операция завершена", СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура КоманднаяПанельОТУСверкаПоставок(Кнопка)

	ТаблицаДанныхДляСверки = ПолучитьТаблицуДанныхДляСверки();
	
	Если ТаблицаДанныхДляСверки = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	ТаблицаДокументовОтгрузки = ОтгрузкиТоваровУслуг.Выгрузить(, "ДокументСсылка, НомерПоклажедателя");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСверка();
	Запрос.УстановитьПараметр("Источник", Строка(Партнер));
	Запрос.УстановитьПараметр("тзСверка", ТаблицаДанныхДляСверки);
	Запрос.УстановитьПараметр("ДатаПоставки", КонецПериода);
	Запрос.УстановитьПараметр("ДатаЗаписи", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Свойство_НомерВходящегоДокумента", ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьСвойствоПоИмени("НомерВходящегоДокумента"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Макет = ПолучитьМакет("СверкаПоставок");
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	ОбластьДетальныхЗаписейПометка = Макет.ПолучитьОбласть("ДеталиПометка");
	ОбластьДетальныхЗаписейЗагрузка = Макет.ПолучитьОбласть("ДеталиЗагрузка");
	
	ТабДок = Новый ТабличныйДокумент;
	
	ТабДок.Очистить();
	
	ОбластьЗаголовок.Параметры.ДатаОтгрузки = Формат(НачалоПериода, "ДФ=dd.MM.yyyy"); 
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
		Если ВыборкаДетальныеЗаписи.Действие ="Пометить на удаление" Тогда
			ВыводимаяОбласть = ОбластьДетальныхЗаписейПометка;
		ИначеЕсли ВыборкаДетальныеЗаписи.Действие ="Загрузить" Тогда
			ВыводимаяОбласть = ОбластьДетальныхЗаписейЗагрузка;
		Иначе
			ВыводимаяОбласть = ОбластьДетальныхЗаписей;
		КонецЕсли;
		
		ВыводимаяОбласть.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
		
		ТабДок.Вывести(ВыводимаяОбласть, ВыборкаДетальныеЗаписи.Уровень());
		
	КонецЦикла;
	
	ТабДок.Показать();
	
КонецПроцедуры


#КонецОбласти

#Область ОБРАБОТЧИКИ_ФАЙЛОВ

Функция ПолучитьСтавкуНДСИзСтроки(ВеличинаСтавки)

	ВеличинаСтавки = Число(ВеличинаСтавки);
	
	Если ВеличинаСтавки = 0 Тогда
		Возврат Перечисления.СтавкиНДС.НДС0;
	ИначеЕсли ВеличинаСтавки = 10 Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли ВеличинаСтавки = 18 Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли ВеличинаСтавки = 20 Тогда
		Возврат Перечисления.СтавкиНДС.НДС20;
	Иначе
		Возврат Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли
	
КонецФункции

Функция ФорматироватьВЧисло(Знач пЗнач)
	
	Если ЗначениеЗаполнено(пЗнач) Тогда
		пЗнач = Число(пЗнач);
	Иначе
		пЗнач = 0;
	КонецЕсли;
	
	Возврат пЗнач;
	
КонецФункции
 
Процедура ЗагрузитьКаталогТоваровВФорматеSPo1() Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Сообщить("Не выбран путь к файлу");
		Возврат;
	КонецЕсли; 
	
	Попытка
		Эксель = РаботаСЭксель.ПолучитьКомОбъект();
		Книга = Неопределено;
		РаботаСЭксель.ОткрытьКнигу(Эксель, Книга, ПутьКФайлу);
	Исключение
	    Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось открыть файл '%1' по причине: %2", ПутьКФайлу, ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
	
	Лист = Книга.Worksheets("PMDR");
	
	КолАртикул = 1;
	КолНаименование = 2;
	КолКатегория = 3;
	КолСтавкаНДС = 65;
	КолКоличествоПериодовГодности = 73;
	КолПериодГодности = 74;
	КолЛитраж = 70;
	КолШкШт = 85;
	КолГлубинаШт = 86;
	КолШиринаШт = 87;
	КолВысотаШт = 88;
	КолВесШт = 89;
	КолВесБруттоШт = 90;
	КолОбъемБруттоШт = 91;
	КолШкУпак = 102;
	КолКоэффициентУпак = 103;
	КолГлубинаУпак = 104;
	КолШиринаУпак = 105;
	КолВысотаУпак = 106;
	КолВесУпак = 107;
	КолВесБруттоУпак = 108;
	КолОбъемБруттоУпак = 109;
	
	Сч = 4;
	
	Товары.Очистить();
	
	КлассификаторЕдиницыШт = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
	КлассификаторЕдиницыУпак = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778");
	
	Пока Истина Цикл
		
		Артикул = Лист.cells(Сч, КолАртикул).Value;
		
		Если НЕ ЗначениеЗаполнено(Артикул) Тогда
			Прервать;
		КонецЕсли;
		
		НовСтр = Товары.Добавить();
		НовСтр.Артикул = Формат(Артикул, "ЧГ=0");
		НовСтр.Наименование = СокрЛП(Лист.cells(Сч, КолНаименование).Value);
		НовСтр.Категория = СокрЛП(Лист.cells(Сч, КолКатегория).Value);
		НовСтр.СтавкаНДС = ПолучитьСтавкуНДСИзСтроки(СокрЛП(Лист.cells(Сч, КолСтавкаНДС).Value));
		
		ОпределитьПериодГодности(ЛЕВ(СокрЛП(Лист.cells(Сч, КолПериодГодности).Value), 1), ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолКоличествоПериодовГодности).Value)), НовСтр.ПериодГодности, НовСтр.КоличествоПериодовГодности);
		
		НовСтр.Литраж = ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолЛитраж).Value));
		НовСтр.ШтрихкодШт = СокрЛП(Лист.cells(Сч, КолШкШт).Value);
		НовСтр.ГлубинаШт = ПересчитатьГабаритыВМетры(ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолГлубинаШт).Value)), "CM");
		НовСтр.ШиринаШт = ПересчитатьГабаритыВМетры(ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолШиринаШт).Value)), "CM");
		НовСтр.ВысотаШт = ПересчитатьГабаритыВМетры(ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолВысотаШт).Value)), "CM");
		НовСтр.ВесШт = ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолВесШт).Value));
		НовСтр.ВесБруттоШт = ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолВесБруттоШт).Value));
		НовСтр.ОбъемБруттоШт = Окр(НовСтр.ГлубинаШт * НовСтр.ШиринаШт * НовСтр.ВысотаШт, 6);
		НовСтр.КлассификаторЕдиницыШт = КлассификаторЕдиницыШт;
		
		НовСтр.ШтрихкодУпак = СокрЛП(Лист.cells(Сч, КолШкУпак).Value);
		НовСтр.КоэффициентУпак = ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолКоэффициентУпак).Value));
		НовСтр.ГлубинаУпак = ПересчитатьГабаритыВМетры(ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолГлубинаУпак).Value)), "CM");
		НовСтр.ШиринаУпак = ПересчитатьГабаритыВМетры(ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолШиринаУпак).Value)), "CM");
		НовСтр.ВысотаУпак = ПересчитатьГабаритыВМетры(ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолВысотаУпак).Value)), "CM");
		НовСтр.ВесУпак = ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолВесУпак).Value));
		НовСтр.ВесБруттоУпак = ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолВесБруттоУпак).Value));
		НовСтр.ОбъемБруттоУпак = Окр(НовСтр.ГлубинаУпак * НовСтр.ШиринаУпак * НовСтр.ВысотаУпак, 6);
		НовСтр.КлассификаторЕдиницыУпак = КлассификаторЕдиницыУпак;
		
		Сч = Сч + 1;
		
		//Если Сч = 10 Тогда
		//	Прервать;
		//КонецЕсли; 
		
	КонецЦикла; 
	
	Книга.Close();
	
	Эксель.Quit();
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуДанныхДляСверки()
	
	ДиалогВыбора = ПолучитьДиалогВыбора(РежимДиалогаВыбораФайла.Открытие, "Документ Microsoft Excel (*.xlsx)|*.xlsx|)"); 

	Если ДиалогВыбора.Выбрать() Тогда
		мПутьКФайлу = ДиалогВыбора.ПолноеИмяФайла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Прочитать(мПутьКФайлу);
	
	ОбластиТаб = ТабДок.Область(1, 1, ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы);
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластиТаб);  
	Построитель.Выполнить();
	
	ТабДанные = Построитель.Результат.Выгрузить();
	
	Возврат ТабДанные;
	
КонецФункции

Функция ПолучитьТекстЗапросаСверка()
	
	Возврат
	"ВЫБРАТЬ
	|	влЗапрос.Объект КАК ДокументСсылка,
	|	СвойстваОбъектов.Значение КАК НомерПоклажедателя
	|ПОМЕСТИТЬ втОтгрузкаТоваровУслугНаТекДату
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Объект КАК Объект
	|	ИЗ
	|		РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций
	|	ГДЕ
	|		ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Источник = &Источник
	|		И НАЧАЛОПЕРИОДА(ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДатаВремяПолученияЗаявкиСервисом, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ)
	|		И ТИПЗНАЧЕНИЯ(ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Объект) В (ТИП(Документ.ОтгрузкаТоваровУслуг), ТИП(Документ.ВозвратТоваровОтПокупателя))
	|		И ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Объект) = ТИП(Документ.ОтгрузкаТоваровУслуг)
	|					ТОГДА ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Объект.ДатаОтгрузки <= &ДатаПоставки
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ) КАК влЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваОбъектов
	|		ПО влЗапрос.Объект = СвойстваОбъектов.Объект
	|			И (СвойстваОбъектов.Свойство = &Свойство_НомерВходящегоДокумента)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сверка.Поставка
	|ПОМЕСТИТЬ втСверка
	|ИЗ
	|	&тзСверка КАК Сверка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втОтгрузкаТоваровУслуг.ДокументСсылка КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(втОтгрузкаТоваровУслуг.ДокументСсылка) КАК ДокументПредставление,
	|	ЕСТЬNULL(втОтгрузкаТоваровУслуг.НомерПоклажедателя, втСверка.Поставка) КАК НомерПоставки,
	|	ВЫБОР
	|		КОГДА втОтгрузкаТоваровУслуг.НомерПоклажедателя ЕСТЬ NULL
	|			ТОГДА ""Загрузить""
	|		КОГДА втСверка.Поставка ЕСТЬ NULL
	|			ТОГДА ""Пометить на удаление""
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Действие
	|ИЗ
	|	втОтгрузкаТоваровУслугНаТекДату КАК втОтгрузкаТоваровУслуг
	|		ПОЛНОЕ СОЕДИНЕНИЕ втСверка КАК втСверка
	|		ПО втОтгрузкаТоваровУслуг.НомерПоклажедателя = втСверка.Поставка
	|
	|УПОРЯДОЧИТЬ ПО
	|	втОтгрузкаТоваровУслуг.ДокументСсылка.ДатаОтгрузки";
	
КонецФункции

Функция ПолучитьДиалогВыбора(Режим, Фильтр, НачальныйКаталог = Неопределено, 
	Заголовок = "Выберите файл...", ПредварительныйПросмотр = Ложь, МножественныйВыбор = Ложь, ПроверятьСуществованиеФайла = Истина)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(Режим);
	ДиалогВыбора.Фильтр = Фильтр;
	ДиалогВыбора.Каталог = НачальныйКаталог;
	ДиалогВыбора.Заголовок = "Выберите файл...";
	ДиалогВыбора.ПредварительныйПросмотр = ПредварительныйПросмотр;
	ДиалогВыбора.ПроверятьСуществованиеФайла = ПроверятьСуществованиеФайла;
	ДиалогВыбора.МножественныйВыбор = МножественныйВыбор;
	
	Возврат ДиалогВыбора;
	
КонецФункции

Функция ПолучитьТекстЗапросаПоЗаказамПоставщику()
	
	Возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПоставщику.Ссылка КАК ДокументСсылка,
	|	ЗаказПоставщику.ДатаПоступления КАК ДатаПоставки,
	|	ЕСТЬNULL(СвойстваОбъектов.Значение, """") КАК НомерПоклажедателя,
	|	ЖурналЗаявок.Статус,
	|	ЗаказПоставщику.Вес КАК ОбщийВес,
	|	ЗаказПоставщику.Объем КАК ОбщийОбъем,
	|	ВЫРАЗИТЬ(ЗаказПоставщику.Комментарий КАК СТРОКА(500)) КАК Комментарий
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК Состав
	|		ПО ЗаказПоставщику.Ссылка = Состав.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваОбъектов
	|		ПО ЗаказПоставщику.Ссылка = СвойстваОбъектов.Объект
	|			И (СвойстваОбъектов.Свойство = &Свойство_НомерВходящегоДокумента)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналЗаявок
	|		ПО ЗаказПоставщику.Ссылка = ЖурналЗаявок.Объект
	|			И (ЖурналЗаявок.Источник = &Партнер)
	|			И (ЖурналЗаявок.Идентификатор = ""Входящая"")
	|ГДЕ
	|	ЗаказПоставщику.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|{ГДЕ
	|	ЗаказПоставщику.ДоговорКонтрагента.* КАК ОсновнойДоговорПриемаНаХранение,
	|	ЗаказПоставщику.Склад.*,
	|	Состав.Номенклатура.* КАК ГруппаНоменклатуры}
	|{УПОРЯДОЧИТЬ ПО
	|	ЗаказПоставщику.Дата}";
	
КонецФункции

Функция ПолучитьТекстЗапросаПоОтгрузкаТоваровУслуг()
	
	Возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЖурналЗаявок.Статус,
	|	СостояниеДокументов.Состояние,
	|	ОтгрузкаТоваровУслуг.Ссылка КАК ДокументСсылка,
	|	ОтгрузкаТоваровУслуг.ДатаОтгрузки КАК ДатаПоставки,
	|	ОтгрузкаТоваровУслуг.Контрагент,
	|	ОтгрузкаТоваровУслуг.СтруктурнаяЕдиницаКонтрагента,
	|	ОтгрузкаТоваровУслуг.ГруппаДоставки,
	|	ОтгрузкаТоваровУслуг.СпособРасчетов,
	|   ОтгрузкаТоваровУслуг.Склад,
	|	ЕСТЬNULL(СвойстваОбъектов.Значение, """") КАК НомерПоклажедателя,
	|	ЕСТЬNULL(СвойстваОбъектов2.Значение, """") КАК НомерТранспортировки,
	|	СУММА(Состав.Количество * Состав.ЕдиницаИзмерения.ВесБрутто) КАК ОбщийВес,
	|	СУММА(Состав.Количество * Состав.ЕдиницаИзмерения.ОбъемБрутто) КАК ОбщийОбъем,
	|	ВЫРАЗИТЬ(ОтгрузкаТоваровУслуг.Комментарий КАК СТРОКА(500)) КАК Комментарий,
	|	МАКСИМУМ(ЛистОтбора.КоличествоПлан - ЛистОтбора.КоличествоФакт > 0) КАК ЕстьВычеркВОтборе,
	|	МАКСИМУМ(ИнвДоставкиТовары.ПричинаВозврата <> ЗНАЧЕНИЕ(Справочник.ПричиныВозвратовОтЭкспедиторов.ПустаяСсылка)) КАК ЕстьВычеркВЭкспедиции
	|ИЗ
	|	Документ.ОтгрузкаТоваровУслуг КАК ОтгрузкаТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровУслуг.Товары КАК Состав
	|		ПО ОтгрузкаТоваровУслуг.Ссылка = Состав.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналЗаявок
	|		ПО ОтгрузкаТоваровУслуг.Ссылка = ЖурналЗаявок.Объект
	|			И (ЖурналЗаявок.Источник = &Партнер)
	|			И (ЖурналЗаявок.Идентификатор = ""Исходящая"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеДокументовОтгрузки.СрезПоследних КАК СостояниеДокументов
	|		ПО ОтгрузкаТоваровУслуг.Ссылка = СостояниеДокументов.ДокументОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваОбъектов
	|		ПО ОтгрузкаТоваровУслуг.Ссылка = СвойстваОбъектов.Объект
	|			И (СвойстваОбъектов.Свойство = &Свойство_НомерВходящегоДокумента)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваОбъектов2
	|		ПО ОтгрузкаТоваровУслуг.Ссылка = СвойстваОбъектов2.Объект
	|			И (СвойстваОбъектов2.Свойство = &Свойство_НомерПоДаннымПоставщика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтборЗапасовНаСкладе.ЗаказыНаОтгрузку КАК ЗаказыНаОтгрузку
	|		ПО ОтгрузкаТоваровУслуг.Ссылка = ЗаказыНаОтгрузку.ЗаказНаОтгрузку
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтборЗапасовНаСкладе.ЛистОтбора КАК ЛистОтбора
	|		ПО (ЗаказыНаОтгрузку.Ссылка = ЛистОтбора.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияДоставки КАК ИнвДоставки
	|		ПО ОтгрузкаТоваровУслуг.Ссылка = ИнвДоставки.ДокументОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияДоставки.Товары КАК ИнвДоставкиТовары
	|		ПО (ИнвДоставки.Ссылка = ИнвДоставкиТовары.Ссылка)
	|ГДЕ
	|	ОтгрузкаТоваровУслуг.ДатаОтгрузки МЕЖДУ &НачалоПериода И &КонецПериода
	|{ГДЕ
	|	ОтгрузкаТоваровУслуг.Склад.*,
	|	Состав.Номенклатура.* КАК ГруппаНоменклатуры,
	|	Состав.ДоговорВладельца.* КАК ОсновнойДоговорПриемаНаХранение}
	|
	|СГРУППИРОВАТЬ ПО
	|   ОтгрузкаТоваровУслуг.Склад,
	|	ОтгрузкаТоваровУслуг.Ссылка,
	|	СостояниеДокументов.Состояние,
	|	ОтгрузкаТоваровУслуг.ДатаОтгрузки,
	|	ЕСТЬNULL(СвойстваОбъектов.Значение, """"),
	|	ЕСТЬNULL(СвойстваОбъектов2.Значение, """"),
	|	ЖурналЗаявок.Статус,
	|	ВЫРАЗИТЬ(ОтгрузкаТоваровУслуг.Комментарий КАК СТРОКА(500)),
	|	ОтгрузкаТоваровУслуг.Контрагент,
	|	ОтгрузкаТоваровУслуг.СтруктурнаяЕдиницаКонтрагента,
	|	ОтгрузкаТоваровУслуг.ГруппаДоставки,
	|	ОтгрузкаТоваровУслуг.СпособРасчетов
	|{УПОРЯДОЧИТЬ ПО
	|	ОтгрузкаТоваровУслуг.Дата}";
	
КонецФункции

Функция ПолучитьТекстЗапросаПоЭкспедиции()
	
	Возврат "ВЫБРАТЬ
	|	ЖурналЗаявокПоМаршрутам.Статус,
	|	МаршрутЭкспедитора.Ссылка КАК ДокументСсылка,
	|	МаршрутЭкспедитора.ДатаЭкспедиции,
	|	МаршрутЭкспедитора.Транспорт,
	|	МаршрутЭкспедитора.ГотовКОтправкеВТранзит КАК ГотовКОтправке,
	|	ВЫБОР
	|		КОГДА НЕ МаршрутЭкспедитора.Водитель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА МаршрутЭкспедитора.Водитель
	|		ИНАЧЕ МаршрутЭкспедитора.Экспедитор
	|	КОНЕЦ КАК Водитель,
	|	ЕСТЬNULL(СвойстваОбъектов.Значение, """") КАК НомерТранспортировки,
	|	МаршрутЭкспедитора.ГруппаДоставки,
	|	ВЫРАЗИТЬ(МаршрутЭкспедитора.Комментарий КАК СТРОКА(500)) КАК Комментарий
	|ИЗ
	|	Документ.ОтгрузкаТоваровУслуг КАК ОтгрузкаТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровУслуг.Товары КАК Состав
	|		ПО ОтгрузкаТоваровУслуг.Ссылка = Состав.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналЗаявок
	|		ПО ОтгрузкаТоваровУслуг.Ссылка = ЖурналЗаявок.Объект
	|			И (ЖурналЗаявок.Источник = &Партнер)
	|			И (ЖурналЗаявок.Идентификатор = ""Исходящая"")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутЭкспедитора.ДокументыОснования КАК тчДокументыОснования
	|		ПО ОтгрузкаТоваровУслуг.Ссылка = тчДокументыОснования.ДокументОснование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутЭкспедитора КАК МаршрутЭкспедитора
	|		ПО (тчДокументыОснования.Ссылка = МаршрутЭкспедитора.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваОбъектов
	|		ПО ОтгрузкаТоваровУслуг.Ссылка = СвойстваОбъектов.Объект
	|			И (СвойстваОбъектов.Свойство = &Свойство_НомерПоДаннымПоставщика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналЗаявокПоМаршрутам
	|		ПО (тчДокументыОснования.Ссылка = ЖурналЗаявокПоМаршрутам.Объект)
	|			И (ЖурналЗаявокПоМаршрутам.Приемник = &Партнер)
	|ГДЕ
	|	ОтгрузкаТоваровУслуг.ДатаОтгрузки МЕЖДУ &НачалоПериода И &КонецПериода
	|{ГДЕ
	|	ОтгрузкаТоваровУслуг.Склад.*,
	|	Состав.ДоговорВладельца.* КАК ОсновнойДоговорПриемаНаХранение,
	|	Состав.Номенклатура.* КАК ГруппаНоменклатуры}
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналЗаявокПоМаршрутам.Статус,
	|	МаршрутЭкспедитора.Ссылка,
	|	ЕСТЬNULL(СвойстваОбъектов.Значение, """"),
	|	МаршрутЭкспедитора.ДатаЭкспедиции,
	|	МаршрутЭкспедитора.Транспорт,
	|	ВЫБОР
	|		КОГДА НЕ МаршрутЭкспедитора.Водитель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА МаршрутЭкспедитора.Водитель
	|		ИНАЧЕ МаршрутЭкспедитора.Экспедитор
	|	КОНЕЦ,
	|	МаршрутЭкспедитора.ГруппаДоставки,
	|	ВЫРАЗИТЬ(МаршрутЭкспедитора.Комментарий КАК СТРОКА(500)),
	|	МаршрутЭкспедитора.ГотовКОтправкеВТранзит
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЖурналЗаявокПоМаршрутам.Статус,
	|	МаршрутЭкспедитора.Ссылка,
	|	МаршрутЭкспедитора.ДатаЭкспедиции,
	|	МаршрутЭкспедитора.Транспорт,
	|	МаршрутЭкспедитора.ГотовКОтправкеВТранзит,
	|	ВЫБОР
	|		КОГДА НЕ МаршрутЭкспедитора.Водитель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА МаршрутЭкспедитора.Водитель
	|		ИНАЧЕ МаршрутЭкспедитора.Экспедитор
	|	КОНЕЦ,
	|	ЕСТЬNULL(СвойстваОбъектов.Значение, """"),
	|	МаршрутЭкспедитора.ГруппаДоставки,
	|	ВЫРАЗИТЬ(МаршрутЭкспедитора.Комментарий КАК СТРОКА(500))
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК Состав
	|		ПО ВозвратТоваровОтПокупателя.Ссылка = Состав.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналЗаявок
	|		ПО ВозвратТоваровОтПокупателя.Ссылка = ЖурналЗаявок.Объект
	|			И (ЖурналЗаявок.Источник = &Партнер)
	|			И (ЖурналЗаявок.Идентификатор = ""Входящая"")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутЭкспедитора.ДокументыОснования КАК тчДокументыОснования
	|		ПО ВозвратТоваровОтПокупателя.Ссылка = тчДокументыОснования.ДокументОснование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутЭкспедитора КАК МаршрутЭкспедитора
	|		ПО (тчДокументыОснования.Ссылка = МаршрутЭкспедитора.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваОбъектов
	|		ПО ВозвратТоваровОтПокупателя.Ссылка = СвойстваОбъектов.Объект
	|			И (СвойстваОбъектов.Свойство = &Свойство_НомерПоДаннымПоставщика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналЗаявокПоМаршрутам
	|		ПО (тчДокументыОснования.Ссылка = ЖурналЗаявокПоМаршрутам.Объект)
	|			И (ЖурналЗаявокПоМаршрутам.Приемник = &Партнер)
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|{ГДЕ
	|	ВозвратТоваровОтПокупателя.Склад.*,
	|	Состав.Номенклатура.* КАК ГруппаНоменклатуры}
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналЗаявокПоМаршрутам.Статус,
	|	МаршрутЭкспедитора.Ссылка,
	|	ЕСТЬNULL(СвойстваОбъектов.Значение, """"),
	|	МаршрутЭкспедитора.ДатаЭкспедиции,
	|	МаршрутЭкспедитора.Транспорт,
	|	ВЫБОР
	|		КОГДА НЕ МаршрутЭкспедитора.Водитель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА МаршрутЭкспедитора.Водитель
	|		ИНАЧЕ МаршрутЭкспедитора.Экспедитор
	|	КОНЕЦ,
	|	МаршрутЭкспедитора.ГруппаДоставки,
	|	ВЫРАЗИТЬ(МаршрутЭкспедитора.Комментарий КАК СТРОКА(500)),
	|	МаршрутЭкспедитора.ГотовКОтправкеВТранзит
	|{УПОРЯДОЧИТЬ ПО
	|	МаршрутЭкспедитора.Дата}";
	
КонецФункции

Функция ПолучитьТекстЗапросаПоВозвратамОтПокупателя()
	
	Возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЖурналЗаявок.Статус,
	|	ВозвратТоваровОтПокупателя.Склад,
	|	ВозвратТоваровОтПокупателя.Ссылка КАК ДокументСсылка,
	|	ЕСТЬNULL(СвойстваОбъектов.Значение, """") КАК НомерПоклажедателя,
	|	ЕСТЬNULL(СвойстваОбъектов2.Значение, """") КАК НомерТранспортировки,
	|	ВозвратТоваровОтПокупателя.Контрагент,
	|	ВозвратТоваровОтПокупателя.СтруктурнаяЕдиницаКонтрагента,
	|	СУММА(Состав.Количество * Состав.ЕдиницаИзмерения.ВесБрутто) КАК ОбщийВес,
	|	СУММА(Состав.Количество * Состав.ЕдиницаИзмерения.ОбъемБрутто) КАК ОбщийОбъем,
	|	ВозвратТоваровОтПокупателя.ТоварыПолучены,
	|	ВЫРАЗИТЬ(ВозвратТоваровОтПокупателя.Комментарий КАК СТРОКА(500)) КАК Комментарий
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК Состав
	|		ПО ВозвратТоваровОтПокупателя.Ссылка = Состав.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваОбъектов
	|		ПО ВозвратТоваровОтПокупателя.Ссылка = СвойстваОбъектов.Объект
	|			И (СвойстваОбъектов.Свойство = &Свойство_НомерВходящегоДокумента)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваОбъектов2
	|		ПО ВозвратТоваровОтПокупателя.Ссылка = СвойстваОбъектов2.Объект
	|			И (СвойстваОбъектов2.Свойство = &Свойство_НомерПоДаннымПоставщика)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналЗаявок
	|		ПО ВозвратТоваровОтПокупателя.Ссылка = ЖурналЗаявок.Объект
	|			И (ЖурналЗаявок.Источник = &Партнер)
	|			И (ЖурналЗаявок.Идентификатор = ""Входящая"")
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|{ГДЕ
	|	ВозвратТоваровОтПокупателя.ДоговорВладельца.* КАК ОсновнойДоговорПриемаНаХранение,
	|	ВозвратТоваровОтПокупателя.Склад.*,
	|	Состав.Номенклатура.* КАК ГруппаНоменклатуры}
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналЗаявок.Статус,
	|	ВозвратТоваровОтПокупателя.Склад,
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ЕСТЬNULL(СвойстваОбъектов.Значение, """"),
	|	ЕСТЬNULL(СвойстваОбъектов2.Значение, """"),
	|	ВозвратТоваровОтПокупателя.Контрагент,
	|	ВозвратТоваровОтПокупателя.СтруктурнаяЕдиницаКонтрагента,
	|	ВозвратТоваровОтПокупателя.ТоварыПолучены,
	|	ВЫРАЗИТЬ(ВозвратТоваровОтПокупателя.Комментарий КАК СТРОКА(500))
	|{УПОРЯДОЧИТЬ ПО
	|	ВозвратТоваровОтПокупателя.Дата}";	
	
КонецФункции
 
Функция ПолучитьТекстЗапросаДляПостроителя(ИмяТаблицы)
	
	Если ИмяТаблицы = "ЗаказыПоставщику" Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаПоЗаказамПоставщику();
		
	ИначеЕсли ИмяТаблицы = "ОтгрузкиТоваровУслуг" Тогда 
		
		ТекстЗапроса = ПолучитьТекстЗапросаПоОтгрузкаТоваровУслуг();
		
	ИначеЕсли ИмяТаблицы = "МаршрутыЭкспедиторов" Тогда 
		
		ТекстЗапроса = ПолучитьТекстЗапросаПоЭкспедиции();
		
	ИначеЕсли ИмяТаблицы = "ВозвратТоваровОтПокупателя" Тогда 
		
		ТекстЗапроса = ПолучитьТекстЗапросаПоВозвратамОтПокупателя();
		
	КонецЕсли; 
	
	Возврат ТекстЗапроса
	
КонецФункции

Процедура ОчиститьОтборПостроителя(ОтборПостроителя)
	
	Пока ОтборПостроителя.Количество() > 0 Цикл
		
		ОтборПостроителя.Удалить(0);
		
	КонецЦикла;   
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиПостроителя(ИмяТаблицы)
	
	СвойстваПартнера = РегистрыСведений.ДополнительныеРеквизиты_3PL.ПолучитьСвойстваОбъекта(Партнер);
	
	ПостроительОтчета.Текст = ПолучитьТекстЗапросаДляПостроителя(ИмяТаблицы);
	ПостроительОтчета.Параметры.Вставить("Партнер",                          Строка(Партнер));
	ПостроительОтчета.Параметры.Вставить("НачалоПериода",                    НачалоПериода);
	ПостроительОтчета.Параметры.Вставить("КонецПериода",                     КонецДня(КонецПериода));
	ПостроительОтчета.Параметры.Вставить("Свойство_НомерВходящегоДокумента", СвойстваПартнера.Свойство_НомерВходящегоДокумента);
	ПостроительОтчета.Параметры.Вставить("Свойство_НомерПоДаннымПоставщика", СвойстваПартнера.Свойство_НомерТранспортировки);
	
	ПостроительОтчета.ЗаполнитьНастройки();
	
	ОчиститьОтборПостроителя(ПостроительОтчета.Отбор);
	
	Если ПостроительОтчета.Отбор.Количество() = 0 Тогда
		ПостроительОтчета.Отбор.Добавить("ОсновнойДоговорПриемаНаХранение");
		ПостроительОтчета.Отбор.Добавить("Склад");
		ПостроительОтчета.Отбор.Добавить("ГруппаНоменклатуры");
	КонецЕсли; 
	
	Для каждого Элемент Из ПостроительОтчета.Отбор Цикл
		
		Элемент.Значение = СвойстваПартнера[Элемент.Имя];
		Элемент.Использование = Истина;
		
		Если Элемент.Имя = "ГруппаНоменклатуры" Тогда
			Элемент.ВидСравнения = ВидСравнения.ВИерархии;
		КонецЕсли;
		
		Если Элемент.Имя = "Склад" Тогда
			Элемент.ВидСравнения = ВидСравнения.ВСписке;
			СписокСкладов = Новый СписокЗначений;
			СписокСкладов.Добавить(СвойстваПартнера.Склад);
			СписокСкладов.Добавить(СвойстваПартнера.СкладБаллонов);
			Элемент.Значение = СписокСкладов;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОбновитьТаблицуРабочегоМестаОператора()
	
	Если НачалоПериода = Дата(1,1,1)
		ИЛИ КонецПериода = Дата(1,1,1)
		Или Партнер.Пустая() Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	ИмяТекТаблицы = ЭлементыФормы.ПанельОбъектовОбмена.ТекущаяСтраница.Имя;
	
	ЗаполнитьНастройкиПостроителя(ИмяТекТаблицы);
	
	ПостроительОтчета.Выполнить();
	
	ЭтотОбъект[ИмяТекТаблицы].Загрузить(ПостроительОтчета.Результат.Выгрузить());
	
КонецПроцедуры

Процедура ПанельОбъектовОбменаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьТаблицуРабочегоМестаОператора();
	
КонецПроцедуры

Процедура КоманднаяПанель1кнОбновитьНастройкиОбмена(Кнопка)
	
	СвойстваПартнера = Неопределено;
	ПрочитатьСвойстваПартнера();
	
КонецПроцедуры

Процедура ПутьКФайлуНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ДиалогВыбора = ПолучитьДиалогВыбора(РежимДиалогаВыбораФайла.Открытие, "Документ Microsoft Excel (*.xlsb)|*.xlsb|)"); 

	Если ДиалогВыбора.Выбрать() Тогда
		ПутьКФайлу = ДиалогВыбора.ПолноеИмяФайла;
	КонецЕсли; 
	
КонецПроцедуры 

Процедура КоманднаяПанель2ПрочитатьДанныеФайла(Кнопка)
	
	Если Партнер.Пустая() Тогда
		Сообщить("Поле 'Партнер' не заполнено");
		Возврат;
	КонецЕсли; 
	
	Если SPo1 = 1 Тогда
		
		ЗагрузитьКаталогТоваровВФорматеSPo1();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель2СоздатьНоменклатуру(Кнопка)
	
	ПрочитатьСвойстваПартнера();
	
	МассивОтмеченныхСтрок = Товары.НайтиСтроки(Новый Структура("Пометка", Истина));
	
	ТабЗнач = Новый ТаблицаЗначений;
	ТабЗнач.Колонки.Добавить("Родитель",                   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабЗнач.Колонки.Добавить("Артикул",                    Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25)));
	ТабЗнач.Колонки.Добавить("Наименование",               Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(120)));
	ТабЗнач.Колонки.Добавить("НаименованиеПолное",         Новый ОписаниеТипов("Строка"));
	ТабЗнач.Колонки.Добавить("Весовой",                    Новый ОписаниеТипов("Булево"));
	ТабЗнач.Колонки.Добавить("УчетПартий_в_ВМС",           Новый ОписаниеТипов("Булево"));
	ТабЗнач.Колонки.Добавить("ВидНоменклатуры",            Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"));
	ТабЗнач.Колонки.Добавить("ДистрибьюторскийКонтракт",   Новый ОписаниеТипов("СправочникСсылка.ДистрибьюторскиеКонтракты"));
	ТабЗнач.Колонки.Добавить("ОсновнойСкладОтгрузки",      Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТабЗнач.Колонки.Добавить("ГруппаМатериалов",           Новый ОписаниеТипов("СправочникСсылка.ГруппыМатериалов"));
	ТабЗнач.Колонки.Добавить("ГруппаХранения",             Новый ОписаниеТипов("СправочникСсылка.ГруппыХранения"));
	ТабЗнач.Колонки.Добавить("ГруппаПополнения",           Новый ОписаниеТипов("СправочникСсылка.ГруппыПополнения"));
	ТабЗнач.Колонки.Добавить("ГруппаПикинга",              Новый ОписаниеТипов("СправочникСсылка.ГруппыПикинга"));
	ТабЗнач.Колонки.Добавить("ФормФактор",                 Новый ОписаниеТипов("СправочникСсылка.ФормФакторы"));
	ТабЗнач.Колонки.Добавить("ОсновнойПоставщик",          Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТабЗнач.Колонки.Добавить("ПериодГодности",             Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	ТабЗнач.Колонки.Добавить("КоличествоПериодовГодности", Новый ОписаниеТипов("Число",  , , Новый КвалификаторыЧисла(5)));
	ТабЗнач.Колонки.Добавить("БазоваяЕдиницаИзмерения",    Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ТабЗнач.Колонки.Добавить("СтавкаНДС",                  Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТабЗнач.Колонки.Добавить("ЕдиницаЗакупок",             Новый ОписаниеТипов("Структура"));
	ТабЗнач.Колонки.Добавить("ЕдиницаЗакупок2",            Новый ОписаниеТипов("Структура"));
	ТабЗнач.Колонки.Добавить("ЕдиницаЗакупок3",            Новый ОписаниеТипов("Структура"));
	ТабЗнач.Колонки.Добавить("МодельСкладскогоУчета",      Новый ОписаниеТипов("СправочникСсылка.МоделиСкладскогоУчета"));
	
	ВидНоменклатуры          = Справочники.ВидыНоменклатуры.НайтиПоКоду("О00001");
	МодельСкладскогоУчета   = Справочники.МоделиСкладскогоУчета.НайтиПоКоду("О00002"); // Со сроком годности
	
	Для каждого Элемент Из МассивОтмеченныхСтрок Цикл
		
		НовСтр = ТабЗнач.Добавить();
		НовСтр.ДистрибьюторскийКонтракт = СвойстваПартнера.Контракт;
		НовСтр.ОсновнойСкладОтгрузки    = СвойстваПартнера.Склад;
		НовСтр.ОсновнойПоставщик        = СвойстваПартнера.ОсновнойПоставщик;
		НовСтр.Родитель                 = СвойстваПартнера.ГруппаНоменклатуры;
		НовСтр.ГруппаМатериалов         = СвойстваПартнера.ГруппаМатериалов;
		НовСтр.ГруппаХранения           = СвойстваПартнера.ГруппаХранения;
		НовСтр.ГруппаПополнения         = СвойстваПартнера.ГруппаПополнения;
		НовСтр.ГруппаПикинга            = СвойстваПартнера.ГруппаПикинга;
		НовСтр.ФормФактор               = СвойстваПартнера.ФормФактор;
		НовСтр.Артикул                  = Элемент.Артикул;
		НовСтр.Наименование             = Элемент.Наименование;
		НовСтр.НаименованиеПолное       = Элемент.Наименование;
		НовСтр.УчетПартий_в_ВМС         = Ложь;
		НовСтр.ВидНоменклатуры          = ВидНоменклатуры;
		НовСтр.СтавкаНДС                = Элемент.СтавкаНДС;
		НовСтр.ПериодГодности           = Элемент.ПериодГодности;
		НовСтр.КоличествоПериодовГодности = Элемент.КоличествоПериодовГодности;
		НовСтр.БазоваяЕдиницаИзмерения  = Элемент.КлассификаторЕдиницыШт;
		НовСтр.МодельСкладскогоУчета    = МодельСкладскогоУчета;
		
		ЕдиницаПоКлассификатору = Элемент.КлассификаторЕдиницыШт;
		
		НовСтр.ЕдиницаЗакупок.Вставить("Наименование",            ЕдиницаПоКлассификатору.Наименование);
		НовСтр.ЕдиницаЗакупок.Вставить("ЕдиницаПоКлассификатору", ЕдиницаПоКлассификатору);
		НовСтр.ЕдиницаЗакупок.Вставить("Вес",                     Элемент.ВесШт);
		НовСтр.ЕдиницаЗакупок.Вставить("ВесБрутто",               Элемент.ВесБруттоШт);
		НовСтр.ЕдиницаЗакупок.Вставить("Глубина",                 Элемент.ГлубинаШт);
		НовСтр.ЕдиницаЗакупок.Вставить("Высота",                  Элемент.ВысотаШт);
		НовСтр.ЕдиницаЗакупок.Вставить("Ширина",                  Элемент.ШиринаШт);
		НовСтр.ЕдиницаЗакупок.Вставить("КодовоеОбозначениеВКПК",  ЕдиницаПоКлассификатору.Наименование);
		НовСтр.ЕдиницаЗакупок.Вставить("Комплектация",            Истина);
		НовСтр.ЕдиницаЗакупок.Вставить("Коэффициент",             1);
		НовСтр.ЕдиницаЗакупок.Вставить("Объем",                   Элемент.ОбъемБруттоШт);
		НовСтр.ЕдиницаЗакупок.Вставить("ОбъемБрутто",             Элемент.ОбъемБруттоШт);
		НовСтр.ЕдиницаЗакупок.Вставить("ТехнологическаяУпаковка", ?(ЕдиницаПоКлассификатору.Код = "778",
		Перечисления.ВидыТехнологическихУпаковок.PACK,         Перечисления.ВидыТехнологическихУпаковок.ST));
		НовСтр.ЕдиницаЗакупок.Вставить("Штрихкод",                Элемент.ШтрихкодШт);
		
		ЕдиницаПоКлассификатору = Элемент.КлассификаторЕдиницыУпак;
		
		НовСтр.ЕдиницаЗакупок2.Вставить("Наименование",            ЕдиницаПоКлассификатору.Наименование + ?(Элемент.КоэффициентУпак > 1, Строка(Элемент.КоэффициентУпак), ""));
		НовСтр.ЕдиницаЗакупок2.Вставить("ЕдиницаПоКлассификатору", ЕдиницаПоКлассификатору);
		НовСтр.ЕдиницаЗакупок2.Вставить("Вес",                     Элемент.ВесУпак);
		НовСтр.ЕдиницаЗакупок2.Вставить("ВесБрутто",               Элемент.ВесБруттоУпак);
		НовСтр.ЕдиницаЗакупок2.Вставить("Глубина",                 Элемент.ГлубинаУпак);
		НовСтр.ЕдиницаЗакупок2.Вставить("Высота",                  Элемент.ВысотаУпак);
		НовСтр.ЕдиницаЗакупок2.Вставить("Ширина",                  Элемент.ШиринаУпак);
		НовСтр.ЕдиницаЗакупок2.Вставить("КодовоеОбозначениеВКПК",  "Кор");
		НовСтр.ЕдиницаЗакупок2.Вставить("Комплектация",            Истина);
		НовСтр.ЕдиницаЗакупок2.Вставить("Коэффициент",             Элемент.КоэффициентУпак);
		НовСтр.ЕдиницаЗакупок2.Вставить("Объем",                   Элемент.ОбъемБруттоУпак);
		НовСтр.ЕдиницаЗакупок2.Вставить("ОбъемБрутто",             Элемент.ОбъемБруттоУпак);
		НовСтр.ЕдиницаЗакупок2.Вставить("ТехнологическаяУпаковка", ?(ЕдиницаПоКлассификатору.Код = "778",
		Перечисления.ВидыТехнологическихУпаковок.PACK,         Перечисления.ВидыТехнологическихУпаковок.ST));
		НовСтр.ЕдиницаЗакупок2.Вставить("Штрихкод",                Элемент.ШтрихкодУпак);
		
	КонецЦикла;
	
	ОбработкаНоменклатурыИзФайла(ТабЗнач);
		
КонецПроцедуры

Процедура КоманднаяПанель1РаспределитьВыкупПаЗаказам(Кнопка)
	
	
	
КонецПроцедуры

Процедура КоманднаяПанельОТУПолучитьПечатныеФормыПоДокументам(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Партнер) Тогда
		Сообщить("Не заполнено поле 'Партнер'", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли; 
	
	ВыделенныеСтроки = ЭлементыФормы.ОтгрузкиТоваровУслуг.ВыделенныеСтроки;
	
	МассивНомеровТранспортировок = Новый Массив;
	
	Для каждого ВыдСтрока Из ВыделенныеСтроки Цикл
		
		НомерТранспортировки = ВыдСтрока.НомерТранспортировки;
		
		Если МассивНомеровТранспортировок.Найти(НомерТранспортировки) = Неопределено Тогда
			МассивНомеровТранспортировок.Добавить(НомерТранспортировки);
		Иначе
			Продолжить;
		КонецЕсли;
		
		РегистраторЗаписи = Документы.РегистраторЗаписи.СоздатьНовыйДокумент(""+ВыдСтрока.ДокументСсылка);
		
		_3PLСервер.ДобавитьЗаписьПоДокументуВЖурналОпераций(РегистраторЗаписи, Строка(Партнер), "1С",
			Справочники.СтатусыЗаявок.Новая, "prints", ТекущаяДатаСеанса(),, НомерТранспортировки);
		
	КонецЦикла;
		
	ПолучитьПечатныеФормы();	
	
КонецПроцедуры

Процедура КоманднаяПанельМаршрутыПолучитьПечатныеФормы(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Партнер) Тогда
		Сообщить("Не заполнено поле 'Партнер'", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли; 
	
	ВыделенныеСтроки = ЭлементыФормы.МаршрутыЭкспедиторов.ВыделенныеСтроки;
	
	МассивНомеровТранспортировок = Новый Массив;
	
	Для каждого ВыдСтрока Из ВыделенныеСтроки Цикл
		
		НомерТранспортировки = ВыдСтрока.НомерТранспортировки;
		
		Если МассивНомеровТранспортировок.Найти(НомерТранспортировки) = Неопределено Тогда
			МассивНомеровТранспортировок.Добавить(НомерТранспортировки);
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НомерТранспортировки) Тогда
			Сообщить("У документа '%1' не заполнен номер транспортировки", СтатусСообщения.Внимание);
			Продолжить;
		КонецЕсли; 
		
		РегистраторЗаписи = Документы.РегистраторЗаписи.СоздатьНовыйДокумент(""+ВыдСтрока.ДокументСсылка);
		
		_3PLСервер.ДобавитьЗаписьПоДокументуВЖурналОпераций(РегистраторЗаписи, Строка(Партнер), "1С",
			Справочники.СтатусыЗаявок.Новая, "prints", ТекущаяДатаСеанса(),, НомерТранспортировки);
		
	КонецЦикла;
		
	ПолучитьПечатныеФормы();
	
КонецПроцедуры

Процедура КоманднаяПанельВозвратыОтПокупателяОбновитьТаблицуВозвратовОтПокупателя(Кнопка)
	
	ОбновитьТаблицуРабочегоМестаОператора();
	
КонецПроцедуры

#КонецОбласти
