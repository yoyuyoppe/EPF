
#Область ОбработчикиСобытийФормы

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтруктураЗаписи = Новый Структура("Объект, Свойство, Значение", Партнер, "ДатаПоследнегоОбмена", ТекущаяДатаСеанса());
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		РегистрыСведений.ДополнительныеРеквизиты_3PL.ДобавитьЗапись(СтруктураЗаписи);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = 1 Тогда
		
		НастройкиОбмена.Отбор.Объект.Установить(Партнер);
		
		СписокДоступныхСвойств = Новый СписокЗначений;
		СписокДоступныхСвойств.Добавить("ГруппаНоменклатуры");
		СписокДоступныхСвойств.Добавить("Склад");
		СписокДоступныхСвойств.Добавить("Контракт");
		СписокДоступныхСвойств.Добавить("ДатаПоследнегоОбмена");
		СписокДоступныхСвойств.Добавить("ДатаПоследнегоОбменаПоДокументам");
		СписокДоступныхСвойств.Добавить("ДатаПоследнегоОбменаПоМатериалам");
		СписокДоступныхСвойств.Добавить("ДатаПоследнегоОбменаПоПартиям");
		СписокДоступныхСвойств.Добавить("КаталогХраненияПечатныхФорм");
		СписокДоступныхСвойств.Добавить("ОсновнаяОрганизация");
		СписокДоступныхСвойств.Добавить("ОсновноеПодразделение");
		СписокДоступныхСвойств.Добавить("ОсновнойВидПоставки");
		СписокДоступныхСвойств.Добавить("ОсновнойДоговорПриемаНаХранение");
		СписокДоступныхСвойств.Добавить("ОсновнойПоставщик");
		СписокДоступныхСвойств.Добавить("ОсновнойТипЦенКонтрагента");
		СписокДоступныхСвойств.Добавить("ЗагрузитьПоставкуСНомером");
		СписокДоступныхСвойств.Добавить("ПолучателиОтчетаОСГДляОтделаПродаж");
		СписокДоступныхСвойств.Добавить("ПолучателиОтчетаОСГДляПланирования");
		СписокДоступныхСвойств.Добавить("ПолучателиОтчетаПоВозвратам");
		СписокДоступныхСвойств.Добавить("ПолучателиОтчетаПоМаршруту");
		СписокДоступныхСвойств.Добавить("ПолучателиОтчетаПоНаличиюПродукцииПод3PD");
		СписокДоступныхСвойств.Добавить("ПолучателиОтчетаПоСтатусамЗаказов3PD");
		СписокДоступныхСвойств.Добавить("ЗапущенаОперация_ПолучитьДокументы");
		
		НастройкиОбмена.Отбор.Свойство.ВидСравнения = ВидСравнения.ВСписке;
		НастройкиОбмена.Отбор.Свойство.Значение = СписокДоступныхСвойств;
		НастройкиОбмена.Отбор.Свойство.Использование = Истина;
			
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьСписокПартнеров()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеРеквизиты_3PL.Объект
	|ИЗ
	|	РегистрСведений.ДополнительныеРеквизиты_3PL КАК ДополнительныеРеквизиты_3PL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Объект) Тогда
			Продолжить;
		КонецЕсли; 
		
		СписокПартнеров.Добавить(Выборка.Объект);
		
	КонецЦикла;
	
КонецПроцедуры
 
Процедура ПартнерНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
    ВыбЭлемент = СписокПартнеров.ВыбратьЭлемент("Выберите партнера по ответ. хранению");
	
	Партнер = ВыбЭлемент.Значение;
	
	СбросНастроек();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ЗаполнитьСписокПартнеров();
	
	НачалоПериода = ТекущаяДатаСеанса();
	КонецПериода = ТекущаяДатаСеанса();
	
	///Антропов Е.П. от 28.11.2023 №000000117
	Картинка_Проведен   = БиблиотекаКартинок.ДокументПроведен;
	Картинка_НЕПроведен = БиблиотекаКартинок.ДокументНеПроведен;
	///Антропов Е.П. от 28.11.2023 №000000117
	
	ТекТЗ_МЭ.Колонки.Добавить("ДокументСсылка", Новый ОписаниеТипов("ДокументСсылка.МаршрутЭкспедитора")); ///Антропов Е.П. от 19.04.2024 №000000279
КонецПроцедуры

Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбновитьТаблицуРабочегоМестаОператора();
	
КонецПроцедуры

Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОбновитьТаблицуРабочегоМестаОператора();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

Процедура КоманднаяПанельЗаказыПоставщикуОбновитьТаблицуЗаказовПоставщику(Кнопка)
	
	ОбновитьТаблицуРабочегоМестаОператора();
	
КонецПроцедуры

Процедура КоманднаяПанельКоманднаяПанельОТУОбновитьТаблицуОТУ(Кнопка)
	
	ОбновитьТаблицуРабочегоМестаОператора();
	
КонецПроцедуры

Процедура КоманднаяПанельМаршрутыОбновитьТаблицуМаршрутов(Кнопка)
	
	ОбновитьТаблицуРабочегоМестаОператора();
	
КонецПроцедуры

///Антропов Е.П. от 18.12.2024
Процедура ЗаказыПоставщикамПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = ЭлементыФормы.ЗаказыПоставщикам.ТекущиеДанные;
	ОтобразитьСтрокиСМаркировочнымТоваром(ТекущаяСтрока.ДокументСсылка);
КонецПроцедуры
///Антропов Е.П. от 18.12.2024
#КонецОбласти

#Область ОбработчикиКомандФормы

Процедура КнопкаПолучитьНоменклатуруНажатие(Элемент)
	
	ОчиститьСообщения();
	
	
	
	Сообщить("Операция завершена", СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура КнопкаПолучитьПартииНажатие(Элемент)
	
	ОчиститьСообщения();
	ПолучитьПартии();
	Сообщить("Операция завершена", СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура КнопкаПолучитьДокументыНажатие(Элемент)
	
	ОчиститьСообщения();
	ПолучитьПартии();
	ПолучитьДокументы();
	Сообщить("Операция завершена", СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура КнопкаПолучитьТранспортировкиНажатие(Элемент)
	
	ОчиститьСообщения();
	ПолучитьТранспортировки();
	Сообщить("Операция завершена", СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура КнопкаПодтвердитьПоставкиНажатие(Элемент)
	ОчиститьСообщения();
	ПодтвердитьПоставки();
	Сообщить("Операция завершена", СтатусСообщения.Информация);
КонецПроцедуры

Процедура КнопкаОтправитьОстаткиНажатие(Элемент)
	
	ОчиститьСообщения();
	ОтправитьТекущиеОстатки();
	Сообщить("Операция завершена", СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура КнопкаОтправитьКорректировкиОстатковНажатие(Элемент)
	
	ОчиститьСообщения();
	ОтправитьКорректировкиОстатков();
	Сообщить("Операция завершена", СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура КнопкаОбновитьПоставкиНажатие(Элемент)
	
	ОчиститьСообщения();
	ОбновитьСтатусыТранспортировок();
	Сообщить("Операция завершена", СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура КнопкаВыгрузитьМаршрутыНажатие(Элемент)
	
	ОчиститьСообщения();
	ВыгрузитьМаршрутыЭкспедиторов();
	Сообщить("Операция завершена", СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура КнопкаПолучитьПечатныеФормыНажатие(Элемент)
	
	ОчиститьСообщения();
	ПолучитьПечатныеФормы();
	Сообщить("Операция завершена", СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура КоманднаяПанельОТУСверкаПоставок(Кнопка)

	ТаблицаДанныхДляСверки = ПолучитьТаблицуДанныхДляСверки();
	
	Если ТаблицаДанныхДляСверки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	формаСверки = ЭтотОбъект.ПолучитьФорму("ФормаСверки");	
	формаСверки.ТаблицаДанныхДляСверки = ТаблицаДанныхДляСверки;	
	
	формаСверки.Открыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОБРАБОТЧИКИ_ФАЙЛОВ

Функция ПолучитьСтавкуНДСИзСтроки(ВеличинаСтавки)
	
	Если НЕ ЗначениеЗаполнено(ВеличинаСтавки) Тогда
		Возврат Перечисления.СтавкиНДС.ПустаяСсылка();	
	КонецЕсли; 

	ВеличинаСтавки = Число(ВеличинаСтавки);
	
	Если ВеличинаСтавки = 0 Тогда
		Возврат Перечисления.СтавкиНДС.НДС0;
	ИначеЕсли ВеличинаСтавки = 10 Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли ВеличинаСтавки = 18 Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли ВеличинаСтавки = 20 Тогда
		Возврат Перечисления.СтавкиНДС.НДС20;
	Иначе
		Возврат Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли
	
КонецФункции

Функция ФорматироватьВЧисло(Знач пЗнач)
	
	Если ЗначениеЗаполнено(пЗнач) Тогда
		пЗнач = Число(пЗнач);
	Иначе
		пЗнач = 0;
	КонецЕсли;
	
	Возврат пЗнач;
	
КонецФункции
 
Процедура ЗагрузитьКаталогТоваровВФорматеSPo1() Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Сообщить("Не выбран путь к файлу");
		Возврат;
	КонецЕсли; 
	
	Попытка
		Эксель = РаботаСЭксель.ПолучитьКомОбъект();
		Книга = Неопределено;
		РаботаСЭксель.ОткрытьКнигу(Эксель, Книга, ПутьКФайлу);
	Исключение
	    Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось открыть файл '%1' по причине: %2", ПутьКФайлу, ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
	
	Лист = Книга.Worksheets("PMDR");
	
	КолАртикул = 1;
	КолНаименование = 2;
	КолКатегория = 3;
	КолСтавкаНДС = 66;
	КолКоличествоПериодовГодности = 73;
	КолПериодГодности = 74;
	КолЛитраж = 71;
	КолШкШт = 86;
	КолГлубинаШт = 87;
	КолШиринаШт = 88;
	КолВысотаШт = 89;
	КолВесШт = 89;
	КолВесБруттоШт = 91;
	КолОбъемБруттоШт = 92;
	КолШкУпак = 103;
	КолКоэффициентУпак = 104;
	КолГлубинаУпак = 105;
	КолШиринаУпак = 106;
	КолВысотаУпак = 107;
	КолВесУпак = 108;
	КолВесБруттоУпак = 109;
	КолОбъемБруттоУпак = 110;
	
	Сч = 4;
	
	Товары.Очистить();
	
	КлассификаторЕдиницыШт = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
	КлассификаторЕдиницыУпак = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778");
	
	Пока Истина Цикл
		
		Артикул = Лист.cells(Сч, КолАртикул).Value;
		
		Если НЕ ЗначениеЗаполнено(Артикул) Тогда
			Прервать;
		КонецЕсли;
		
		НовСтр = Товары.Добавить();
		НовСтр.Артикул = Формат(Артикул, "ЧГ=0");
		НовСтр.Наименование = СокрЛП(Лист.cells(Сч, КолНаименование).Value);
		НовСтр.Категория = СокрЛП(Лист.cells(Сч, КолКатегория).Value);
		НовСтр.СтавкаНДС = ПолучитьСтавкуНДСИзСтроки(СокрЛП(Лист.cells(Сч, КолСтавкаНДС).Value));
		
		ОпределитьПериодГодности(ЛЕВ(СокрЛП(Лист.cells(Сч, КолПериодГодности).Value), 1), ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолКоличествоПериодовГодности).Value)), НовСтр.ПериодГодности, НовСтр.КоличествоПериодовГодности);
		
		НовСтр.Литраж = ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолЛитраж).Value));
		НовСтр.ШтрихкодШт = СокрЛП(Лист.cells(Сч, КолШкШт).Value);
		НовСтр.ГлубинаШт = ПересчитатьГабаритыВМетры(ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолГлубинаШт).Value)), "CM");
		НовСтр.ШиринаШт = ПересчитатьГабаритыВМетры(ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолШиринаШт).Value)), "CM");
		НовСтр.ВысотаШт = ПересчитатьГабаритыВМетры(ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолВысотаШт).Value)), "CM");
		НовСтр.ВесШт = ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолВесШт).Value));
		НовСтр.ВесБруттоШт = ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолВесБруттоШт).Value));
		НовСтр.ОбъемБруттоШт = Окр(НовСтр.ГлубинаШт * НовСтр.ШиринаШт * НовСтр.ВысотаШт, 6);
		НовСтр.КлассификаторЕдиницыШт = КлассификаторЕдиницыШт;
		
		НовСтр.ШтрихкодУпак = СокрЛП(Лист.cells(Сч, КолШкУпак).Value);
		НовСтр.КоэффициентУпак = ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолКоэффициентУпак).Value));
		НовСтр.ГлубинаУпак = ПересчитатьГабаритыВМетры(ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолГлубинаУпак).Value)), "CM");
		НовСтр.ШиринаУпак = ПересчитатьГабаритыВМетры(ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолШиринаУпак).Value)), "CM");
		НовСтр.ВысотаУпак = ПересчитатьГабаритыВМетры(ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолВысотаУпак).Value)), "CM");
		НовСтр.ВесУпак = ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолВесУпак).Value));
		НовСтр.ВесБруттоУпак = ФорматироватьВЧисло(СокрЛП(Лист.cells(Сч, КолВесБруттоУпак).Value));
		НовСтр.ОбъемБруттоУпак = Окр(НовСтр.ГлубинаУпак * НовСтр.ШиринаУпак * НовСтр.ВысотаУпак, 6);
		НовСтр.КлассификаторЕдиницыУпак = КлассификаторЕдиницыУпак;
		
		Сч = Сч + 1;
		
		//Если Сч = 10 Тогда
		//	Прервать;
		//КонецЕсли; 
		
	КонецЦикла; 
	
	Книга.Close();
	
	Эксель.Quit();
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуДанныхДляСверки()
	
	мРежимВыбора 		= РежимДиалогаВыбораФайла.Открытие;
	ФильтрПоТипуФайла	= "Документ Microsoft Excel (*.xlsx)|*.xlsx|)";
	ДиалогВыбора		= ПолучитьДиалогВыбора(мРежимВыбора, ФильтрПоТипуФайла, , , , Истина); 

	Если ДиалогВыбора.Выбрать() Тогда
		
		ТабДанные = Новый ТаблицаЗначений;
		ТабДанные.Колонки.Добавить("Поставка", ОбщиеФункции.ПолучитьОписаниеТиповСтроки(10));
		
		МассивФайлов = ДиалогВыбора.ВыбранныеФайлы;
		
		Для Каждого ИмяФайла Из МассивФайлов Цикл				
			ТабДок = Новый ТабличныйДокумент;
			ТабДок.Прочитать(ИмяФайла);
			
			ОбластиТаб = ТабДок.Область(1, 1, ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы);
			
			Построитель = Новый ПостроительЗапроса;
			Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластиТаб);  
			Построитель.Выполнить();
			
			ВыборкаПостроителя = Построитель.Результат.Выбрать();
			
			Пока ВыборкаПостроителя.Следующий() Цикл
				НоваяОтгрузка = ТабДанные.Добавить();
				НоваяОтгрузка.Поставка = ВыборкаПостроителя.Поставка;
			КонецЦикла;
		КонецЦикла;
		
		Возврат ТабДанные;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДиалогВыбора(Режим, Фильтр, НачальныйКаталог = Неопределено, 
	Заголовок = "Выберите файл...", ПредварительныйПросмотр = Ложь, МножественныйВыбор = Ложь, ПроверятьСуществованиеФайла = Истина)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(Режим);
	ДиалогВыбора.Фильтр = Фильтр;
	ДиалогВыбора.Каталог = НачальныйКаталог;
	ДиалогВыбора.Заголовок = "Выберите файл...";
	ДиалогВыбора.ПредварительныйПросмотр = ПредварительныйПросмотр;
	ДиалогВыбора.ПроверятьСуществованиеФайла = ПроверятьСуществованиеФайла;
	ДиалогВыбора.МножественныйВыбор = МножественныйВыбор;
	
	Возврат ДиалогВыбора;
	
КонецФункции

Функция ПолучитьТекстЗапросаПоЗаказамПоставщику()
	
	Возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПоставщику.Ссылка КАК ДокументСсылка,
	|	ЗаказПоставщику.ДатаПоступления КАК ДатаПоставки,
	|	ЕСТЬNULL(СвойстваОбъектов.Значение, """") КАК НомерПоклажедателя,
	|	ЖурналЗаявок.Статус,
	|	ЗаказПоставщику.Вес КАК ОбщийВес,
	|	ЗаказПоставщику.Объем КАК ОбщийОбъем,
	|	ВЫРАЗИТЬ(ЗаказПоставщику.Комментарий КАК СТРОКА(500)) КАК Комментарий
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК Состав
	|		ПО ЗаказПоставщику.Ссылка = Состав.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваОбъектов
	|		ПО ЗаказПоставщику.Ссылка = СвойстваОбъектов.Объект
	|			И (СвойстваОбъектов.Свойство = &Свойство_НомерВходящегоДокумента)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналЗаявок
	|		ПО ЗаказПоставщику.Ссылка = ЖурналЗаявок.Объект
	|			И (ЖурналЗаявок.Источник = &Партнер)
	|			И (ЖурналЗаявок.Идентификатор = ""Входящая"")
	|ГДЕ
	|	ЗаказПоставщику.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|{ГДЕ
	|	ЗаказПоставщику.ДоговорКонтрагента.* КАК ОсновнойДоговорПриемаНаХранение,
	|	ЗаказПоставщику.Склад.*,
	|	Состав.Номенклатура.* КАК ГруппаНоменклатуры}
	|{УПОРЯДОЧИТЬ ПО
	|	ЗаказПоставщику.Дата}";
	
КонецФункции

Функция ПолучитьТекстЗапросаПоОтгрузкаТоваровУслуг()
	
	Возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЖурналЗаявок.Статус,
	|	СостояниеДокументов.Состояние,
	|	ОтгрузкаТоваровУслуг.Ссылка КАК ДокументСсылка,
	|	ОтгрузкаТоваровУслуг.ДатаОтгрузки КАК ДатаПоставки,
	|	ОтгрузкаТоваровУслуг.Контрагент,
	|	ОтгрузкаТоваровУслуг.СтруктурнаяЕдиницаКонтрагента,
	|	ОтгрузкаТоваровУслуг.ГруппаДоставки,
	|	ОтгрузкаТоваровУслуг.СпособРасчетов,
	|   ОтгрузкаТоваровУслуг.Склад,
	|	ЕСТЬNULL(СвойстваОбъектов.Значение, """") КАК НомерПоклажедателя,
	|	ЕСТЬNULL(СвойстваОбъектов2.Значение, """") КАК НомерТранспортировки,
	|	СУММА(Состав.Количество * Состав.ЕдиницаИзмерения.ВесБрутто) КАК ОбщийВес,
	|	СУММА(Состав.Количество * Состав.ЕдиницаИзмерения.ОбъемБрутто) КАК ОбщийОбъем,
	|	ВЫРАЗИТЬ(ОтгрузкаТоваровУслуг.Комментарий КАК СТРОКА(500)) КАК Комментарий,
	|	МАКСИМУМ(ЛистОтбора.КоличествоПлан - ЛистОтбора.КоличествоФакт > 0) КАК ЕстьВычеркВОтборе,
	
	///Антропов Е.П. от 27.11.2023 №000000116
	|	МАКСИМУМ(ЕСТЬNULL(ИнвДоставки.Ссылка, НЕОПРЕДЕЛЕНО)) КАК ИнвДоставки,
	///Антропов Е.П. от 27.11.2023 №000000116
	
	|	МАКСИМУМ(ИнвДоставкиТовары.ПричинаВозврата <> ЗНАЧЕНИЕ(Справочник.ПричиныВозвратовОтЭкспедиторов.ПустаяСсылка)) КАК ЕстьВычеркВЭкспедиции	
	|ИЗ
	|	Документ.ОтгрузкаТоваровУслуг КАК ОтгрузкаТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровУслуг.Товары КАК Состав
	|		ПО ОтгрузкаТоваровУслуг.Ссылка = Состав.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналЗаявок
	|		ПО ОтгрузкаТоваровУслуг.Ссылка = ЖурналЗаявок.Объект
	|			И (ЖурналЗаявок.Источник = &Партнер)
	|			И (ЖурналЗаявок.Идентификатор = ""Исходящая"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеДокументовОтгрузки.СрезПоследних КАК СостояниеДокументов
	|		ПО ОтгрузкаТоваровУслуг.Ссылка = СостояниеДокументов.ДокументОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваОбъектов
	|		ПО ОтгрузкаТоваровУслуг.Ссылка = СвойстваОбъектов.Объект
	|			И (СвойстваОбъектов.Свойство = &Свойство_НомерВходящегоДокумента)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваОбъектов2
	|		ПО ОтгрузкаТоваровУслуг.Ссылка = СвойстваОбъектов2.Объект
	|			И (СвойстваОбъектов2.Свойство = &Свойство_НомерПоДаннымПоставщика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтборЗапасовНаСкладе.ЗаказыНаОтгрузку КАК ЗаказыНаОтгрузку
	|		ПО ОтгрузкаТоваровУслуг.Ссылка = ЗаказыНаОтгрузку.ЗаказНаОтгрузку
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтборЗапасовНаСкладе.ЛистОтбора КАК ЛистОтбора
	|		ПО (ЗаказыНаОтгрузку.Ссылка = ЛистОтбора.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияДоставки КАК ИнвДоставки
	|		ПО ОтгрузкаТоваровУслуг.Ссылка = ИнвДоставки.ДокументОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияДоставки.Товары КАК ИнвДоставкиТовары
	|		ПО (ИнвДоставки.Ссылка = ИнвДоставкиТовары.Ссылка)
	|ГДЕ
	|	ОтгрузкаТоваровУслуг.ДатаОтгрузки МЕЖДУ &НачалоПериода И &КонецПериода
	|{ГДЕ
	|	ОтгрузкаТоваровУслуг.Склад.*,
	|	Состав.Номенклатура.* КАК ГруппаНоменклатуры,
	|	Состав.ДоговорВладельца.* КАК ОсновнойДоговорПриемаНаХранение}
	|
	|СГРУППИРОВАТЬ ПО
	|   ОтгрузкаТоваровУслуг.Склад,
	|	ОтгрузкаТоваровУслуг.Ссылка,
	|	СостояниеДокументов.Состояние,
	|	ОтгрузкаТоваровУслуг.ДатаОтгрузки,
	|	ЕСТЬNULL(СвойстваОбъектов.Значение, """"),
	|	ЕСТЬNULL(СвойстваОбъектов2.Значение, """"),
	|	ЖурналЗаявок.Статус,
	|	ВЫРАЗИТЬ(ОтгрузкаТоваровУслуг.Комментарий КАК СТРОКА(500)),
	|	ОтгрузкаТоваровУслуг.Контрагент,
	|	ОтгрузкаТоваровУслуг.СтруктурнаяЕдиницаКонтрагента,
	|	ОтгрузкаТоваровУслуг.ГруппаДоставки,
	|	ОтгрузкаТоваровУслуг.СпособРасчетов
	|{УПОРЯДОЧИТЬ ПО
	|	ОтгрузкаТоваровУслуг.Дата}";
	
КонецФункции

Функция ПолучитьТекстЗапросаПоЭкспедиции()
	
	Возврат "ВЫБРАТЬ
	|	влЗАпрос.Статус,
	|	влЗАпрос.ДокументСсылка,
	|	влЗАпрос.ДатаЭкспедиции,
	|	влЗАпрос.Транспорт,
	|	ВЫБОР
	|		КОГДА влЗАпрос.ГотовКОтправке = ЛОЖЬ
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналЗаявок.Объект ЕСТЬ NULL
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		ИНАЧЕ влЗАпрос.ГотовКОтправке
	|	КОНЕЦ КАК ГотовКОтправке,
	|	влЗАпрос.Водитель,
	|	влЗАпрос.ГруппаДоставки,
	|	влЗАпрос.Комментарий,
	|	МАКСИМУМ(влЗАпрос.НомерТранспортировки) КАК НомерТранспортировки,
	|	влЗАпрос.ЕстьДокументыПоКД
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЖурналЗаявокПоМаршрутам.Статус КАК Статус,
	|		МаршрутЭкспедитора.Ссылка КАК ДокументСсылка,
	|		МаршрутЭкспедитора.ДатаЭкспедиции КАК ДатаЭкспедиции,
	|		МаршрутЭкспедитора.Транспорт КАК Транспорт,
	|		МаршрутЭкспедитора.ГотовКОтправкеВТранзит КАК ГотовКОтправке,
	|		ВЫБОР
	|			КОГДА НЕ МаршрутЭкспедитора.Водитель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|				ТОГДА МаршрутЭкспедитора.Водитель
	|			ИНАЧЕ МаршрутЭкспедитора.Экспедитор
	|		КОНЕЦ КАК Водитель,
	|		ЕСТЬNULL(СвойстваОбъектов.Значение, """") КАК НомерТранспортировки,
	|		МаршрутЭкспедитора.ГруппаДоставки КАК ГруппаДоставки,
	|		ВЫРАЗИТЬ(МаршрутЭкспедитора.Комментарий КАК СТРОКА(500)) КАК Комментарий,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ДокиПоКД.Документ ЕСТЬ NULL
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ) КАК ЕстьДокументыПоКД
	|	ИЗ
	|		Документ.ОтгрузкаТоваровУслуг КАК ОтгрузкаТоваровУслуг
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровУслуг.Товары КАК Состав
	|			ПО ОтгрузкаТоваровУслуг.Ссылка = Состав.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналЗаявок
	|			ПО ОтгрузкаТоваровУслуг.Ссылка = ЖурналЗаявок.Объект
	|				И (ЖурналЗаявок.Источник = &Партнер)
	|				И (ЖурналЗаявок.Идентификатор = ""Исходящая"")
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутЭкспедитора.ДокументыОснования КАК тчДокументыОснования
	|			ПО ОтгрузкаТоваровУслуг.Ссылка = тчДокументыОснования.ДокументОснование
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутЭкспедитора КАК МаршрутЭкспедитора
	|			ПО (тчДокументыОснования.Ссылка = МаршрутЭкспедитора.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваОбъектов
	|			ПО ОтгрузкаТоваровУслуг.Ссылка = СвойстваОбъектов.Объект
	|				И (СвойстваОбъектов.Свойство = &Свойство_НомерПоДаннымПоставщика)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналЗаявокПоМаршрутам
	|			ПО (тчДокументыОснования.Ссылка = ЖурналЗаявокПоМаршрутам.Объект)
	|				И (ЖурналЗаявокПоМаршрутам.Приемник = &Партнер)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоКроссДокингу КАК ДокиПоКД
	|			ПО ОтгрузкаТоваровУслуг.Ссылка = ДокиПоКД.Документ
	|	ГДЕ
	|		ОтгрузкаТоваровУслуг.ДатаОтгрузки МЕЖДУ &НачалоПериода И &КонецПериода
	|	{ГДЕ
	|		ОтгрузкаТоваровУслуг.Склад.*,
	|		Состав.ДоговорВладельца.* КАК ОсновнойДоговорПриемаНаХранение,
	|		Состав.Номенклатура.* КАК ГруппаНоменклатуры}
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЖурналЗаявокПоМаршрутам.Статус,
	|		МаршрутЭкспедитора.Ссылка,
	|		ЕСТЬNULL(СвойстваОбъектов.Значение, """"),
	|		МаршрутЭкспедитора.ДатаЭкспедиции,
	|		МаршрутЭкспедитора.Транспорт,
	|		ВЫБОР
	|			КОГДА НЕ МаршрутЭкспедитора.Водитель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|				ТОГДА МаршрутЭкспедитора.Водитель
	|			ИНАЧЕ МаршрутЭкспедитора.Экспедитор
	|		КОНЕЦ,
	|		МаршрутЭкспедитора.ГруппаДоставки,
	|		ВЫРАЗИТЬ(МаршрутЭкспедитора.Комментарий КАК СТРОКА(500)),
	|		МаршрутЭкспедитора.ГотовКОтправкеВТранзит
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ЖурналЗаявокПоМаршрутам.Статус,
	|		МаршрутЭкспедитора.Ссылка,
	|		МаршрутЭкспедитора.ДатаЭкспедиции,
	|		МаршрутЭкспедитора.Транспорт,
	|		МаршрутЭкспедитора.ГотовКОтправкеВТранзит,
	|		ВЫБОР
	|			КОГДА НЕ МаршрутЭкспедитора.Водитель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|				ТОГДА МаршрутЭкспедитора.Водитель
	|			ИНАЧЕ МаршрутЭкспедитора.Экспедитор
	|		КОНЕЦ,
	|		ЕСТЬNULL(СвойстваОбъектов.Значение, """"),
	|		МаршрутЭкспедитора.ГруппаДоставки,
	|		ВЫРАЗИТЬ(МаршрутЭкспедитора.Комментарий КАК СТРОКА(500)),
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК Состав
	|			ПО ВозвратТоваровОтПокупателя.Ссылка = Состав.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналЗаявок
	|			ПО ВозвратТоваровОтПокупателя.Ссылка = ЖурналЗаявок.Объект
	|				И (ЖурналЗаявок.Источник = &Партнер)
	|				И (ЖурналЗаявок.Идентификатор = ""Входящая"")
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутЭкспедитора.ДокументыОснования КАК тчДокументыОснования
	|			ПО ВозвратТоваровОтПокупателя.Ссылка = тчДокументыОснования.ДокументОснование
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутЭкспедитора КАК МаршрутЭкспедитора
	|			ПО (тчДокументыОснования.Ссылка = МаршрутЭкспедитора.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваОбъектов
	|			ПО ВозвратТоваровОтПокупателя.Ссылка = СвойстваОбъектов.Объект
	|				И (СвойстваОбъектов.Свойство = &Свойство_НомерПоДаннымПоставщика)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналЗаявокПоМаршрутам
	|			ПО (тчДокументыОснования.Ссылка = ЖурналЗаявокПоМаршрутам.Объект)
	|				И (ЖурналЗаявокПоМаршрутам.Приемник = &Партнер)
	|	ГДЕ
	|		ВозвратТоваровОтПокупателя.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	{ГДЕ
	|		ВозвратТоваровОтПокупателя.Склад.*,
	|		Состав.Номенклатура.* КАК ГруппаНоменклатуры}
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЖурналЗаявокПоМаршрутам.Статус,
	|		МаршрутЭкспедитора.Ссылка,
	|		ЕСТЬNULL(СвойстваОбъектов.Значение, """"),
	|		МаршрутЭкспедитора.ДатаЭкспедиции,
	|		МаршрутЭкспедитора.Транспорт,
	|		ВЫБОР
	|			КОГДА НЕ МаршрутЭкспедитора.Водитель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|				ТОГДА МаршрутЭкспедитора.Водитель
	|			ИНАЧЕ МаршрутЭкспедитора.Экспедитор
	|		КОНЕЦ,
	|		МаршрутЭкспедитора.ГруппаДоставки,
	|		ВЫРАЗИТЬ(МаршрутЭкспедитора.Комментарий КАК СТРОКА(500)),
	|		МаршрутЭкспедитора.ГотовКОтправкеВТранзит) КАК влЗАпрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналЗаявок
	|		ПО влЗАпрос.ДокументСсылка = ЖурналЗаявок.Объект
	|			И (ЖурналЗаявок.Приемник = &Партнер)
	|
	|СГРУППИРОВАТЬ ПО
	|	влЗАпрос.Статус,
	|	влЗАпрос.ДокументСсылка,
	|	влЗАпрос.ДатаЭкспедиции,
	|	влЗАпрос.Транспорт,
	|	влЗАпрос.ГотовКОтправке,
	|	влЗАпрос.Водитель,
	|	влЗАпрос.ГруппаДоставки,
	|	влЗАпрос.Комментарий,
	|	влЗАпрос.ЕстьДокументыПоКД,
	|	ВЫБОР
	|		КОГДА влЗАпрос.ГотовКОтправке = ЛОЖЬ
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналЗаявок.Объект ЕСТЬ NULL
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		ИНАЧЕ влЗАпрос.ГотовКОтправке
	|	КОНЕЦ";
	
КонецФункции

Функция ПолучитьТекстЗапросаПоВозвратамОтПокупателя()
	
	Возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЖурналЗаявок.Статус,
	|	ВозвратТоваровОтПокупателя.Склад,
	|	ВозвратТоваровОтПокупателя.Ссылка КАК ДокументСсылка,
	|	ЕСТЬNULL(СвойстваОбъектов.Значение, """") КАК НомерПоклажедателя,
	|	ЕСТЬNULL(СвойстваОбъектов2.Значение, """") КАК НомерТранспортировки,
	|	ВозвратТоваровОтПокупателя.Контрагент,
	|	ВозвратТоваровОтПокупателя.СтруктурнаяЕдиницаКонтрагента,
	|	СУММА(Состав.Количество * Состав.ЕдиницаИзмерения.ВесБрутто) КАК ОбщийВес,
	|	СУММА(Состав.Количество * Состав.ЕдиницаИзмерения.ОбъемБрутто) КАК ОбщийОбъем,
	|	ВозвратТоваровОтПокупателя.ТоварыПолучены,
	|	ВЫРАЗИТЬ(ВозвратТоваровОтПокупателя.Комментарий КАК СТРОКА(500)) КАК Комментарий
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК Состав
	|		ПО ВозвратТоваровОтПокупателя.Ссылка = Состав.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваОбъектов
	|		ПО ВозвратТоваровОтПокупателя.Ссылка = СвойстваОбъектов.Объект
	|			И (СвойстваОбъектов.Свойство = &Свойство_НомерВходящегоДокумента)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваОбъектов2
	|		ПО ВозвратТоваровОтПокупателя.Ссылка = СвойстваОбъектов2.Объект
	|			И (СвойстваОбъектов2.Свойство = &Свойство_НомерПоДаннымПоставщика)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналЗаявок
	|		ПО ВозвратТоваровОтПокупателя.Ссылка = ЖурналЗаявок.Объект
	|			И (ЖурналЗаявок.Источник = &Партнер)
	|			И (ЖурналЗаявок.Идентификатор = ""Входящая"")
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|{ГДЕ
	|	ВозвратТоваровОтПокупателя.ДоговорВладельца.* КАК ОсновнойДоговорПриемаНаХранение,
	|	ВозвратТоваровОтПокупателя.Склад.*,
	|	Состав.Номенклатура.* КАК ГруппаНоменклатуры}
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналЗаявок.Статус,
	|	ВозвратТоваровОтПокупателя.Склад,
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ЕСТЬNULL(СвойстваОбъектов.Значение, """"),
	|	ЕСТЬNULL(СвойстваОбъектов2.Значение, """"),
	|	ВозвратТоваровОтПокупателя.Контрагент,
	|	ВозвратТоваровОтПокупателя.СтруктурнаяЕдиницаКонтрагента,
	|	ВозвратТоваровОтПокупателя.ТоварыПолучены,
	|	ВЫРАЗИТЬ(ВозвратТоваровОтПокупателя.Комментарий КАК СТРОКА(500))
	|{УПОРЯДОЧИТЬ ПО
	|	ВозвратТоваровОтПокупателя.Дата}";	
	
КонецФункции
 
Функция ПолучитьТекстЗапросаДляПостроителя(ИмяТаблицы)
	
	Если ИмяТаблицы = "ЗаказыПоставщику" Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаПоЗаказамПоставщику();
		
	ИначеЕсли ИмяТаблицы = "ОтгрузкиТоваровУслуг" Тогда 
		
		ТекстЗапроса = ПолучитьТекстЗапросаПоОтгрузкаТоваровУслуг();
		
	ИначеЕсли ИмяТаблицы = "МаршрутыЭкспедиторов" Тогда 
		
		ТекстЗапроса = ПолучитьТекстЗапросаПоЭкспедиции();
		
	ИначеЕсли ИмяТаблицы = "ВозвратТоваровОтПокупателя" Тогда 
		
		ТекстЗапроса = ПолучитьТекстЗапросаПоВозвратамОтПокупателя(); 		
		
	///Антропов Е.П. от 28.11.2023 №000000117
	ИначеЕсли ИмяТаблицы = "ИнвентаризацияДоставкиСводная" Тогда 		
		ТекстЗапроса = ПолучитьТекстЗапросаПоИнвентаризацияДоставкиСводная();
	///Антропов Е.П. от 28.11.2023 №000000117
	
	КонецЕсли; 
	
	Возврат ТекстЗапроса
	
КонецФункции

Процедура ОчиститьОтборПостроителя(ОтборПостроителя)
	
	Пока ОтборПостроителя.Количество() > 0 Цикл
		
		ОтборПостроителя.Удалить(0);
		
	КонецЦикла;   
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиПостроителя(ИмяТаблицы)
	
	СвойстваПартнера = РегистрыСведений.ДополнительныеРеквизиты_3PL.ПолучитьСвойстваОбъекта(Партнер);
	
	ПостроительОтчета.Текст = ПолучитьТекстЗапросаДляПостроителя(ИмяТаблицы);
	ПостроительОтчета.Параметры.Вставить("Партнер",                          Строка(Партнер));
	ПостроительОтчета.Параметры.Вставить("НачалоПериода",                    НачалоПериода);
	ПостроительОтчета.Параметры.Вставить("КонецПериода",                     КонецДня(КонецПериода));
	ПостроительОтчета.Параметры.Вставить("Свойство_НомерВходящегоДокумента", СвойстваПартнера.Свойство_НомерВходящегоДокумента);
	ПостроительОтчета.Параметры.Вставить("Свойство_НомерПоДаннымПоставщика", СвойстваПартнера.Свойство_НомерТранспортировки);
	
	ПостроительОтчета.ЗаполнитьНастройки();
	
	ОчиститьОтборПостроителя(ПостроительОтчета.Отбор);
	
	Если ПостроительОтчета.Отбор.Количество() = 0 Тогда 		
		
		Если ИмяТаблицы <> "ИнвентаризацияДоставкиСводная" Тогда ///Антропов Е.П. от 28.11.2023 №000000117
		
		ПостроительОтчета.Отбор.Добавить("ОсновнойДоговорПриемаНаХранение");
		
		КонецЕсли; ///Антропов Е.П. от 28.11.2023 №000000117
		
		ПостроительОтчета.Отбор.Добавить("Склад");
		ПостроительОтчета.Отбор.Добавить("ГруппаНоменклатуры");
	КонецЕсли; 
	
	Для каждого Элемент Из ПостроительОтчета.Отбор Цикл
		
		Элемент.Значение = СвойстваПартнера[Элемент.Имя];
		Элемент.Использование = Истина;
		
		Если Элемент.Имя = "ГруппаНоменклатуры" Тогда
			Элемент.ВидСравнения = ВидСравнения.ВИерархии;
		КонецЕсли;
		
		Если Элемент.Имя = "Склад" Тогда
			Элемент.ВидСравнения = ВидСравнения.ВСписке;
			СписокСкладов = Новый СписокЗначений;
			СписокСкладов.Добавить(СвойстваПартнера.Склад);
			СписокСкладов.Добавить(СвойстваПартнера.СкладБаллонов);
			Элемент.Значение = СписокСкладов;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОбновитьТаблицуРабочегоМестаОператора()
	
	Если НачалоПериода = Дата(1,1,1)
		ИЛИ КонецПериода = Дата(1,1,1)
		Или Партнер.Пустая() Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	ИмяТекТаблицы = ЭлементыФормы.ПанельОбъектовОбмена.ТекущаяСтраница.Имя;
	
	ЗаполнитьНастройкиПостроителя(ИмяТекТаблицы);
	
	ПостроительОтчета.Выполнить();
	
	ЭтотОбъект[ИмяТекТаблицы].Загрузить(ПостроительОтчета.Результат.Выгрузить());
	
	//1С-ИжТиСи, ЛипинА, 21.09.23(
	Если ИмяТекТаблицы = "МаршрутыЭкспедиторов" Тогда
		ЗаполнитьСводнуюИнвентаризацию(ЭтотОбъект[ИмяТекТаблицы]);
	КонецЕсли;
	//1С-ИжТиСи, ЛипинА, 21.09.23)
	
КонецПроцедуры

Процедура ПанельОбъектовОбменаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьТаблицуРабочегоМестаОператора();
	
КонецПроцедуры

Процедура КоманднаяПанель1кнОбновитьНастройкиОбмена(Кнопка)
	
	СвойстваПартнера = Неопределено;
	ПрочитатьСвойстваПартнера();
	
КонецПроцедуры

Процедура ПутьКФайлуНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ДиалогВыбора = ПолучитьДиалогВыбора(РежимДиалогаВыбораФайла.Открытие, "Документ Microsoft Excel (*.xlsb)|*.xlsb|Документ Microsoft Excel (*.xlsx)|*.xlsx|Документ Microsoft Excel (*.xls)|*.xls"); 

	Если ДиалогВыбора.Выбрать() Тогда
		ПутьКФайлу = ДиалогВыбора.ПолноеИмяФайла;
	КонецЕсли;  
	
КонецПроцедуры 

Процедура КоманднаяПанель2ПрочитатьДанныеФайла(Кнопка)
	
	Если Партнер.Пустая() Тогда
		Сообщить("Поле 'Партнер' не заполнено");
		Возврат;
	КонецЕсли; 
	
	Если SPo1 = 1 Тогда
		  				
		///Антропов Е.П. от 27.11.2023 №000000119
		//ЗагрузитьКаталогТоваровВФорматеSPo1();
		ЗагрузитьКаталогТоваровВФорматеSPo1_2();
		///Антропов Е.П. от 27.11.2023 №000000119
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель2СоздатьНоменклатуру(Кнопка)
	
	ПрочитатьСвойстваПартнера();
	
	МассивОтмеченныхСтрок = Товары.НайтиСтроки(Новый Структура("Пометка", Истина));
	
	ТабЗнач = Новый ТаблицаЗначений;
	ТабЗнач.Колонки.Добавить("Родитель",                   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабЗнач.Колонки.Добавить("Артикул",                    Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25)));
	ТабЗнач.Колонки.Добавить("Наименование",               Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(120)));
	ТабЗнач.Колонки.Добавить("НаименованиеПолное",         Новый ОписаниеТипов("Строка"));
	ТабЗнач.Колонки.Добавить("Весовой",                    Новый ОписаниеТипов("Булево"));
	ТабЗнач.Колонки.Добавить("УчетПартий_в_ВМС",           Новый ОписаниеТипов("Булево"));
	ТабЗнач.Колонки.Добавить("ВидНоменклатуры",            Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"));
	ТабЗнач.Колонки.Добавить("ДистрибьюторскийКонтракт",   Новый ОписаниеТипов("СправочникСсылка.ДистрибьюторскиеКонтракты"));
	ТабЗнач.Колонки.Добавить("ОсновнойСкладОтгрузки",      Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТабЗнач.Колонки.Добавить("ГруппаМатериалов",           Новый ОписаниеТипов("СправочникСсылка.ГруппыМатериалов"));
	ТабЗнач.Колонки.Добавить("ГруппаХранения",             Новый ОписаниеТипов("СправочникСсылка.ГруппыХранения"));
	ТабЗнач.Колонки.Добавить("ГруппаПополнения",           Новый ОписаниеТипов("СправочникСсылка.ГруппыПополнения"));
	ТабЗнач.Колонки.Добавить("ГруппаПикинга",              Новый ОписаниеТипов("СправочникСсылка.ГруппыПикинга"));
	ТабЗнач.Колонки.Добавить("ФормФактор",                 Новый ОписаниеТипов("СправочникСсылка.ФормФакторы"));
	ТабЗнач.Колонки.Добавить("ОсновнойПоставщик",          Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТабЗнач.Колонки.Добавить("ПериодГодности",             Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	ТабЗнач.Колонки.Добавить("КоличествоПериодовГодности", Новый ОписаниеТипов("Число",  , , Новый КвалификаторыЧисла(5)));
	ТабЗнач.Колонки.Добавить("БазоваяЕдиницаИзмерения",    Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ТабЗнач.Колонки.Добавить("СтавкаНДС",                  Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТабЗнач.Колонки.Добавить("ЕдиницаЗакупок",             Новый ОписаниеТипов("Структура"));
	ТабЗнач.Колонки.Добавить("ЕдиницаЗакупок2",            Новый ОписаниеТипов("Структура"));
	ТабЗнач.Колонки.Добавить("ЕдиницаЗакупок3",            Новый ОписаниеТипов("Структура"));
	ТабЗнач.Колонки.Добавить("МодельСкладскогоУчета",      Новый ОписаниеТипов("СправочникСсылка.МоделиСкладскогоУчета"));
	
	ВидНоменклатуры          = Справочники.ВидыНоменклатуры.НайтиПоКоду("О00001");
	МодельСкладскогоУчета   = Справочники.МоделиСкладскогоУчета.НайтиПоКоду("О00002"); // Со сроком годности
	
	Для каждого Элемент Из МассивОтмеченныхСтрок Цикл
		
		НовСтр = ТабЗнач.Добавить();
		НовСтр.ДистрибьюторскийКонтракт = СвойстваПартнера.Контракт;
		НовСтр.ОсновнойСкладОтгрузки    = СвойстваПартнера.Склад;
		НовСтр.ОсновнойПоставщик        = СвойстваПартнера.ОсновнойПоставщик;
		НовСтр.Родитель                 = СвойстваПартнера.ГруппаНоменклатуры;
		НовСтр.ГруппаМатериалов         = СвойстваПартнера.ГруппаМатериалов;
		НовСтр.ГруппаХранения           = СвойстваПартнера.ГруппаХранения;
		НовСтр.ГруппаПополнения         = СвойстваПартнера.ГруппаПополнения;
		НовСтр.ГруппаПикинга            = СвойстваПартнера.ГруппаПикинга;
		НовСтр.ФормФактор               = СвойстваПартнера.ФормФактор;
		НовСтр.Артикул                  = Элемент.Артикул;
		НовСтр.Наименование             = Элемент.Наименование;
		НовСтр.НаименованиеПолное       = Элемент.Наименование;
		НовСтр.УчетПартий_в_ВМС         = Ложь;
		НовСтр.ВидНоменклатуры          = ВидНоменклатуры;
		НовСтр.СтавкаНДС                = Элемент.СтавкаНДС;
		НовСтр.ПериодГодности           = Элемент.ПериодГодности;
		НовСтр.КоличествоПериодовГодности = Элемент.КоличествоПериодовГодности;
		НовСтр.БазоваяЕдиницаИзмерения  = Элемент.КлассификаторЕдиницыШт;
		НовСтр.МодельСкладскогоУчета    = МодельСкладскогоУчета;
		
		ЕдиницаПоКлассификатору = Элемент.КлассификаторЕдиницыШт;
		
		НовСтр.ЕдиницаЗакупок.Вставить("Наименование",            ЕдиницаПоКлассификатору.Наименование);
		НовСтр.ЕдиницаЗакупок.Вставить("ЕдиницаПоКлассификатору", ЕдиницаПоКлассификатору);
		НовСтр.ЕдиницаЗакупок.Вставить("Вес",                     Элемент.ВесШт);
		НовСтр.ЕдиницаЗакупок.Вставить("ВесБрутто",               Элемент.ВесБруттоШт);
		НовСтр.ЕдиницаЗакупок.Вставить("Глубина",                 Элемент.ГлубинаШт);
		НовСтр.ЕдиницаЗакупок.Вставить("Высота",                  Элемент.ВысотаШт);
		НовСтр.ЕдиницаЗакупок.Вставить("Ширина",                  Элемент.ШиринаШт);
		НовСтр.ЕдиницаЗакупок.Вставить("КодовоеОбозначениеВКПК",  ЕдиницаПоКлассификатору.Наименование);
		НовСтр.ЕдиницаЗакупок.Вставить("Комплектация",            Истина);
		НовСтр.ЕдиницаЗакупок.Вставить("Коэффициент",             1);
		НовСтр.ЕдиницаЗакупок.Вставить("Объем",                   Элемент.ОбъемБруттоШт);
		НовСтр.ЕдиницаЗакупок.Вставить("ОбъемБрутто",             Элемент.ОбъемБруттоШт);
		НовСтр.ЕдиницаЗакупок.Вставить("ТехнологическаяУпаковка", ?(ЕдиницаПоКлассификатору.Код = "778",
		Перечисления.ВидыТехнологическихУпаковок.PACK,         Перечисления.ВидыТехнологическихУпаковок.ST));
		НовСтр.ЕдиницаЗакупок.Вставить("Штрихкод",                Элемент.ШтрихкодШт);
		
		ЕдиницаПоКлассификатору = Элемент.КлассификаторЕдиницыУпак;
		
		НовСтр.ЕдиницаЗакупок2.Вставить("Наименование",            ЕдиницаПоКлассификатору.Наименование + ?(Элемент.КоэффициентУпак > 1, Строка(Элемент.КоэффициентУпак), ""));
		НовСтр.ЕдиницаЗакупок2.Вставить("ЕдиницаПоКлассификатору", ЕдиницаПоКлассификатору);
		НовСтр.ЕдиницаЗакупок2.Вставить("Вес",                     Элемент.ВесУпак);
		НовСтр.ЕдиницаЗакупок2.Вставить("ВесБрутто",               Элемент.ВесБруттоУпак);
		НовСтр.ЕдиницаЗакупок2.Вставить("Глубина",                 Элемент.ГлубинаУпак);
		НовСтр.ЕдиницаЗакупок2.Вставить("Высота",                  Элемент.ВысотаУпак);
		НовСтр.ЕдиницаЗакупок2.Вставить("Ширина",                  Элемент.ШиринаУпак);
		НовСтр.ЕдиницаЗакупок2.Вставить("КодовоеОбозначениеВКПК",  "Кор");
		НовСтр.ЕдиницаЗакупок2.Вставить("Комплектация",            Истина);
		НовСтр.ЕдиницаЗакупок2.Вставить("Коэффициент",             Элемент.КоэффициентУпак);
		НовСтр.ЕдиницаЗакупок2.Вставить("Объем",                   Элемент.ОбъемБруттоУпак);
		НовСтр.ЕдиницаЗакупок2.Вставить("ОбъемБрутто",             Элемент.ОбъемБруттоУпак);
		НовСтр.ЕдиницаЗакупок2.Вставить("ТехнологическаяУпаковка", ?(ЕдиницаПоКлассификатору.Код = "778",
		Перечисления.ВидыТехнологическихУпаковок.PACK,         Перечисления.ВидыТехнологическихУпаковок.ST));
		НовСтр.ЕдиницаЗакупок2.Вставить("Штрихкод",                Элемент.ШтрихкодУпак);
		
	КонецЦикла;
	
	ОбработкаНоменклатурыИзФайла(ТабЗнач);
		
КонецПроцедуры

Процедура КоманднаяПанель1РаспределитьВыкупПаЗаказам(Кнопка)
	
	
	
КонецПроцедуры

Процедура КоманднаяПанельОТУПолучитьПечатныеФормыПоДокументам(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Партнер) Тогда
		Сообщить("Не заполнено поле 'Партнер'", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли; 
	
	ВыделенныеСтроки = ЭлементыФормы.ОтгрузкиТоваровУслуг.ВыделенныеСтроки;
	
	МассивНомеровТранспортировок = Новый Массив;
	
	Для каждого ВыдСтрока Из ВыделенныеСтроки Цикл
		
		НомерТранспортировки = ВыдСтрока.НомерТранспортировки;
		
		Если МассивНомеровТранспортировок.Найти(НомерТранспортировки) = Неопределено Тогда
			МассивНомеровТранспортировок.Добавить(НомерТранспортировки);
		Иначе
			Продолжить;
		КонецЕсли;
		
		РегистраторЗаписи = Документы.РегистраторЗаписи.СоздатьНовыйДокумент(""+ВыдСтрока.ДокументСсылка);
		
		_3PLСервер.ДобавитьЗаписьПоДокументуВЖурналОпераций(РегистраторЗаписи, Строка(Партнер), "1С",
			Справочники.СтатусыЗаявок.Новая, "prints", ТекущаяДатаСеанса(),, НомерТранспортировки);
		
	КонецЦикла;
		
	ПолучитьПечатныеФормы();	
	
КонецПроцедуры

Процедура КоманднаяПанельМаршрутыПолучитьПечатныеФормы(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Партнер) Тогда
		Сообщить("Не заполнено поле 'Партнер'", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли; 
	
	ВыделенныеСтроки = ЭлементыФормы.МаршрутыЭкспедиторов.ВыделенныеСтроки;
	
	МассивНомеровТранспортировок = Новый Массив;
	
	Для каждого ВыдСтрока Из ВыделенныеСтроки Цикл
		
		НомерТранспортировки = ВыдСтрока.НомерТранспортировки;
		
		Если МассивНомеровТранспортировок.Найти(НомерТранспортировки) = Неопределено Тогда
			МассивНомеровТранспортировок.Добавить(НомерТранспортировки);
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НомерТранспортировки) Тогда
			Сообщить("У документа '%1' не заполнен номер транспортировки", СтатусСообщения.Внимание);
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ЗаявкаНаПолучениеПечатныхФормСуществует(НомерТранспортировки) Тогда
			
			РегистраторЗаписи = Документы.РегистраторЗаписи.СоздатьНовыйДокумент(""+ВыдСтрока.ДокументСсылка);
			
			_3PLСервер.ДобавитьЗаписьПоДокументуВЖурналОпераций(РегистраторЗаписи, Строка(Партнер), "1С",
			Справочники.СтатусыЗаявок.Новая, "prints", ТекущаяДатаСеанса(),, НомерТранспортировки);
			
		КонецЕсли; 
		
		Попытка
			ПолучитьПечатныеФормы(НомерТранспортировки);
		Исключение
			Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось получить печатные формы транспортировки '%1' по причине: %2", НомерТранспортировки, ОписаниеОшибки()), СтатусСообщения.ОченьВажное);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельВозвратыОтПокупателяОбновитьТаблицуВозвратовОтПокупателя(Кнопка)
	
	ОбновитьТаблицуРабочегоМестаОператора();
	
КонецПроцедуры

Процедура КоманднаяПанель1СоздатьНастройкиПартнераНаОсновании(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Партнер) Тогда
		ВызватьИсключение "В обработке обмена не заполнено поле 'Партнер'";
	КонецЕсли; 
	
	ФормаВыбора = Справочники.КонтурEDI_ДополнительныеСправочники.ПолучитьФормуВыбора();
	НовПартнер = ФормаВыбора.ОткрытьМодально(30);
		
	Если ЗначениеЗаполнено(НовПартнер) Тогда
				
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ РегистрСведений.ДополнительныеРеквизиты_3PL ГДЕ Объект = &ПартнерОснование";
		Запрос.УстановитьПараметр("ПартнерОснование", Партнер); 
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		РезультатЗапроса.ЗаполнитьЗначения(НовПартнер, "Объект");
		
		НаборЗаписей = РегистрыСведений.ДополнительныеРеквизиты_3PL.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(НовПартнер);
		НаборЗаписей.Загрузить(РезультатЗапроса);
		НаборЗаписей.Записать();
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ПрочитатьДанныеИзФайлов()
	
	Если ПутьКФайлу = "" Тогда
		Сообщить("Не выбран путь к файлу!", СтатусСообщения.Внимание);
		Возврат Неопределено;
	КонецЕсли; 
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Прочитать(ПутьКФайлу);
	
	ОбластиТаб = ТабДок.Область(1, 1, ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы);
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластиТаб);  
	Построитель.Выполнить();
	
	Возврат Построитель.Результат.Выгрузить();
	
КонецФункции
 
Процедура кнЗагрузкаИсходящихПоставокНажатие(Элемент)
	
	ТипыПоставок = "J";
	
	Данные = ПрочитатьДанныеИзФайлов();
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
		
	Если СвойстваПартнера = Неопределено Тогда
		ПрочитатьСвойстваПартнера();
	КонецЕсли;
	
	ЗагрузитьПоставкиИзФайла(Данные, ТипыПоставок);
		
КонецПроцедуры

Процедура кнЗагрузкаИсходящихПоставокНаВозвратНажатие(Элемент)
	
	ТипыПоставок = "T";
	
	Данные = ПрочитатьДанныеИзФайлов();
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
		
	Если СвойстваПартнера = Неопределено Тогда
		ПрочитатьСвойстваПартнера();
	КонецЕсли;
	
	ЗагрузитьПоставкиИзФайла(Данные, ТипыПоставок);	
	
КонецПроцедуры

Процедура кнВыгрузитьМаршрутыНажатие(Элемент)
	
	Если СвойстваПартнера = Неопределено Тогда
		ПрочитатьСвойстваПартнера();
	КонецЕсли;
	
	ВыгрузитьМаршрутыВФайл();	
	
КонецПроцедуры

Процедура кнЗагрузитьНомераПоставокНажатие(Элемент)
	
	Данные = ПрочитатьДанныеИзФайлов();
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если СвойстваПартнера = Неопределено Тогда
		ПрочитатьСвойстваПартнера();
	КонецЕсли;
	
	ЗагрузитьНомераТранспортировокИзФайла(Данные);
	
КонецПроцедуры

Процедура кнВыгрузитьОстаткиНажатие(Элемент)
	
	ПутьКФайлу = "";
	#Если Клиент Тогда
		ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Если ДиалогВыбора.Выбрать() Тогда
			ПутьКФайлу = ДиалогВыбора.ПолноеИмяФайла + ".xlsx";
		КонецЕсли;
	#КонецЕсли

	Если ПустаяСтрока(ПутьКФайлу) Тогда
		Сообщить("Не выбран путь к файлу", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли; 
	
	ВыгрузитьОстаткиВФайл(ПутьКФайлу);
		
КонецПроцедуры

//1С-ИжТиСи, Липин А., 11.09.2023(
Процедура КоманднаяПанельМаршрутыСоздатьЧекиныВSAP(Кнопка)
	
	ВыделенныеСтроки = ЭлементыФормы.МаршрутыЭкспедиторов.ВыделенныеСтроки;
	
	мНомераТранспортировки = Новый Массив;
	
	Для Каждого ВыдСтрока Из ВыделенныеСтроки Цикл
		мНомераТранспортировки.Добавить(ВыдСтрока.НомерТранспортировки);
	КонецЦикла;
		
	тзДокументы = ПолучитьДокументыПоНомерамТранспортировки(мНомераТранспортировки);
	
	Если тзДокументы.Количество() = 0 Тогда
		Сообщить("Не удалось найти документы отгрузки по выбранным номерам транспортировки", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
		
	Для Каждого НомерТранспортировки Из мНомераТранспортировки Цикл
		
		ДокументыПоНомеруТранспортировки = тзДокументы.НайтиСтроки(Новый Структура("НомерТранспортировки", НомерТранспортировки));
		
		Если ДокументыПоНомеруТранспортировки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
				
		СообщениеОНехваткеИнвентаризаций = "";
		СообщениеОПроведеннойСводнойИнвентаризации = "";
		
		Для Каждого Строка Из ДокументыПоНомеруТранспортировки Цикл
			
			Если Строка.ЕстьИнвентаризация = Ложь Тогда
				
				Если СообщениеОНехваткеИнвентаризаций = "" Тогда
					СообщениеОНехваткеИнвентаризаций = СтрШаблон("Не удалось создать чекин в SAP по транспортировке '%1' по причине:%2", НомерТранспортировки, Символы.ПС);
				КонецЕсли;
				
				СообщениеОНехваткеИнвентаризаций = СтрШаблон("%1 - по документу отгрузки %2 не создан документ ‘Инвентаризация доставки’%3", 
					СообщениеОНехваткеИнвентаризаций, Строка.Документ, Символы.ПС);
				
			ИначеЕсли Строка.ЕстьСводнаяИнвентаризация И СообщениеОПроведеннойСводнойИнвентаризации = "" Тогда
				
				СообщениеОПроведеннойСводнойИнвентаризации = СтрШаблон("По транспортировке %1 найдена проведенная %2", 
					НомерТранспортировки, Строка.СводнаяИнвентаризация);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СообщениеОНехваткеИнвентаризаций) Тогда
			Сообщить(СообщениеОНехваткеИнвентаризаций, СтатусСообщения.Внимание);
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(СообщениеОПроведеннойСводнойИнвентаризации) Тогда
			Сообщить(СообщениеОПроведеннойСводнойИнвентаризации, СтатусСообщения.Внимание);
			Продолжить;
		КонецЕсли;
		
		СводнаяИнвентаризация = СоздатьСводнуюИнвентаризациюДоставки(ДокументыПоНомеруТранспортировки);
				
		ЕстьВычеркиДляОтправки = ПроверитьСводнуюИвентаризациюНаВычерки(СводнаяИнвентаризация.Ссылка);
		
		Если ЕстьВычеркиДляОтправки Тогда
			
			JSONДляОтправки = СформироватьJSONДляОтправки(ДокументыПоНомеруТранспортировки, СводнаяИнвентаризация);
			ЗарегистрироватьИнвентаризациюВЖурналСостоянийЗаявок(СводнаяИнвентаризация, JSONДляОтправки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСводнуюИнвентаризацию(МаршрутыЭкспедиторов, мНомераТранспортировки);
	
	ВыгрузитьЧекины();
	
КонецПроцедуры

Функция ПолучитьДокументыПоНомерамТранспортировки(НомераТранспортировки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект КАК Документ,
	|	ЗначенияСвойствОбъектов.Значение КАК НомерТранспортировки
	|ПОМЕСТИТЬ ВТ_ДокументыПоНомеруТранспортировкиПредварительная
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &НомерПоДаннымПоставщика
	|	И ЗначенияСвойствОбъектов.Значение В(&НомераТранспортировки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыПоНомеруТранспортировкиПредварительная.Документ КАК Документ,
	|	МаршрутЭкспедитора.Документ КАК МаршрутЭкспедитора,
	|	ВТ_ДокументыПоНомеруТранспортировкиПредварительная.НомерТранспортировки КАК НомерТранспортировки
	|ПОМЕСТИТЬ ВТ_ДокументыПоНомеруТранспортировки
	|ИЗ
	|	ВТ_ДокументыПоНомеруТранспортировкиПредварительная КАК ВТ_ДокументыПоНомеруТранспортировкиПредварительная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыПоНомеруТранспортировкиПредварительная КАК МаршрутЭкспедитора
	|		ПО (МаршрутЭкспедитора.НомерТранспортировки = ВТ_ДокументыПоНомеруТранспортировкиПредварительная.НомерТранспортировки)
	|			И (ТИПЗНАЧЕНИЯ(МаршрутЭкспедитора.Документ) = ТИП(Документ.МаршрутЭкспедитора))
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ВТ_ДокументыПоНомеруТранспортировкиПредварительная.Документ) = ТИП(Документ.ОтгрузкаТоваровУслуг)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыПоНомеруТранспортировки.Документ КАК Документ,
	|	ВТ_ДокументыПоНомеруТранспортировки.МаршрутЭкспедитора КАК МаршрутЭкспедитора,
	|	МАКСИМУМ(ИнвентаризацияДоставкиСводнаяДокументыОтгрузки.Ссылка) КАК ДокументИнвентаризации
	|ПОМЕСТИТЬ ВТ_СводнаяИнвентаризация
	|ИЗ
	|	ВТ_ДокументыПоНомеруТранспортировки КАК ВТ_ДокументыПоНомеруТранспортировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияДоставкиСводная.ДокументыОтгрузки КАК ИнвентаризацияДоставкиСводнаяДокументыОтгрузки
	|		ПО (ИнвентаризацияДоставкиСводнаяДокументыОтгрузки.ДокументОтгрузки = ВТ_ДокументыПоНомеруТранспортировки.Документ)
	|			И (ИнвентаризацияДоставкиСводнаяДокументыОтгрузки.Маршрут = ВТ_ДокументыПоНомеруТранспортировки.МаршрутЭкспедитора)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДокументыПоНомеруТранспортировки.Документ,
	|	ВТ_ДокументыПоНомеруТранспортировки.МаршрутЭкспедитора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыПоНомеруТранспортировки.Документ КАК Документ,
	|	ВТ_ДокументыПоНомеруТранспортировки.МаршрутЭкспедитора КАК МаршрутЭкспедитора,
	|	ИнвентаризацияДоставки.Ссылка КАК Инвентаризация,
	|	ВТ_СводнаяИнвентаризация.ДокументИнвентаризации КАК СводнаяИнвентаризация,
	|	ВТ_ДокументыПоНомеруТранспортировки.НомерТранспортировки КАК НомерТранспортировки,
	|	ЕСТЬNULL(ИнвентаризацияДоставки.Проведен, ЛОЖЬ) КАК ЕстьИнвентаризация,
	|	ЕСТЬNULL(ИнвентаризацияДоставкиСводная.Проведен, ЛОЖЬ) КАК ЕстьСводнаяИнвентаризация
	|ИЗ
	|	ВТ_ДокументыПоНомеруТранспортировки КАК ВТ_ДокументыПоНомеруТранспортировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияДоставки КАК ИнвентаризацияДоставки
	|		ПО ВТ_ДокументыПоНомеруТранспортировки.Документ = ИнвентаризацияДоставки.ДокументОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СводнаяИнвентаризация КАК ВТ_СводнаяИнвентаризация
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияДоставкиСводная КАК ИнвентаризацияДоставкиСводная
	|			ПО (ИнвентаризацияДоставкиСводная.Ссылка = ВТ_СводнаяИнвентаризация.ДокументИнвентаризации)
	|		ПО (ВТ_СводнаяИнвентаризация.Документ = ВТ_ДокументыПоНомеруТранспортировки.Документ)
	|			И (ВТ_СводнаяИнвентаризация.МаршрутЭкспедитора = ВТ_ДокументыПоНомеруТранспортировки.МаршрутЭкспедитора)";
	
	Запрос.УстановитьПараметр("НомерПоДаннымПоставщика", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("НомерПоДаннымПоставщика"));
	Запрос.УстановитьПараметр("НомераТранспортировки", НомераТранспортировки);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция СоздатьСводнуюИнвентаризациюДоставки(ДокументыПоНомеруТранспортировки)
	
	Если СвойстваПартнера = Неопределено Тогда
		ПрочитатьСвойстваПартнера();
	КонецЕсли;
	
	НоваяСводнаяИнвентаризация = Документы.ИнвентаризацияДоставкиСводная.СоздатьДокумент();
	
	НоваяСводнаяИнвентаризация.Организация = СвойстваПартнера.ОсновнаяОрганизация;
	НоваяСводнаяИнвентаризация.Склад = СвойстваПартнера.Склад;
	НоваяСводнаяИнвентаризация.Дата = ТекущаяДатаСеанса();
	НоваяСводнаяИнвентаризация.Автор = ПараметрыСеанса.ТекущийПользователь;
	НоваяСводнаяИнвентаризация.ДатаЭкспедиции = ДокументыПоНомеруТранспортировки[0].МаршрутЭкспедитора;;
	НоваяСводнаяИнвентаризация.Комментарий = "Документ создан обработкой обмена с Пепси по 3PL";
	
	Для Каждого Строка Из ДокументыПоНомеруТранспортировки Цикл
		
		СтрокаДокументовОтгрузки = НоваяСводнаяИнвентаризация.ДокументыОтгрузки.Добавить();
		СтрокаДокументовОтгрузки.ДокументОтгрузки = Строка.Документ;
		СтрокаДокументовОтгрузки.Маршрут = Строка.МаршрутЭкспедитора;
		
	КонецЦикла;
	
	НоменклатураПоИнвентаризациям = ПолучитьНоменклатуруПоИнвентаризациям(ДокументыПоНомеруТранспортировки);
	
	Если НоменклатураПоИнвентаризациям.Количество() > 0 Тогда
		
		НоваяСводнаяИнвентаризация.Товары.Загрузить(НоменклатураПоИнвентаризациям);
		
	КонецЕсли;
	Попытка
		НоваяСводнаяИнвентаризация.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить(СтрШаблон("По транспортировке %1 не удалось создать документ 'Инвентаризация доставки сводная' по причине: %2",
			ДокументыПоНомеруТранспортировки[0].НомерТранспортировки, ОписаниеОшибки()), СтатусСообщения.Внимание);
	КонецПопытки;
	
	СтруктураЗаписиВРегистрЗначениеСвойств = Новый Структура;
	СтруктураЗаписиВРегистрЗначениеСвойств.Вставить("Объект", НоваяСводнаяИнвентаризация.Ссылка);
	СтруктураЗаписиВРегистрЗначениеСвойств.Вставить("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("НомерПоДаннымПоставщика"));
	СтруктураЗаписиВРегистрЗначениеСвойств.Вставить("Значение", ДокументыПоНомеруТранспортировки[0].НомерТранспортировки);
	
	ОбщиеФункции.УстановитьЗначениеСвойства(СтруктураЗаписиВРегистрЗначениеСвойств);
	
	Возврат НоваяСводнаяИнвентаризация;
	
КонецФункции

Функция ПолучитьНоменклатуруПоИнвентаризациям(ДокументыПоНомеруТранспортировки)
	
	мИнвентаризаций = Новый Массив;
	
	Для Каждого Строка Из ДокументыПоНомеруТранспортировки Цикл
		Если ЗначениеЗаполнено(Строка.Инвентаризация) И Строка.ЕстьИнвентаризация Тогда
			мИнвентаризаций.Добавить(Строка.Инвентаризация);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацияДоставкиТовары.Номенклатура КАК Номенклатура,
		|	ИнвентаризацияДоставкиТовары.Качество КАК Качество,
		|	ИнвентаризацияДоставкиТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ИнвентаризацияДоставкиТовары.Коэффициент КАК Коэффициент,
		|	ИнвентаризацияДоставкиТовары.Передано КАК Передано,
		|	ИнвентаризацияДоставкиТовары.Количество КАК Отгружено,
		|	ИнвентаризацияДоставкиТовары.Количество - ИнвентаризацияДоставкиТовары.Передано КАК Количество
		|ИЗ
		|	Документ.ИнвентаризацияДоставки.Товары КАК ИнвентаризацияДоставкиТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияДоставки КАК ИнвентаризацияДоставки
		|		ПО ИнвентаризацияДоставкиТовары.Ссылка = ИнвентаризацияДоставки.Ссылка
		|ГДЕ
		|	ИнвентаризацияДоставки.Ссылка В(&мИнвентаризаций)";
	
	Запрос.УстановитьПараметр("мИнвентаризаций", мИнвентаризаций);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция СформироватьJSONДляОтправки(ДокументыПоНомеруТранспортировки, СводнаяИнвентаризация)
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	СтруктураФайла = Новый Структура;
	
	СтруктураФайла.Вставить("interfaceName", "returndelivery");
	СтруктураФайла.Вставить("shippingPoint", СвойстваПартнера.ТехническоеИмяМестаОтгрузки);
	СтруктураФайла.Вставить("deliveryType", "ZLOR");
	СтруктураФайла.Вставить("salesOrganisation", "RU03"); //Уточнить какой тип когда устанавливать
	СтруктураФайла.Вставить("customerNumber", ОбщиеФункции.ВернутьЗначениеСвойстваОбъекта(ДокументыПоНомеруТранспортировки[0].МаршрутЭкспедитора.Экспедитор, 
		ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьСвойствоПоИмени("КодSAP_PepsiCo")));
	СтруктураФайла.Вставить("plant", СвойстваПартнера.КодДистрибьютора);
	СтруктураФайла.Вставить("distributionChannel", "05");
	
	МассивmaterialDetails = Новый Массив;
	
	//Исправление с ТаблицаСкладовПоклажедателей(
	СформироватьТаблицуСкладовПоклажедателей();
	//Исправление с ТаблицаСкладовПоклажедателей)
	
	Для Каждого Строка Из СводнаяИнвентаризация.Товары Цикл
		
		Если Строка.Количество > 0 Тогда
			
			СтруктураmaterialDetails = Новый Структура;
			
			СтруктураmaterialDetails.Вставить("materialNumber", Строка.Номенклатура.Артикул);
			СтруктураmaterialDetails.Вставить("uomQuantity", ОпределитьЕдиницуИзмеренияПепси(Строка.ЕдиницаИзмерения, Строка.Номенклатура));
			СтруктураmaterialDetails.Вставить("deliveredQuantity", Строка.Количество);
			СтруктураmaterialDetails.Вставить("plant", СвойстваПартнера.КодДистрибьютора);

			СтрокаСоСкладомПоклажедателя = ТаблицаСкладовПоклажедателей.Найти(Строка.Качество, "СсылкаНаОбъект");
			СтруктураmaterialDetails.Вставить("storageLocation", СтрокаСоСкладомПоклажедателя.Код);
			
			МассивmaterialDetails.Добавить(СтруктураmaterialDetails);
			
		КонецЕсли;
	
	КонецЦикла;
	
	//Исправление упущения materialDetails(
	СтруктураФайла.Вставить("materialDetails", МассивmaterialDetails);
	//Исправление упущения materialDetails)
	
	МассивdeliveryDataDetails = Новый Массив;
		СтруктураdeliveryDataDetails = Новый Структура;
		СтруктураdeliveryDataDetails.Вставить("structureName", "LIKP-LIFEX");
		СтруктураdeliveryDataDetails.Вставить("deliveryData", ДокументыПоНомеруТранспортировки[0].НомерТранспортировки);
	МассивdeliveryDataDetails.Добавить(СтруктураdeliveryDataDetails);
	СтруктураФайла.Вставить("deliveryDataDetails", МассивdeliveryDataDetails);
		
	МассивreturnDeliveryTimeDetails = Новый Массив;
		СтруктураreturnDeliveryTimeDetails = Новый Структура;
		СтруктураreturnDeliveryTimeDetails.Вставить("timeStamp", ТекущаяДатаСеанса());
		СтруктураreturnDeliveryTimeDetails.Вставить("logicalTime", "WSHDRWADAT");
		
		СтруктураreturnDeliveryTimeDetails2 = Новый Структура;
		СтруктураreturnDeliveryTimeDetails2.Вставить("timeStamp", ТекущаяДатаСеанса());
		СтруктураreturnDeliveryTimeDetails2.Вставить("logicalTime", "WSHDRLFDAT");

	МассивreturnDeliveryTimeDetails.Добавить(СтруктураreturnDeliveryTimeDetails);
	МассивreturnDeliveryTimeDetails.Добавить(СтруктураreturnDeliveryTimeDetails2);
	
	СтруктураФайла.Вставить("returnDeliveryTimeDetails", МассивreturnDeliveryTimeDetails);
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураФайла);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Процедура ЗарегистрироватьИнвентаризациюВЖурналСостоянийЗаявок(СводнаяИнвентаризация, JSONДляОтправки)
	
	СтруктураЗаписи = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьСтруктуруЗаписи();
	
	СтруктураЗаписи.Вставить("Объект", СводнаяИнвентаризация.Ссылка);
	СтруктураЗаписи.Вставить("Источник", "1С");
	СтруктураЗаписи.Вставить("Приемник", Партнер);
	СтруктураЗаписи.Вставить("Идентификатор", "#Чекин");
	СтруктураЗаписи.Вставить("Текст", JSONДляОтправки);
	СтруктураЗаписи.Вставить("ДатаЗаписи", ТекущаяДатаСеанса());
	СтруктураЗаписи.Вставить("Статус", Справочники.СтатусыЗаявок.Новая);
	
	РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

Функция ПроверитьСводнуюИвентаризациюНаВычерки(СводнаяИнвентаризация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИнвентаризацияДоставкиСводнаяТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	Документ.ИнвентаризацияДоставкиСводная.Товары КАК ИнвентаризацияДоставкиСводнаяТовары
		|ГДЕ
		|	ИнвентаризацияДоставкиСводнаяТовары.Количество > 0
		|	И ИнвентаризацияДоставкиСводнаяТовары.Ссылка = &СводнаяИнвентаризация";
	
	Запрос.УстановитьПараметр("СводнаяИнвентаризация", СводнаяИнвентаризация);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат ?(РезультатЗапроса.Количество() > 0, Истина, Ложь);
	
КонецФункции

Процедура ЗаполнитьСводнуюИнвентаризацию(ТаблицаМаршрутовЭкспедиторов, НомераТранспортировок = Неопределено)
	
	Если ТаблицаМаршрутовЭкспедиторов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваПартнера = РегистрыСведений.ДополнительныеРеквизиты_3PL.ПолучитьСвойстваОбъекта(Партнер);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ЗначенияСвойствОбъектов.Объект) КАК ИнвентаризацияДоставкиСводная,
		|	ЗначенияСвойствОбъектов.Значение КАК НомерТранспортировки
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Значение В(&НомераТранспортировок)
		|	И ТИПЗНАЧЕНИЯ(ЗначенияСвойствОбъектов.Объект) = ТИП(Документ.ИнвентаризацияДоставкиСводная)
		|	И ЗначенияСвойствОбъектов.Свойство = &Свойство_НомерПоДаннымПоставщика
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияСвойствОбъектов.Значение";
	
	Запрос.УстановитьПараметр("НомераТранспортировок", ?(НомераТранспортировок <> Неопределено, НомераТранспортировок, ТаблицаМаршрутовЭкспедиторов.ВыгрузитьКолонку("НомерТранспортировки")));
	Запрос.УстановитьПараметр("Свойство_НомерПоДаннымПоставщика", СвойстваПартнера.Свойство_НомерТранспортировки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НайденныеСтроки = ТаблицаМаршрутовЭкспедиторов.НайтиСтроки(Новый Структура("НомерТранспортировки", Выборка.НомерТранспортировки));
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Строка.ИнвентаризацияДоставкиСводная = Выборка.ИнвентаризацияДоставкиСводная;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КнопкаВыгрузитьЧекиныНажатие(Элемент)
	
	ВыгрузитьЧекины();
	
КонецПроцедуры
//1С-ИжТиСи, Липин А., 11.09.2023)


///Антропов Е.П. от 27.11.2023 №000000119
Процедура ЗагрузитьКаталогТоваровВФорматеSPo1_2()
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Сообщить("Не выбран путь к файлу");
		Возврат;
	КонецЕсли; 
	
	Товары.Очистить();
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.Visible = Ложь;
		Excel.DisplayAlerts = Ложь; 
		
		WB  = Excel.Workbooks.Open(ПутьКФайлу);
		WS  = WB.Worksheets("PMDR"); 
		arr = WS.UsedRange.Value;  
		WB.Close(0);
	Исключение
		Предупреждение("Внимание! Файл не открыт."+Символы.ПС+"Попробуйте открыть и пересохранить данный файл программой Excel.");
		Возврат;
	КонецПопытки;
	
	МассивКолонок = arr.Выгрузить();
	ВсегоСтрок    = (МассивКолонок.Получить(0).Количество())-1;
	
	КолАртикул                    = 1;
	КолНаименование               = 2;
	КолКатегория                  = 3;
	КолСтавкаНДС                  = 66;
	КолКоличествоПериодовГодности = 73;
	КолПериодГодности             = 74;
	КолЛитраж                     = 71;
	КолШкШт                       = 86;
	КолГлубинаШт                  = 87;
	КолШиринаШт                   = 88;
	КолВысотаШт                   = 89;
	КолВесШт                      = 89;
	КолВесБруттоШт                = 91;
	КолОбъемБруттоШт              = 92;
	КолШкУпак                     = 103;
	КолКоэффициентУпак            = 104;
	КолГлубинаУпак                = 105;
	КолШиринаУпак                 = 106;
	КолВысотаУпак                 = 107;
	КолВесУпак                    = 108;
	КолВесБруттоУпак              = 109;
	КолОбъемБруттоУпак            = 110;
	
	Товары.Очистить();
	
	КлассификаторЕдиницыШт   = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
	КлассификаторЕдиницыУпак = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778");
	
	Для СтрМассива = 3 По ВсегоСтрок Цикл
		
		Артикул = МассивКолонок.Получить(КолАртикул-1).Получить(СтрМассива);
		
		Если НЕ ЗначениеЗаполнено(Артикул) Тогда
			Прервать;
		КонецЕсли;
		
		НовСтр = Товары.Добавить();
		НовСтр.Артикул                  = Формат(Артикул, "ЧГ=0");
		НовСтр.Наименование             = ПолучитьЗначениеЯчейкиИзМассива(КолНаименование, МассивКолонок, СтрМассива);		
		НовСтр.Категория                = ПолучитьЗначениеЯчейкиИзМассива(КолКатегория, МассивКолонок, СтрМассива);
		НовСтр.СтавкаНДС                = ПолучитьСтавкуНДСИзСтроки(ПолучитьЗначениеЯчейкиИзМассива(КолСтавкаНДС, МассивКолонок, СтрМассива));
			                                                                        
		ОпределитьПериодГодности(ЛЕВ(ПолучитьЗначениеЯчейкиИзМассива(КолПериодГодности, МассивКолонок, СтрМассива), 1), ФорматироватьВЧисло(ПолучитьЗначениеЯчейкиИзМассива(КолКоличествоПериодовГодности, МассивКолонок, СтрМассива)), НовСтр.ПериодГодности, НовСтр.КоличествоПериодовГодности);
			
		НовСтр.Литраж                   = ФорматироватьВЧисло(ПолучитьЗначениеЯчейкиИзМассива(КолЛитраж, МассивКолонок, СтрМассива));
		НовСтр.ШтрихкодШт               = ПолучитьЗначениеЯчейкиИзМассива(КолШкШт, МассивКолонок, СтрМассива);
		НовСтр.ГлубинаШт                = ПересчитатьГабаритыВМетры(ФорматироватьВЧисло(ПолучитьЗначениеЯчейкиИзМассива(КолГлубинаШт, МассивКолонок, СтрМассива)), "CM"); 
		НовСтр.ШиринаШт                 = ПересчитатьГабаритыВМетры(ФорматироватьВЧисло(ПолучитьЗначениеЯчейкиИзМассива(КолШиринаШт, МассивКолонок, СтрМассива)), "CM");
		НовСтр.ВысотаШт                 = ПересчитатьГабаритыВМетры(ФорматироватьВЧисло(ПолучитьЗначениеЯчейкиИзМассива(КолВысотаШт, МассивКолонок, СтрМассива)), "CM"); 
		НовСтр.ВесШт                    = ФорматироватьВЧисло(ПолучитьЗначениеЯчейкиИзМассива(КолВесШт, МассивКолонок, СтрМассива)); 
		НовСтр.ВесБруттоШт              = ФорматироватьВЧисло(ПолучитьЗначениеЯчейкиИзМассива(КолВесБруттоШт, МассивКолонок, СтрМассива)); 		
		НовСтр.ОбъемБруттоШт            = Окр(НовСтр.ГлубинаШт * НовСтр.ШиринаШт * НовСтр.ВысотаШт, 6);
		НовСтр.КлассификаторЕдиницыШт   = КлассификаторЕдиницыШт;
		
		НовСтр.ШтрихкодУпак             = ПолучитьЗначениеЯчейкиИзМассива(КолШкУпак, МассивКолонок, СтрМассива);
		НовСтр.КоэффициентУпак          = ФорматироватьВЧисло(ПолучитьЗначениеЯчейкиИзМассива(КолКоэффициентУпак, МассивКолонок, СтрМассива));
		
		НовСтр.КоэффициентУпак          = ФорматироватьВЧисло(ПолучитьЗначениеЯчейкиИзМассива(КолКоэффициентУпак, МассивКолонок, СтрМассива));
		НовСтр.ГлубинаУпак              = ПересчитатьГабаритыВМетры(ФорматироватьВЧисло(ПолучитьЗначениеЯчейкиИзМассива(КолГлубинаУпак, МассивКолонок, СтрМассива)), "CM");
		НовСтр.ШиринаУпак               = ПересчитатьГабаритыВМетры(ФорматироватьВЧисло(ПолучитьЗначениеЯчейкиИзМассива(КолШиринаУпак, МассивКолонок, СтрМассива)), "CM");
		НовСтр.ВысотаУпак               = ПересчитатьГабаритыВМетры(ФорматироватьВЧисло(ПолучитьЗначениеЯчейкиИзМассива(КолВысотаУпак, МассивКолонок, СтрМассива)), "CM");
		НовСтр.ВесУпак                  = ФорматироватьВЧисло(ПолучитьЗначениеЯчейкиИзМассива(КолВесУпак, МассивКолонок, СтрМассива));
		НовСтр.ВесБруттоУпак            = ФорматироватьВЧисло(ПолучитьЗначениеЯчейкиИзМассива(КолВесБруттоУпак, МассивКолонок, СтрМассива));
		НовСтр.ОбъемБруттоУпак          = Окр(НовСтр.ГлубинаУпак * НовСтр.ШиринаУпак * НовСтр.ВысотаУпак, 6);
		НовСтр.КлассификаторЕдиницыУпак = КлассификаторЕдиницыУпак;
	КонецЦикла;
	
	Excel.Quit();
	
КонецПроцедуры

Функция ПолучитьЗначениеЯчейкиИзМассива(текНомерКолонки, МассивКолонок, СтрМассива) 	
	Возврат СокрЛП(МассивКолонок.Получить(текНомерКолонки-1).Получить(СтрМассива));	
КонецФункции
///Антропов Е.П. от 27.11.2023 №000000119


///Антропов Е.П. от 27.11.2023 №000000118
Процедура КоманднаяПанельОТУМХ1(Кнопка)
	
	//Если Вопрос("Текст вопроса, продолжить?",РежимДиалогаВопрос.ДаНет,360) = КодВозвратаДиалога.Нет Тогда
	//	
	//КонецЕсли;
	
	ИмяПФ = "Унифицированная форма МХ-1";
	СсылкаДоп_ПФ = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию(ИмяПФ,Истина);	     	
	Если Не ЗначениеЗаполнено(СсылкаДоп_ПФ) Тогда 
		Сообщить("Печатная форма <"+ИмяПФ+"> не найдена.");
		Возврат;	
	КонецЕсли;	
	
	текИмяФайла = ПолучитьИмяВременногоФайла("epf");
	ОбъектДоп_ПФ = СсылкаДоп_ПФ.ПолучитьОбъект();		
	ДвоичныеДанные = ОбъектДоп_ПФ.ХранилищеВнешнейОбработки.Получить();
	Попытка 
		ДвоичныеДанные.Записать(текИмяФайла);
		текОбработкаПечати = ВнешниеОбработки.Создать(текИмяФайла);
	Исключение
		СообщитьОбОшибке("Не удалось создать файл внешней печатной формы "+текИмяФайла);
		Возврат;
	КонецПопытки;
	
	ФормаПечати      = ПолучитьФорму("ФормаПечати");
	ПараметрыПечати  = ФормаПечати.ОткрытьМодально();
	
	Если ПараметрыПечати = Неопределено Тогда Возврат; КонецЕсли;
	 	 
	НаПринтер        = ПараметрыПечати.НаПринтер;
	КолВоЭкземпляров = ?(ПараметрыПечати.КолВоЭкземпляров = 0,1,ПараметрыПечати.КолВоЭкземпляров);
	ИмяПринтера      = ПараметрыПечати.ИмяПринтера;
	ОчередьПечати    = ПараметрыПечати.ОчередьПечати;
	ТекКатСохранения = ПараметрыПечати.КаталогСохранения;
		
	ПечатьВОчередь = Ложь; ПараметрыПечатиВОчередь = Новый Структура;
	Если ОчередьПечати <> Неопределено Тогда
		ПечатьВОчередь = Истина;
		ПараметрыПечатиВОчередь.Вставить("ПечатьВ"		  , "ВОчередь");
		ПараметрыПечатиВОчередь.Вставить("Очередь"		  , ОчередьПечати);
		ПараметрыПечатиВОчередь.Вставить("ПослалНаПечать" , ПараметрыСеанса.ТекущийПользователь);
	КонецЕсли;
	
	ТекТипФайла = ТипФайлаТабличногоДокумента.XLS;
		
	Для Каждого ТекВыдСтрока Из ЭлементыФормы.ОтгрузкиТоваровУслуг.ВыделенныеСтроки Цикл 
		Если Не ТекВыдСтрока.ЕстьВычеркВЭкспедиции ИЛИ НЕ ЗначениеЗаполнено(ТекВыдСтрока.ИнвДоставки) Тогда Продолжить; КонецЕсли;
		
		текОбработкаПечати.СсылкаНаОбъект = ТекВыдСтрока.ИнвДоставки;
		
		ТЗ_Данные = текОбработкаПечати.ПолучитьРезультатЗапроса();		
		Если ТЗ_Данные.Количество() = 0 Тогда 
			Продолжить; 				
		КонецЕсли;
		
		ТабДокумент = текОбработкаПечати.ПолучитьТабличныйДокумент(ТЗ_Данные);	
		ТабДокумент.РазборПоКопиям = Истина;
		
		ТекНомИнвДост = текОбработкаПечати.СсылкаНаОбъект.Номер;
		
		НужноСохранить = Ложь;
		Если ПараметрыПечати.ТолькоСохранить Тогда 
			НужноСохранить = Истина; 			
		Иначе
			
			Если ПараметрыПечати.Сохранить Тогда
				НужноСохранить = Истина;
			КонецЕсли;
			
			Если ПечатьВОчередь Тогда
				МеханизмыПечати.ВыполнитьПечать(ТабДокумент,КолВоЭкземпляров,НаПринтер," "+ТекНомИнвДост,,ИмяПринтера);
				Если ПараметрыПечатиВОчередь.Количество() > 0 Тогда 
					УстановитьДокументВОчередьПечати(ТекВыдСтрока.ИнвДоставки, ПараметрыПечатиВОчередь);
				КонецЕсли;
			Иначе 
				МеханизмыПечати.ВыполнитьПечать(ТабДокумент,КолВоЭкземпляров,НаПринтер," "+ТекНомИнвДост,,ИмяПринтера);
			КонецЕсли;
		КонецЕсли;
		
		Если НужноСохранить Тогда 
			ТабДокумент.Записать(ТекКатСохранения+"/Инв. доставки №"+ТекНомИнвДост+".xls", ТекТипФайла);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьДокументВОчередьПечати(ДокументНаПечать, ПараметрыОчереди, ИмяМакета = Неопределено)
	
	Перем ОчередьПечати, НаборЗаписей, Запись;
	
	Если ДокументНаПечать = Неопределено Тогда
		Сообщить("Не определен документ: "+ДокументНаПечать);
		Возврат;
	КонецЕсли;
	
	ОчередьПечати = ПараметрыОчереди.Очередь;
	
	Если Не ЗаполненоЗначение(ОчередьПечати) Тогда
		Предупреждение("Не заполнена очередь печати!");	
		Возврат;		
	КонецЕсли;
	   
	Если ТипЗнч(ДокументНаПечать) = Тип("ДокументСсылка.ИнвентаризацияДоставки") Тогда 
		ТекСклад = ДокументНаПечать.ДокументОтгрузки.Склад;
	Иначе
		ТекСклад = ДокументНаПечать.Склад;
	КонецЕсли; 	
		
	НаборЗаписей = РегистрыСведений.ОчередьПечати.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументНаПечать.Установить(ДокументНаПечать);
	 	
	Запись = НаборЗаписей.Добавить();
	Запись.ДокументНаПечать 	  = ДокументНаПечать;
	Запись.ИмяМакета		 	  = ИмяМакета;
	Запись.ОчередьПечати		  = ОчередьПечати;	
	Запись.Склад				  = ТекСклад.Ссылка;
	Запись.Автор		 		  = ПараметрыОчереди.ПослалНаПечать;
	Запись.ДатаПостановкиВОчередь = ТекущаяДата();
	Запись.Оператор				  = ПараметрыСеанса.ТекущийПользователь;
	Запись.ДатаРаспечатки		  = Запись.ДатаПостановкиВОчередь;
	Запись.Распечатан			  = Истина;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		СообщитьОбОшибке("Не удалось отправить в очередь пакет документов: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры
///Антропов Е.П. от 27.11.2023 №000000118


///Антропов Е.П. от 28.11.2023 №000000117
Функция ПолучитьТекстЗапросаПоИнвентаризацияДоставкиСводная()
	
	Возврат 
	"ВЫБРАТЬ
	|	ИнвДостСвод.Ссылка КАК ДокументСсылка,
	|	МАКСИМУМ(ИнвДостСвод.Проведен) КАК Статус,
	|	МАКСИМУМ(ИнвДостСвод.Дата) КАК Дата,
	|	МАКСИМУМ(ИнвДостСвод.Номер) КАК Номер,
	|	МАКСИМУМ(ЗСО.Значение) КАК НомерТранспортировки,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ИнвДостСвод_ДО.Маршрут.ДатаЭкспедиции, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИнвДостСвод.ДатаЭкспедиции
	|			ИНАЧЕ ИнвДостСвод_ДО.Маршрут.ДатаЭкспедиции
	|		КОНЕЦ) КАК ДатаЭкспедиции,
	|	МАКСИМУМ(ИнвДостСвод_ДО.Маршрут) КАК МаршрутЭкспедитора,
	|	МАКСИМУМ(ИнвДостСвод.Склад) КАК Склад,
	|	МАКСИМУМ(ИнвДостСвод.Комментарий) КАК Комментарий
	|ИЗ
	|	Документ.ИнвентаризацияДоставкиСводная КАК ИнвДостСвод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияДоставкиСводная.Товары КАК ИнвДостСвод_Товары
	|		ПО ИнвДостСвод.Ссылка = ИнвДостСвод_Товары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияДоставкиСводная.ДокументыОтгрузки КАК ИнвДостСвод_ДО
	|		ПО ИнвДостСвод.Ссылка = ИнвДостСвод_ДО.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗСО
	|		ПО ИнвДостСвод.Ссылка = ЗСО.Объект
	|			И (ЗСО.Свойство = &Свойство_НомерПоДаннымПоставщика)
	|ГДЕ
	|	ИнвДостСвод.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|{ГДЕ
	|	ИнвДостСвод.Склад.*,
	|	ИнвДостСвод_Товары.Номенклатура.* КАК ГруппаНоменклатуры}
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнвДостСвод.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";	
	
КонецФункции

Процедура ИнвентаризацияДоставкиСводнаяПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.Статус.Картинка  = ?(ДанныеСтроки.Статус,ЭтаФорма.Картинка_Проведен,ЭтаФорма.Картинка_НЕПроведен);
	ОформлениеСтроки.Ячейки.Статус.ОтображатьКартинку = Истина;
КонецПроцедуры
///Антропов Е.П. от 28.11.2023 №000000117

///Антропов Е.П. от 19.04.2024 №000000279
Процедура КоманднаяПанельМаршрутыВыгрузитьПовторно(Кнопка)
	Если НЕ ЗначениеЗаполнено(Партнер) Тогда
		Сообщить("Не заполнено поле 'Партнер'", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	ТекВыдСтроки = ЭлементыФормы.МаршрутыЭкспедиторов.ВыделенныеСтроки;
	Если ТекВыдСтроки.Количество() > 0 Тогда 
		ТекТЗ_МЭ.Очистить();
		Для Каждого ТекВыдСтр Из ТекВыдСтроки Цикл 
			Если ЗначениеЗаполнено(ТекВыдСтр.ДокументСсылка) Тогда 
				НовСтр = ТекТЗ_МЭ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, ТекВыдСтр);
			КонецЕсли;
		КонецЦикла;                
		Если ТекТЗ_МЭ.Количество() > 0 Тогда 
			ИзменитьСтатусМаршрутовЭкспедиторовНаНовый(ТекТЗ_МЭ);
		КонецЕсли;
	КонецЕсли;
	
	ВыгрузитьМаршрутыЭкспедиторов();
	//ОбновитьТаблицуРабочегоМестаОператора();
	Сообщить("Выгрузка маршрутов экспедиторов выполнена!");	
КонецПроцедуры
///Антропов Е.П. от 19.04.2024 №000000279

///Антропов Е.П. от 05.12.2024 №000000190
Процедура КоманднаяПанель1ОбменСUtrace(Кнопка)
	
	ТекКодОбработки = "000002471";
	ТекСсылкаОбработки = Справочники.ВнешниеОбработки.НайтиПоКоду(ТекКодОбработки); //Обмен по КМ с Utrace (Пепси)
	Если Не ЗначениеЗаполнено(ТекСсылкаОбработки) Тогда 
		Сообщить("Обработка по коду <"+ТекКодОбработки+"> не найдена.");	
		Возврат;
	КонецЕсли;
	
	ТекИмяФайла = КаталогВременныхФайлов()+"ОбменПоКМСUtrace.epf"; 
	
	ЕстьФайлОбраб = Новый Файл(ТекИмяФайла);
	Если НЕ ЕстьФайлОбраб.Существует() Тогда 
		ДвоичныеДанные = ТекСсылкаОбработки.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ТекИмяФайла);
	КонецЕсли; 
	
	ФормаОбраб = ВнешниеОбработки.ПолучитьФорму(ТекИмяФайла,,,ТекСсылкаОбработки);
	ФормаОбраб.ПутьКФайлуОбработки = ТекИмяФайла;
	ФормаОбраб.ВнешнийПартнер      = ОбработкаОбъект.Партнер;
	ФормаОбраб.Открыть();
	
КонецПроцедуры
///Антропов Е.П. от 05.12.2024 №000000190

///Антропов Е.П. от 18.12.2024
Процедура ОтобразитьСтрокиСМаркировочнымТоваром(ТекДокумент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДокумент", ТекДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ_Товары.НомерСтроки КАК НомерСтроки,
	|	Документ_Товары.Номенклатура КАК Номенклатура,
	|	Документ_Товары.СерияНоменклатуры КАК Серия,
	|	Документ_Товары.СерияНоменклатуры.НомерПартииПоставщика КАК НомерПартии,
	|	Документ_Товары.ЕдиницаИзмерения КАК ЕИ,
	|	Документ_Товары.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Документ_Товары
	|ГДЕ
	|	Документ_Товары.Ссылка = &ТекДокумент
	|	И Документ_Товары.СерияНоменклатуры.Комментарий ПОДОБНО ""%CIM%""";
	ЭтаФорма.ТЗ_МаркирТовар = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры
///Антропов Е.П. от 18.12.2024
#КонецОбласти
