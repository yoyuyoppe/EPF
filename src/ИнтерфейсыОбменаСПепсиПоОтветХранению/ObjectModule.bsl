#Область ПЕРЕМЕННЫЕ

Перем Соединение;
Перем СвойстваПартнера Экспорт;
Перем ТаблицаТоваровПоклажедателя;
Перем ТаблицаЕдиницИзмеренийПоклажедателя;
Перем ТаблицаТоваровДистрибьютора;
Перем ТаблицаОсновныхКарточекНоменклатуры;
Перем ТаблицаНовыхЗаявокНаОбновлениеСтатусовПоставки;
Перем ТаблицаСкладовПоклажедателей Экспорт;
Перем ТаблицаНоменклатурыУглекислоты;
Перем МетодыОбменаСПартнером;
Перем УчетСерийныхНомеровПоБаллонам;

Перем Свойство_УтилизацияПепси;  ///Антропов Е.П. от 01.03.2023 №000000204
Перем Источник_Utrace, Приемник_Utrace; ///Антропов Е.П. от 14.10.2024 УЗ №000000452

#КонецОбласти 

#Область ПрограммныйИнтерфейс
// Печатные формы
Процедура ПолучитьПечатныеФормы(НомерТранспортировки = "") Экспорт
	
	Перем Запрос;
	
	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_ПолучитьПечФормы;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	ТаблицаЗаявок = ПолучитьЗаявкиНаЗагрузкуПечатныхФорм();
	
	ТаблицаПечФорм = СформироватьТаблицуПечФорм();
	
	НомерСтраницы = СтруктураМетода.Параметры.Получить("page");
		                   
	Для каждого СтрТаб Из ТаблицаЗаявок Цикл
		
		Если НЕ ЗначениеЗаполнено(СокрЛП(СтрТаб.НомерПоставки)) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НомерТранспортировки) 
			И СокрЛП(СтрТаб.НомерПоставки) <> НомерТранспортировки Тогда
			Продолжить;
		КонецЕсли; 
		
		ПолучитьТокенПечати();
		
		Пока Истина Цикл
			
			Попытка
				
				СоздатьЗапросДляМетода(СтруктураМетода, Запрос, Новый Структура("Plant, shipmentNumber, page", СвойстваПартнера.КодДистрибьютора, СокрЛП(СтрТаб.НомерПоставки), НомерСтраницы));
				
				Ответ = Соединение.Получить(Запрос);
				
				Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
				
				Если Ответ.КодСостояния >= 200 И Ответ.КодСостояния < 300  Тогда
					
					Если ЗначениеЗаполнено(Данные) Тогда
						ДобавитьСтрокиВТаблицуПечФорм(ТаблицаПечФорм, Данные);
						ЗагрузитьПечатныеФормы(ТаблицаПечФорм);
						Сообщить(ОбщиеФункции._СтрШаблон_("Печатные формы по транспортировке '%1' успешно получены.", СтрТаб.НомерПоставки));
					КонецЕсли; 
					
				ИначеЕсли Ответ.КодСостояния = 401 тогда
					
					///Антропов Е.П. от 15.02.2024 №000000191
					ТокенОбновлен = ПроверкаНаОбновлениеТокена(Данные);
					Если ТокенОбновлен Тогда 						
						ПолучитьПечатныеФормы(НомерТранспортировки); 						
					КонецЕсли;
					//Если ТипЗнч(Данные) = Тип("Структура")
					//	И Данные.Свойство("detail")
					//	И Данные.detail = "Full authentication is required to access this resource" Тогда 
					//	// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
					//	СвойстваПартнера.Токен = "";
					//	
					//	ОбновитьТокенДоступа();
					//	
					//	ПолучитьПечатныеФормы(НомерТранспортировки);
					//	
					//КонецЕсли;
					///Антропов Е.П. от 15.02.2024 №000000191
										
				Иначе
					ВызватьИсключение ОбщиеФункции._СтрШаблон_("Ошибки при получении печатных форм транспортировки '%1'  по причине: %2", СокрЛП(СтрТаб.НомерПоставки), ОписаниеОшибки());
				КонецЕсли;
				
			Исключение
				Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось получить печатные формы транспортировки '%1'  по причине: %2", СокрЛП(СтрТаб.НомерПоставки), ОписаниеОшибки()));
				//ВызватьИсключение ОбщиеФункции._СтрШаблон_("Не удалось получить печатные формы транспортировки '%1'  по причине: %2", СокрЛП(СтрТаб.НомерПоставки), ОписаниеОшибки());
			КонецПопытки;
			
			Если Данные.Количество() = 0 Тогда
				
				НомерСтраницы = 0;
				
				Если ТаблицаПечФорм.Количество() > 2 Тогда
					_3PLСервер.ОперацияВыполненаУспешно(СтрТаб.Объект, Строка(Партнер), "1С", Ответ.ПолучитьТелоКакСтроку());
				ИначеЕсли НЕ ЗначениеЗаполнено(ТаблицаПечФорм) Тогда
					Сообщить(ОбщиеФункции._СтрШаблон_("Печатные формы по транспортировке №%1 не найдены", СтрТаб.НомерПоставки), СтатусСообщения.Внимание);
				КонецЕсли; 
				
				ТаблицаПечФорм.Очистить();
				
				Прервать;
				
			КонецЕсли;
			// Изменим нумерацию страницы для получения данных
			Если НомерСтраницы <> Неопределено Тогда
				НомерСтраницы = НомерСтраницы + 1;
				СтруктураМетода.Параметры.Вставить("page", НомерСтраницы);
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры
// Обновление статусов транспортировок
Процедура ОбновитьСтатусыТранспортировок() Экспорт
	
	Перем Запрос;
	
	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_ОбновитьПоставки;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	СоздатьЗапросДляМетода(СтруктураМетода, Запрос);
	
	ТаблицаЗаявок = ПолучитьЗаявкиНаОбновлениеПоставок();
	
	Попытка
		
		Для каждого СтрТаб Из ТаблицаЗаявок Цикл
			
			ТелоЗапроса = СформироватьТелоЗапросаДляОбновленияПоставки(СтрТаб.Объект, СокрЛП(СтрТаб.НомерТранспортировки), СтрТаб.Идентификатор);
			
			Если НЕ ЗначениеЗаполнено(ТелоЗапроса) Тогда
				Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось отправить обновление статус транспортировки %1 по причине: тело запроса пустое", СтрТаб.НомерТранспортировки),
					СтатусСообщения.ОченьВажное);
				Продолжить;
			КонецЕсли; 
			
			Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.Системная);
			
			Ответ = Соединение.ОтправитьДляОбработки(Запрос);
			
			Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
			
			Если Ответ.КодСостояния > 200 И Ответ.КодСостояния < 300 Тогда
				
				Если СтрТаб.Объект = NULL Тогда
					СтрТаб.Объект = Документы.РегистраторЗаписи.СоздатьНовыйДокумент();
				КонецЕсли; 
				
				_3PLСервер.ОперацияВыполненаУспешно(СтрТаб.Объект, "1С", Строка(Партнер), ТелоЗапроса, СтрТаб.Идентификатор);
				
				СоздатьЗаявкуНаПолучениеПечатныхФорм(СтрТаб.Объект, СокрЛП(СтрТаб.НомерТранспортировки)); 
				
				ОбщегоНазначения.п_Задержка(2);
				
			ИначеЕсли Ответ.КодСостояния = 401
				
				///Антропов Е.П. от 15.02.2024 №000000191
				Тогда
				ТокенОбновлен = ПроверкаНаОбновлениеТокена(Данные);
				Если ТокенОбновлен Тогда						
					ОбновитьСтатусыТранспортировок(); 						
				КонецЕсли;
				
				//И ТипЗнч(Данные) = Тип("Структура")
				//И Данные.Свойство("detail")
				//И Данные.detail = "Full authentication is required to access this resource" Тогда 
				//// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
				//СвойстваПартнера.Токен = "";
				//
				//ОбновитьТокенДоступа();
				//
				//ОбновитьСтатусыТранспортировок();
				///Антропов Е.П. от 15.02.2024 №000000191
				
			Иначе
				ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
			КонецЕсли;
			
		КонецЦикла; 
		
	Исключение
		ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры
// Отправка коррректировок остатков 
Процедура ОтправитьКорректировкиОстатков() Экспорт
	
	Перем Запрос;
		
	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_КорректировкаОстатков;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	СоздатьЗапросДляМетода(СтруктураМетода, Запрос);
	
	СоздатьЗаявкиПоКорректировкеОстатков();
	
	ВыборкаДанных = ПолучитьДанныеПоДвижениямКорректировкиОстатков();
	
	Пока ВыборкаДанных.Следующий() Цикл
		
		МассивПартийДляПереводаНаВиртуальную = Новый Массив;
		
		Попытка
			
			ТелоЗапроса = СформироватьТелоЗапросаПоРасхождениямПриПересчете(ВыборкаДанных, МассивПартийДляПереводаНаВиртуальную);
			
			Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.Системная);
			
			Ответ = Соединение.ОтправитьДляОбработки(Запрос);
			
			Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
			
			Если Ответ.КодСостояния > 200 И Ответ.КодСостояния < 300 Тогда
				
				_3PLСервер.ДобавитьЗаписьПоДокументуВЖурналОпераций(ВыборкаДанных.Ссылка, "1С", Строка(Партнер), Справочники.СтатусыЗаявок.УспешноОбработана,
					"inventorymovement_"+Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddHHmmss"), ТекущаяДатаСеанса(), ТекущаяДатаСеанса(), ТелоЗапроса);
								
			ИначеЕсли Ответ.КодСостояния = 401
				
				///Антропов Е.П. от 15.02.2024 №000000191
				Тогда
				ТокенОбновлен = ПроверкаНаОбновлениеТокена(Данные);
				Если ТокенОбновлен Тогда						
					ОтправитьКорректировкиОстатков();  						
				КонецЕсли;
				
				//И ТипЗнч(Данные) = Тип("Структура")
				//И Данные.Свойство("detail")
				//И Данные.detail = "Full authentication is required to access this resource" Тогда 
				//// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
				//СвойстваПартнера.Токен = "";
				//
				//ОбновитьТокенДоступа();
				//
				//ОтправитьКорректировкиОстатков();
				///Антропов Е.П. от 15.02.2024 №000000191
				
			Иначе
				ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
			КонецЕсли;
			
		Исключение
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
		КонецПопытки
		
	КонецЦикла;
	
КонецПроцедуры
// Отправка текущих остатков
Процедура ОтправитьТекущиеОстатки() Экспорт
	
	Перем Запрос;
	
	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_ТекущиеОстатки;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	СоздатьЗапросДляМетода(СтруктураМетода, Запрос);
	
	Попытка
		
		СформироватьТаблицуСкладовПоклажедателей();
		
		ТелоЗапроса = СформироватьТелоЗапросаПоТекущимОстаткам(); 	
		
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.Системная);
		
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		
		Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
		
		Если Ответ.КодСостояния > 200 И Ответ.КодСостояния < 300 Тогда
			_3PLСервер.ОперацияВыполненаУспешно("inventorysnapshot", "1С", Строка(Партнер), ТелоЗапроса);
		ИначеЕсли Ответ.КодСостояния = 401
			
			///Антропов Е.П. от 15.02.2024 №000000191
			Тогда
			ТокенОбновлен = ПроверкаНаОбновлениеТокена(Данные);
			Если ТокенОбновлен Тогда						
				ОтправитьТекущиеОстатки();
			КонецЕсли;
			
			//И ТипЗнч(Данные) = Тип("Структура")
			//И Данные.Свойство("detail")
			//И Данные.detail = "Full authentication is required to access this resource" Тогда 
			//// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
			//СвойстваПартнера.Токен = "";
			//
			//ОбновитьТокенДоступа();
			//
			//ОтправитьТекущиеОстатки();
			///Антропов Е.П. от 15.02.2024 №000000191
			
		Иначе
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
		КонецЕсли;
		
	Исключение
		ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры
// Загрузка документов из SAP
Процедура ПолучитьДокументы() Экспорт
	
	Перем Запрос, ДатаПоследнегоОбменаПоДокументам;
	
	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	ИнфоОПрошломЗапуске = "";
	
	Если ОперацияЗапущена("ПолучитьДокументы", ИнфоОПрошломЗапуске) Тогда
		ТекстСообщения = ОбщиеФункции._СтрШаблон_("Операция 'Получить документы' сейчас выполняется другим пользователем (%1). Попробуйте выполнить операцию позже", ИнфоОПрошломЗапуске);
		Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
		Возврат;
	Иначе
		УстановитьПризнакЗапускаОперации("ПолучитьДокументы", Истина);
	КонецЕсли; 
	
	Если СвойстваПартнера.Свойство("ДатаПоследнегоОбменаПоДокументам", ДатаПоследнегоОбменаПоДокументам) Тогда
		СвойстваПартнера.ДатаПоследнегоОбмена = ДатаПоследнегоОбменаПоДокументам;
	КонецЕсли;
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_Документы;
	
	СформироватьТаблицаТоваровПоклажедателя();
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	НомерСтраницы = СтруктураМетода.Параметры.Получить("page");
	
	КоличествоОбъектовНаСтранице = СтруктураМетода.Параметры.Получить("size");
	
	Если КоличествоОбъектовНаСтранице = Неопределено Тогда
		КоличествоОбъектовНаСтранице = 50;
	КонецЕсли; 
	
	Пока Истина Цикл
		
		Попытка
			
			СоздатьЗапросДляМетода(СтруктураМетода, Запрос);
			
			Ответ = Соединение.Получить(Запрос);
			
			Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
			
			Если Ответ.КодСостояния = 200 Тогда
				СоздатьДокументы(ОпределитьТребуемыеДействияПоРаботеСДокументами(ПреобразоватьДанныеПоДокументамВТаблицуЗначений(Данные)));
			ИначеЕсли Ответ.КодСостояния = 401
				
				///Антропов Е.П. от 15.02.2024 №000000191
				Тогда
				ТокенОбновлен = ПроверкаНаОбновлениеТокена(Данные);
				Если ТокенОбновлен Тогда						
					ПолучитьДокументы();
				КонецЕсли;
				
				//И ТипЗнч(Данные) = Тип("Структура")
				//И Данные.Свойство("detail")
				//И Данные.detail = "Full authentication is required to access this resource" Тогда 
				//// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
				//СвойстваПартнера.Токен = "";
				//
				//УстановитьПризнакЗапускаОперации("ПолучитьДокументы", Ложь);
				//
				//ОбновитьТокенДоступа();
				//
				//ПолучитьДокументы();  				
				///Антропов Е.П. от 15.02.2024 №000000191
				
				// Заглушка, чтобы завершить успешно предшествующие методы в рекурсии
				Данные = Новый Массив; 				
				
			Иначе
				УстановитьПризнакЗапускаОперации("ПолучитьДокументы", Ложь);
				ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
			КонецЕсли;
			
		Исключение
			УстановитьПризнакЗапускаОперации("ПолучитьДокументы", Ложь);
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
		КонецПопытки;
		
		Если Данные.Количество() < КоличествоОбъектовНаСтранице Тогда
			Прервать;
		КонецЕсли;
		// Изменим нумерацию страницы для получения данных
		Если НомерСтраницы <> Неопределено Тогда
			НомерСтраницы = НомерСтраницы + 1;
			СтруктураМетода.Параметры.Вставить("page", НомерСтраницы);
		КонецЕсли;
		
	КонецЦикла; 
	
	СтруктураЗаписи = Новый Структура("Объект, Свойство, Значение", Партнер, "ДатаПоследнегоОбменаПоДокументам", ТекущаяДатаСеанса());
	
	РегистрыСведений.ДополнительныеРеквизиты_3PL.ДобавитьЗапись(СтруктураЗаписи);
	
	УстановитьПризнакЗапускаОперации("ПолучитьДокументы", Ложь);
	
КонецПроцедуры
// Получение номеров транспортировок
Процедура ПолучитьТранспортировки() Экспорт
	
	Перем Запрос;
	
	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_Транспортировки;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	НомерСтраницы = СтруктураМетода.Параметры.Получить("page");
	
	КоличествоОбъектовНаСтранице = СтруктураМетода.Параметры.Получить("size");
	
	Если КоличествоОбъектовНаСтранице = Неопределено Тогда
		КоличествоОбъектовНаСтранице = 50;
	КонецЕсли; 
	
	Пока Истина Цикл
		
		Попытка
			
			СоздатьЗапросДляМетода(СтруктураМетода, Запрос);
			
			Ответ = Соединение.Получить(Запрос);
			
			Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
			
			Если Ответ.КодСостояния = 200 Тогда
				ЗаполнитьНомераТранспортировок(ОпределитьДокументыДляТранспортировки(ПреобразоватьДанныеПоТранспортировкамВТаблицуЗначений(Данные)));
			ИначеЕсли Ответ.КодСостояния = 401
				
				///Антропов Е.П. от 15.02.2024 №000000191
				Тогда
				ТокенОбновлен = ПроверкаНаОбновлениеТокена(Данные);
				Если ТокенОбновлен Тогда						
					ПолучитьТранспортировки();
				КонецЕсли;
				
				//И ТипЗнч(Данные) = Тип("Структура")
				//И Данные.Свойство("detail")
				//И Данные.detail = "Full authentication is required to access this resource" Тогда 
				//// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
				//СвойстваПартнера.Токен = "";
				//
				//ОбновитьТокенДоступа();
				//
				//ПолучитьТранспортировки();
				///Антропов Е.П. от 15.02.2024 №000000191
				
				// Заглушка, чтобы завершить успешно предшествующие методы в рекурсии
				Данные = Новый Массив;				
				
			Иначе
				ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
			КонецЕсли;
			
		Исключение
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
		КонецПопытки;
		
		Если Данные.Количество() < КоличествоОбъектовНаСтранице Тогда
			Прервать;
		КонецЕсли;
		// Изменим нумерацию страницы для получения данных
		Если НомерСтраницы <> Неопределено Тогда
			НомерСтраницы = НомерСтраницы + 1;
			СтруктураМетода.Параметры.Вставить("page", НомерСтраницы);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНомераТранспортировок(ТаблицаДанных)
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		Сообщить(ОбщиеФункции._СтрШаблон_("На дату '%1' нет данных по транспортировкам", СвойстваПартнера.ДатаПоследнегоОбмена), СтатусСообщения.Информация);
		Возврат;
	КонецЕсли; 
	
	МассивМаршрутовСТранспортировкой = Новый Массив;
	
	Для каждого СтрТаб Из ТаблицаДанных Цикл
		
		Если СтрТаб.ДокументСсылка = Неопределено Тогда
			
			Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось заполнить номер транспортировки '%1' по причине: не найден документ отгрузки по номеру %2",
				СтрТаб.НомерТранспортировки, СтрТаб.НомерВходящегоДокумента));
				
			Продолжить;
			
		КонецЕсли;
			
		ОбщиеФункции.УстановитьЗначениеСвойства(Новый Структура("Объект, Свойство, Значение",
			СтрТаб.ДокументСсылка, СвойстваПартнера.Свойство_НомерТранспортировки, СтрТаб.НомерТранспортировки));
			
		Если МассивМаршрутовСТранспортировкой.Найти(СтрТаб.МаршрутЭкспедитора) = Неопределено Тогда
				
			Если НЕ ЗначениеЗаполнено(СтрТаб.МаршрутЭкспедитора) Тогда
				Продолжить;
			КонецЕсли; 	
				
			ОбщиеФункции.УстановитьЗначениеСвойства(Новый Структура("Объект, Свойство, Значение",
				СтрТаб.МаршрутЭкспедитора, СвойстваПартнера.Свойство_НомерТранспортировки, СтрТаб.НомерТранспортировки));
				
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура СоздатьДокументы(ТаблицаДанных)
	
	Для каждого СтрТаб Из ТаблицаДанных Цикл
		
		Если СтрТаб.ТребуемоеДействие = "Добавление" Тогда
			
			ДокументСсылка = Неопределено;
			
			Если СтрТаб.ТипДокумента = "7" Тогда
				
				Попытка
					_3PLСервер.СоздатьЗаказПоставщику(ПреобразоватьСтрокуТабЗначВСтруктуру(СтрТаб, ТаблицаДанных.Колонки), Строка(Партнер), ДокументСсылка);
				Исключение
					Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось создать заказ поставщику №'%1' по причине: 
					|%2", СтрТаб.НомерВходящегоДокумента, ОписаниеОшибки()));
				КонецПопытки;
				
				Если ЗначениеЗаполнено(ДокументСсылка) И ЗначениеЗаполнено(СтрТаб.НомерТранспортировки) Тогда
					ОбщиеФункции.УстановитьЗначениеСвойства(Новый Структура("Объект, Свойство, Значение",
						ДокументСсылка, СвойстваПартнера.Свойство_НомерТранспортировки, СтрТаб.НомерТранспортировки));
				КонецЕсли; 
					
			КонецЕсли;
			
			Если СтрТаб.ТипДокумента = "J" Тогда
				
				ЭтоВыкуп = СтрТаб.Контрагент = СвойстваПартнера.КонтрагентНаВыкуп;
				
				Если ЭтоВыкуп Тогда
					СтрТаб.Подразделение = ПараметрыСеанса.ТекущееПодразделение;	
				КонецЕсли; 
				
				Попытка
					_3PLСервер.СоздатьДокументыОтгрузки(ПреобразоватьСтрокуТабЗначВСтруктуру(СтрТаб, ТаблицаДанных.Колонки), Строка(Партнер), ДокументСсылка);
				Исключение
					Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось создать документы отгрузки по заказу №'%1' по причине: 
					|%2", СтрТаб.НомерВходящегоДокумента, ОписаниеОшибки()));
				КонецПопытки;
				
				Если ЭтоВыкуп Тогда // ООО "ТД "Шкуренко"
					
					Сообщить(ОбщиеФункции._СтрШаблон_("Загружен выкуп товара '%1'", ДокументСсылка), СтатусСообщения.Информация);
					
					Если СвойстваПартнера.Свойство("ПереводитьВыкупВЧерновик")
						И СвойстваПартнера.ПереводитьВыкупВЧерновик = Истина Тогда
						
						_3PLСервер.ДобавитьЗаписьПоДокументуВЖурналОпераций(ДокументСсылка, Строка(Партнер), "1С", Справочники.СтатусыЗаявок.Черновик, "Исходящая", ТекущаяДатаСеанса());
						
					КонецЕсли; 
					
					ДокументСсылкаЗаказПоставщику = Неопределено;
					
					КонвертироватьТоварыВыкупаВТоварыДистрибьютора(СтрТаб.Товары);
					
					СтрТаб.ДоговорКонтрагента = СвойстваПартнера.ОсновнойДоговорПокупка;
					СтрТаб.Контрагент         = СвойстваПартнера.ОсновнойПоставщик;
					СтрТаб.Склад              = СвойстваПартнера.Склад3PD;
					
					Попытка
						_3PLСервер.СоздатьЗаказПоставщику(ПреобразоватьСтрокуТабЗначВСтруктуру(СтрТаб, ТаблицаДанных.Колонки), Строка(Партнер), ДокументСсылкаЗаказПоставщику);
					Исключение
						Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось создать заказ поставщику на основании выкупа №'%1' по причине: 
						|%2", СтрТаб.НомерВходящегоДокумента, ОписаниеОшибки()));
					КонецПопытки;
					
					РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.УдалитьЗапись(Новый Структура("Объект, Источник, Приемник",
						ДокументСсылкаЗаказПоставщику, Строка(Партнер), "1С"));
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрТаб.ТипДокумента = "T" И СтрТаб.ВидОперации <> "ZLOR" Тогда
				Попытка
					_3PLСервер.СоздатьВозвратОтПокупателя(ПреобразоватьСтрокуТабЗначВСтруктуру(СтрТаб, ТаблицаДанных.Колонки), Строка(Партнер), ДокументСсылка);
				Исключение
					Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось создать возврат от покупателя №'%1' по причине: 
					|%2", СтрТаб.НомерВходящегоДокумента, ОписаниеОшибки()));
				КонецПопытки;
			КонецЕсли;
			
			Если СтрТаб.ТипДокумента = "T" И СтрТаб.ВидОперации = "ZLOR" Тогда
				Попытка
					СоздатьИнвентаризациюДоставкиСводную(ПреобразоватьСтрокуТабЗначВСтруктуру(СтрТаб, ТаблицаДанных.Колонки));
				Исключение
					Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось создать сводную инвентаризацию доставки №'%1' по причине: 
					|%2", СтрТаб.НомерВходящегоДокумента, ОписаниеОшибки()));
				КонецПопытки;
			КонецЕсли;
			
			Если ДокументСсылка <> Неопределено Тогда
				
				ОбщиеФункции.УстановитьЗначениеСвойства(Новый Структура("Объект, Свойство, Значение",
					ДокументСсылка, СвойстваПартнера.Свойство_НомерВходящегоДокумента, СтрТаб.НомерВходящегоДокумента));
					
				ОбщиеФункции.УстановитьЗначениеСвойства(Новый Структура("Объект, Свойство, Значение",
					ДокументСсылка, СвойстваПартнера.Свойство_ДатаВходящегоДокумента, СтрТаб.ДатаВходящегоДокумента));
					
				ОбщиеФункции.УстановитьЗначениеСвойства(Новый Структура("Объект, Свойство, Значение",
					ДокументСсылка, СвойстваПартнера.Свойство_НомерЗаказаГрузополучателя, СтрТаб.НомерЗаказаГрузополучателя));	
					
				///Антропов Е.П. от 01.03.2023 №000000204
				Если СтрТаб.УтилизацияПепси Тогда 
					ОбщиеФункции.УстановитьЗначениеСвойства(Новый Структура("Объект, Свойство, Значение",
						ДокументСсылка, Свойство_УтилизацияПепси, СтрТаб.УтилизацияПепси));
				КонецЕсли;  
				///Антропов Е.П. от 01.03.2023 №000000204
			КонецЕсли; 
			
		КонецЕсли;
		
		Если СтрТаб.ТребуемоеДействие = "Обновление" Тогда
			
			Если СтрТаб.ТипДокумента = "7" Тогда
				Попытка
					_3PLСервер.ОбновитьЗаказПоставщику(ПреобразоватьСтрокуТабЗначВСтруктуру(СтрТаб, ТаблицаДанных.Колонки), СтрТаб.ДокументСсылка);
				Исключение
					Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось обновить заказ поставщику №'%1' по причине: 
					|%2", СтрТаб.НомерВходящегоДокумента, ОписаниеОшибки()));
				КонецПопытки;
			КонецЕсли;
			
			Если СтрТаб.ТипДокумента = "J" Тогда
				
				Попытка
					_3PLСервер.ОбновитьДокументыОтгрузки(ПреобразоватьСтрокуТабЗначВСтруктуру(СтрТаб, ТаблицаДанных.Колонки), СтрТаб.ДокументСсылка);
				Исключение
					Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось обновить документ №'%1' по причине: 
					|%2", СтрТаб.НомерВходящегоДокумента, ОписаниеОшибки()));
				КонецПопытки;
				
				//Если СтрТаб.Контрагент.ИНН = "5504086398" Тогда // ООО "ТД "Шкуренко"
				//	
				//	Сообщить(ОбщиеФункции._СтрШаблон_("Загружен выкуп товара '%1'", ДокументСсылка), СтатусСообщения.Информация);
				//	
				//	ДокументСсылкаЗаказПоставщику = Неопределено;
				//	
				//	КонвертироватьТоварыВыкупаВТоварыДистрибьютора(СтрТаб.Товары);
				//	
				//	СтрТаб.ДоговорКонтрагента = СвойстваПартнера.ОсновнойДоговорПриемаНаХранение;
				//	СтрТаб.Контрагент         = СвойстваПартнера.ОсновнойПоставщик;
				//	СтрТаб.Склад              = СвойстваПартнера.Склад3PD;
				//	
				//	Попытка
				//		_3PLСервер.СоздатьЗаказПоставщику(ПреобразоватьСтрокуТабЗначВСтруктуру(СтрТаб, ТаблицаДанных.Колонки), Строка(Партнер), ДокументСсылкаЗаказПоставщику);
				//	Исключение
				//		Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось создать заказ поставщику на основании выкупа №'%1' по причине: 
				//		|%2", СтрТаб.НомерВходящегоДокумента, ОписаниеОшибки()));
				//	КонецПопытки;
				//	
				//	РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.УдалитьЗапись(Новый Структура("Объект, Источник, Приемник",
				//	ДокументСсылкаЗаказПоставщику, Строка(Партнер), "1С"));
				//	
				//КонецЕсли;
								
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры
// Загрузка номенклатуры из SAP
Процедура ПолучитьНоменклатуру() Экспорт
	
	Перем Запрос, ДатаПоследнегоОбменаПоМатериалам;
	
	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	Если СвойстваПартнера.Свойство("ДатаПоследнегоОбменаПоМатериалам", ДатаПоследнегоОбменаПоМатериалам) Тогда
		СвойстваПартнера.ДатаПоследнегоОбмена = ДатаПоследнегоОбменаПоМатериалам;
	КонецЕсли; 
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_Материалы;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	НомерСтраницы = СтруктураМетода.Параметры.Получить("page");
	
	КоличествоОбъектовНаСтранице = СтруктураМетода.Параметры.Получить("size");
	
	Если КоличествоОбъектовНаСтранице = Неопределено Тогда
		КоличествоОбъектовНаСтранице = 50;
	КонецЕсли; 
	
	Пока Истина Цикл
		
		Попытка
			
			СоздатьЗапросДляМетода(СтруктураМетода, Запрос);
			
			Ответ = Соединение.Получить(Запрос);
			
			Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
			
			Если Ответ.КодСостояния = 200 Тогда
				ЗаполнитьСправочникНоменклатурыПоклажедателя(ОпределитьТребуемыеДействияПоРаботеСНоменклатурой(ПреобразоватьДанныеПоТоварамВТаблицуЗначений(Данные)));
			ИначеЕсли Ответ.КодСостояния = 401
				
				///Антропов Е.П. от 15.02.2024 №000000191
				Тогда
				ТокенОбновлен = ПроверкаНаОбновлениеТокена(Данные);
				Если ТокенОбновлен Тогда						
					ПолучитьНоменклатуру();
				КонецЕсли;
				
				//И ТипЗнч(Данные) = Тип("Структура")
				//И Данные.Свойство("detail")
				//И Данные.detail = "Full authentication is required to access this resource" Тогда 
				//// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
				//СвойстваПартнера.Токен = "";
				//
				//ОбновитьТокенДоступа();
				//
				//ПолучитьНоменклатуру();
				///Антропов Е.П. от 15.02.2024 №000000191
				
				// Заглушка, чтобы завершить успешно предшествующие методы в рекурсии
				Данные = Новый Массив;
				  				
			Иначе
				ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
			КонецЕсли;
			
		Исключение
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
		КонецПопытки;
		
		Если Данные.Количество() < КоличествоОбъектовНаСтранице Тогда
			Прервать;
		КонецЕсли;
		// Изменим нумерацию страницы для получения данных
		Если НомерСтраницы <> Неопределено Тогда
			НомерСтраницы = НомерСтраницы + 1;
			СтруктураМетода.Параметры.Вставить("page", НомерСтраницы);
		КонецЕсли; 
		
	КонецЦикла;
	
	СтруктураЗаписи = Новый Структура("Объект, Свойство, Значение", Партнер, "ДатаПоследнегоОбменаПоМатериалам", ТекущаяДатаСеанса());
	
	РегистрыСведений.ДополнительныеРеквизиты_3PL.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

Процедура ОбновитьНоменклатуру(ТаблицаДанных)
	
	СформироватьТаблицаТоваровДистрибьютора();
	
	РазрешитьСозданиеДублей = (ЗначениеЗаполнено(ТаблицаТоваровДистрибьютора) 
		И СвойстваПартнера.Свойство("ГруппаНоменклатурыДублей") И ЗначениеЗаполнено(СвойстваПартнера.ГруппаНоменклатурыДублей));
		
	Если ЗначениеЗаполнено(ТаблицаДанных) Тогда
		Сообщить("Выполняется обновление / добавление номенклатуры", СтатусСообщения.Информация);	
	КонецЕсли; 
		
	Для каждого СтрТаб Из ТаблицаДанных Цикл
		
		Если СтрТаб.ТребуемоеДействие = "Добавление" Тогда
			
			Попытка
				_3PLСервер.СоздатьНоменклатуру(ПреобразоватьСтрокуТабЗначВСтруктуру(СтрТаб, ТаблицаДанных.Колонки));
				СоздатьУведомление(ОбщиеФункции._СтрШаблон_("Создана новая 3PL карточка '%1' с артикулом '%2'. Необходимо создать / проверить 3PD карточку", СтрТаб.Наименование, СтрТаб.Артикул));
			Исключение
				Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось создать номенклатуру '%1' по причине:
				|%2", СтрТаб.Наименование, ОписаниеОшибки()));
			КонецПопытки;
			
		КонецЕсли;
		
		Если СтрТаб.ТребуемоеДействие = "Обновление" Тогда
			Сообщить(ОбщиеФункции._СтрШаблон_("Товар с артикулом '%1' уже существует", СтрТаб.Артикул));
		КонецЕсли;
		
		Если РазрешитьСозданиеДублей 
			И ТаблицаТоваровДистрибьютора.Найти(СтрТаб.Артикул, "Артикул") = Неопределено Тогда
			
			СтруктураКлона = ПреобразоватьСтрокуТабЗначВСтруктуру(СтрТаб, ТаблицаДанных.Колонки);
			ЗаполнитьЗначенияСвойств(СтруктураКлона, СтрТаб);
			
			СтруктураКлона.Родитель = СвойстваПартнера.ГруппаНоменклатурыДублей;
			
			Попытка
				_3PLСервер.СоздатьНоменклатуру(СтруктураКлона);
			Исключение
				Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось создать номенклатуру клон '%1' по причине:
				|%2", СтрТаб.Наименование, ОписаниеОшибки()));
			КонецПопытки;
			
			Ссылка = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", СтрТаб.Артикул, СвойстваПартнера.ГруппаНоменклатурыДублей);
			
			Если НЕ Ссылка.Пустая() Тогда
				
				Попытка
					ТоварОбъект = Ссылка.ПолучитьОбъект();
					ТоварОбъект.Наименование = Ссылка.НаименованиеПолное;
					ТоварОбъект.Комментарий = "Создана на основании товара 3PL с артикулом " + СтруктураКлона.Артикул;
					ТоварОбъект.Записать();
					Сообщить(ОбщиеФункции._СтрШаблон_("Создана новая номенклатура '%1' с артикулом '%2'", Ссылка, СтрТаб.Артикул), СтатусСообщения.Информация);
				Исключение
				    Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось создать номенклатуру клон '%1' с артикулом '%2' по причине: %3", Ссылка, СтрТаб.Артикул,  ОписаниеОшибки()), СтатусСообщения.Информация);
				КонецПопытки;
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;  
	
КонецПроцедуры
// Загрузка партий из SAP
Процедура ПолучитьПартии() Экспорт
	// ВНИМАНИЕ. Под партией подразумивается серия номенклатуры
	Перем Запрос, ДатаПоследнегоОбменаПоПартиям;
	
	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	Если СвойстваПартнера.Свойство("ДатаПоследнегоОбменаПоПартиям", ДатаПоследнегоОбменаПоПартиям) Тогда
		СвойстваПартнера.ДатаПоследнегоОбмена = ДатаПоследнегоОбменаПоПартиям;
	КонецЕсли; 
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_Партии;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	СформироватьТаблицаТоваровПоклажедателя();
	
	НомерСтраницы = СтруктураМетода.Параметры.Получить("page");
	
	КоличествоОбъектовНаСтранице = СтруктураМетода.Параметры.Получить("size");
	
	Если КоличествоОбъектовНаСтранице = Неопределено Тогда
		КоличествоОбъектовНаСтранице = 50;
	КонецЕсли; 
	
	Сообщить("Загрузка новых партий", СтатусСообщения.Информация);
	Пока Истина Цикл
		
		Попытка
			
			СоздатьЗапросДляМетода(СтруктураМетода, Запрос);
			
			Ответ = Соединение.Получить(Запрос);
			
			Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
			
			Если Ответ.КодСостояния = 200 Тогда
				ОбновитьПартии(ОпределитьТребуемыеДействияПоРаботеСПартиями(ПреобразоватьДанныеПоПартиямВТаблицуЗначений(Данные)));
			ИначеЕсли Ответ.КодСостояния = 401
				
				///Антропов Е.П. от 15.02.2024 №000000191
				Тогда
				ТокенОбновлен = ПроверкаНаОбновлениеТокена(Данные);
				Если ТокенОбновлен Тогда						
					ПолучитьПартии();
				КонецЕсли;
				
				//И ТипЗнч(Данные) = Тип("Структура")
				//И Данные.Свойство("detail")
				//И Данные.detail = "Full authentication is required to access this resource" Тогда 
				//// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
				//СвойстваПартнера.Токен = "";
				//
				//ОбновитьТокенДоступа();
				//
				//ПолучитьПартии();
				///Антропов Е.П. от 15.02.2024 №000000191
				
			Иначе
				ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
			КонецЕсли;
			
		Исключение
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
		КонецПопытки;
		
		Если Данные.Количество() < КоличествоОбъектовНаСтранице Тогда
			Прервать;
		КонецЕсли;
		// Изменим нумерацию страницы для получения данных
		Если НомерСтраницы <> Неопределено Тогда
			НомерСтраницы = НомерСтраницы + 1;
			СтруктураМетода.Параметры.Вставить("page", НомерСтраницы);
		КонецЕсли;
		
	КонецЦикла;
	
	Сообщить("Загрузка новых партий завершена", СтатусСообщения.Информация);
	
	СтруктураЗаписи = Новый Структура("Объект, Свойство, Значение", Партнер, "ДатаПоследнегоОбменаПоПартиям", ТекущаяДатаСеанса());
	
	РегистрыСведений.ДополнительныеРеквизиты_3PL.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

Процедура ОбновитьПартии(ТаблицаДанных)
		
	Для каждого СтрТаб Из ТаблицаДанных Цикл
		
		Если СтрТаб.ТребуемоеДействие = "Добавление" Тогда
			Попытка
				_3PLСервер.СоздатьСериюНоменклатуры(ПреобразоватьСтрокуТабЗначВСтруктуру(СтрТаб, ТаблицаДанных.Колонки));
			Исключение
				Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось создать серию по товару '%1' (Номер партии: %2) по причине:
				|%3", ?(ЗначениеЗаполнено(СтрТаб.Владелец), СтрТаб.Владелец, СтрТаб.КодПартнера), СтрТаб.НомерПартииПоставщика, ОписаниеОшибки()));
			КонецПопытки;	
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры
// Отправка пикингов (подтверждений по поставкам)
Процедура ПодтвердитьПоставки() Экспорт
	
	Перем Запрос;

	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	ЗаполнитьТаблицуНовыхЗаявокНаОбновлениеСтатусовПоставки();
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_ПодтвердитьПоставки;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	ТаблицаДокументов = _3PLСервер.ПолучитьНеподтвержденныеПоставки(Строка(Партнер));
	
	СоздатьЗапросДляМетода(СтруктураМетода, Запрос);
	
	МассивТранспортировок = Новый Массив;
		
	Для каждого СтрТаб Из ТаблицаДокументов Цикл
		
		Если СтрТаб.ДокументПодтверждения = Неопределено Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(СтрТаб.ДокументПодтверждения) = Тип("ДокументСсылка.ОтборЗапасовНаСкладе") Тогда	
			Если НЕ ЗначениеЗаполнено(ОбщиеФункции.ВернутьЗначениеСвойстваОбъекта(СтрТаб.Объект, СвойстваПартнера.Свойство_НомерТранспортировки)) Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		Попытка
			
			ТелоЗапроса = СформироватьТелоЗапросаДляПодтвержденияПоставки(СтрТаб.Объект, СтрТаб.ДокументПодтверждения, СтрТаб.Идентификатор);
			
			Если ТелоЗапроса = Неопределено Тогда
				Сообщить(ОбщиеФункции._СтрШаблон_("Невозможно отправить подтверждение поставки '%1' по причине: при формировании подтверждения найдены ошибки", СтрТаб.Объект), СтатусСообщения.ОченьВажное);	
				Продолжить;
			КонецЕсли; 
			
			Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.Системная);
			
			Ответ = Соединение.ОтправитьДляОбработки(Запрос);
			
			Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
			
			Если Ответ.КодСостояния > 200 И Ответ.КодСостояния < 300 Тогда
				_3PLСервер.ОперацияВыполненаУспешно(СтрТаб.Объект, Строка(Партнер), "1С", ТелоЗапроса);
				
				Если ТипЗнч(СтрТаб.Объект) = Тип("ДокументСсылка.ЗаказПоставщику")
					И (СвойстваПартнера.Свойство("ПереводитьЦифровыеПартииНаВиртуальные") И СвойстваПартнера.ПереводитьЦифровыеПартииНаВиртуальные) Тогда
					
					ОбщиеФункции.Задержка(120);
					ПеревестиЦифровыеПартииНаВиртуальнуюВСап(СтрТаб.Объект);
					
				КонецЕсли; 
				
				Если ТипЗнч(СтрТаб.Объект) = Тип("ДокументСсылка.ОтгрузкаТоваровУслуг") Тогда
					
					///Антропов Е.П. от 14.10.2024 УЗ №000000452
					//СоздатьЗаявкуНаОперациюОбновленияПоставок(СтрТаб.Объект, МассивТранспортировок);
					СоздатьЗаявкуНаОперациюОбновленияПоставок(СтрТаб, МассивТранспортировок);
					///Антропов Е.П. от 14.10.2024 УЗ №000000452
					
				КонецЕсли; 
			ИначеЕсли Ответ.КодСостояния = 401
				
				///Антропов Е.П. от 15.02.2024 №000000191
				Тогда
				ТокенОбновлен = ПроверкаНаОбновлениеТокена(Данные);
				Если ТокенОбновлен Тогда						
					ПодтвердитьПоставки();
				КонецЕсли;
				
				//И ТипЗнч(Данные) = Тип("Структура")
				//И Данные.Свойство("detail")
				//И Данные.detail = "Full authentication is required to access this resource" Тогда 
				//// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
				//СвойстваПартнера.Токен = "";
				//
				//ОбновитьТокенДоступа();
				//
				//ПодтвердитьПоставки();
				///Антропов Е.П. от 15.02.2024 №000000191
				
				Прервать;
				
			Иначе
				ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
			КонецЕсли;
			
		Исключение
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры
// Отправка маршрутов в SAP 
Процедура ВыгрузитьМаршрутыЭкспедиторов() Экспорт
	
	Перем Запрос;

	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_ВыгрузитьМаршруты;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	ТаблицаДокументов = _3PLСервер.ПолучитьМаршрутыЭкспедиторовДляОтправки(Строка(Партнер));
	
	СоздатьЗапросДляМетода(СтруктураМетода, Запрос);
	
	Для каждого СтрТаб Из ТаблицаДокументов Цикл
		
		Попытка
			
			МассивРасхождений = Новый Массив;
			
			ТелоЗапроса = СформироватьТелоЗапросаДляОтправкиМаршрута(СтрТаб.МаршрутЭкспедитора);
			
			Если ТелоЗапроса = "" Тогда
				Продолжить;
			КонецЕсли; 
			
			Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8);
			
			Ответ = Соединение.ОтправитьДляОбработки(Запрос);
			
			Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
			
			Если Ответ.КодСостояния > 200 И Ответ.КодСостояния < 300 Тогда
				_3PLСервер.ОперацияВыполненаУспешно(СтрТаб.МаршрутЭкспедитора, "1С", Строка(Партнер), ТелоЗапроса);
			ИначеЕсли Ответ.КодСостояния = 401
				
				///Антропов Е.П. от 15.02.2024 №000000191
				Тогда
				ТокенОбновлен = ПроверкаНаОбновлениеТокена(Данные);
				Если ТокенОбновлен Тогда						
					ВыгрузитьМаршрутыЭкспедиторов();
				КонецЕсли;
				
				//И ТипЗнч(Данные) = Тип("Структура")
				//И Данные.Свойство("detail")
				//И Данные.detail = "Full authentication is required to access this resource" Тогда 
				//// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
				//СвойстваПартнера.Токен = "";
				//
				//ОбновитьТокенДоступа();
				//
				//ВыгрузитьМаршрутыЭкспедиторов();
				///Антропов Е.П. от 15.02.2024 №000000191
				
				Прервать;
				
			Иначе
				ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
			КонецЕсли;
			
		Исключение
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

// Выгрузка вычерков при экспедиции
Процедура ВыгрузитьЧекины() Экспорт
	
	Перем Запрос;
	
	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_ВыгрузитьЧекины;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	ТаблицаДокументов = ПолучитьЧекиныДляОтправки();
	
	СоздатьЗапросДляМетода(СтруктураМетода, Запрос);
	
	Для каждого СтрТаб Из ТаблицаДокументов Цикл
		
		Попытка
			
			МассивРасхождений = Новый Массив;
			
			ТелоЗапроса = СтрТаб.Текст;
			
			Если ТелоЗапроса = "" Тогда
				Продолжить;
			КонецЕсли; 
			
			Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8);
			
			Ответ = Соединение.ОтправитьДляОбработки(Запрос);
			
			Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
			
			Если Ответ.КодСостояния > 200 И Ответ.КодСостояния < 300 Тогда
				_3PLСервер.ОперацияВыполненаУспешно(СтрТаб.Объект, "1С", Строка(Партнер), ТелоЗапроса);
				Сообщить("Отправлен чекин на основании документа " + СтрТаб.Объект, СтатусСообщения.Информация);
			ИначеЕсли Ответ.КодСостояния = 401
				
				///Антропов Е.П. от 15.02.2024 №000000191
				Тогда
				ТокенОбновлен = ПроверкаНаОбновлениеТокена(Данные);
				Если ТокенОбновлен Тогда						
					ВыгрузитьЧекины();
				КонецЕсли;

				//И ТипЗнч(Данные) = Тип("Структура")
				//И Данные.Свойство("detail")
				//И Данные.detail = "Full authentication is required to access this resource" Тогда 
				//// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
				//СвойстваПартнера.Токен = "";
				//
				//ОбновитьТокенДоступа();
				//
				//ВыгрузитьЧекины();
				///Антропов Е.П. от 15.02.2024 №000000191
				
				Прервать;
				
			Иначе
				ТекстОшибки = СтрШаблон("Не отправлен чекин на основании документа '%1' по причине: %2", СтрТаб.Объект, Ответ.ПолучитьТелоКакСтроку());
				Сообщить(ТекстОшибки, СтатусСообщения.ОченьВажное);
				ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
			КонецЕсли;
			
		Исключение
			ТекстОшибки = СтрШаблон("Не отправлен чекин на основании документа '%1' по причине: %2", СтрТаб.Объект, ОписаниеОшибки());
			Сообщить(ТекстОшибки, СтатусСообщения.ОченьВажное);
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьТокенДоступа() Экспорт
	
	Если СвойстваПартнера = Неопределено Тогда
		ПрочитатьСвойстваПартнера();
	КонецЕсли;
	
	Если СвойстваПартнера.Свойство("Токен")
		И ЗначениеЗаполнено(СвойстваПартнера.Токен) Тогда
		Возврат;
	КонецЕсли; 
	
	Защита = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows );

	Попытка
		СоединениеДляАвторизации = Новый HTTPСоединение(СвойстваПартнера.АдресСервисаАвторизации,, СвойстваПартнера.Пользователь, СвойстваПартнера.Пароль,,300, Защита);
	Исключение
		ВызватьИсключение ОбщиеФункции._СтрШаблон_("Не удалось подключиться к сервису '%1' по причине: %2", СвойстваПартнера.АдресСервисаАвторизации, ОписаниеОшибки());
	КонецПопытки;
	
	ТелоЗапроса =  СокрЛП("grant_type=client_credentials&scope="+СвойстваПартнера.ОбластьВидимостиДистрибьютораВИнтерфейсе);
	
	Запрос = Новый HTTPЗапрос;
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.Системная);
	Запрос.АдресРесурса = СвойстваПартнера.АдресРесурсаАвторизации;
	Запрос.Заголовки.Вставить("Accept", "*/*");
	Запрос.Заголовки.Вставить("Connection", "keep-alive");
	Запрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Запрос.Заголовки.Вставить("Host", СвойстваПартнера.АдресСервисаАвторизации);
	Запрос.Заголовки.Вставить("Content-Length", СтрДлина(ТелоЗапроса));
	
	Ответ = СоединениеДляАвторизации.ОтправитьДляОбработки(Запрос);
	
	Если Ответ.КодСостояния = 200 Тогда
		
		Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
		
		СтруктураЗаписи = РегистрыСведений.ДополнительныеРеквизиты_3PL.ПолучитьСтруктуруЗаписи();
		СтруктураЗаписи.Объект = Партнер;
		СтруктураЗаписи.Свойство = "Токен";
		СтруктураЗаписи.ЗначениеСтрока = ОбщиеФункции._СтрШаблон_("%1 %2", Данные.token_type, Данные.access_token);
		
		РегистрыСведений.ДополнительныеРеквизиты_3PL.ДобавитьЗапись(СтруктураЗаписи);
		
		СвойстваПартнера.Вставить(СтруктураЗаписи.Свойство, СтруктураЗаписи.ЗначениеСтрока);
		// Регистрация заявки на получение токена
		РегистраторЗаявки = Документы.РегистраторЗаписи.СоздатьНовыйДокумент("Получение нового токена доступа по партнеру "+Партнер);
		
		_3PLСервер.ДобавитьЗаписьПоДокументуВЖурналОпераций(РегистраторЗаявки, Строка(Партнер), "1С", Справочники.СтатусыЗаявок.УспешноОбработана, "GetToken",
			ТекущаяДатаСеанса(), ТекущаяДатаСеанса(), Данные.access_token);
		
	Иначе
		
		ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
		
	КонецЕсли;
	
	Соединение = Неопределено;
	
КонецПроцедуры

Процедура ПолучитьТокенПечати()
	
	Перем Запрос;
	
	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_ПолучитьТокенПечати;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	СоздатьЗапросДляМетода(СтруктураМетода, Запрос, Новый Структура());
	
	Попытка
		
		Ответ = Соединение.Получить(Запрос);
		
		Если Ответ.КодСостояния >= 200 И Ответ.КодСостояния < 300 Тогда
			СвойстваПартнера.ТокенПечати = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		ИначеЕсли Ответ.КодСостояния = 401 тогда
			
			Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
			
			///Антропов Е.П. от 15.02.2024 №000000191
			ТокенОбновлен = ПроверкаНаОбновлениеТокена(Данные);
			Если ТокенОбновлен Тогда						
				ПолучитьТокенПечати();
			КонецЕсли;
			
			//Если ТипЗнч(Данные) = Тип("Структура")  				
			//	И Данные.Свойство("detail")
			//	И Данные.detail = "Full authentication is required to access this resource" Тогда 
			//	// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
			//	СвойстваПартнера.Токен = "";
			//	
			//	ОбновитьТокенДоступа();
			//	
			//	ПолучитьТокенПечати();
			//	
			//КонецЕсли;
			///Антропов Е.П. от 15.02.2024 №000000191
			
		Иначе
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
		КонецЕсли;
		
	Исключение
		ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПроверкаЗаполнения()
	
	ТекстСообщения = "";
	
	Если Партнер.Пустая() Тогда
		ТекстСообщения = ТекстСообщения + "Не удалось получить настройки партнера по причине: не заполнен 'Партнер'";
	КонецЕсли;
	
	Если НЕ Партнер.Пустая() И СвойстваПартнера = Неопределено Тогда
		ТекстСообщения = ТекстСообщения + ОбщиеФункции._СтрШаблон_("Не найдены свойства партнера ", Партнер);
	КонецЕсли;
	
	МассивПроверяемыхСвойств = ОбщиеФункции.РазложитьСтрокуВМассив("НомерВиртуальнойПартииПУ;АдресСервиса;АдресСервисаАвторизации;АдресРесурсаАвторизации;КодДистрибьютора;ОбластьВидимостиДистрибьютораВИнтерфейсе;Пароль;Пользователь;ИспользоватьЗащищенноеСоединение
	|Контракт;Склад;ГруппаНоменклатуры;ОсновнойПоставщик;ОсновнаяОрганизация;ОсновнойДоговорПриемаНаХранение;
	|ОсновнойТипЦенКонтрагента;КачествоДляБлокировки;ОсновноеПодразделение;ОсновнойСпособРасчетов;ОсновнойВидПоставки;ВидПоставки_Самовывоз;
	|НаименованиеДоговораОтветХранения;Свойство_КодГрузополучателя;Свойство_НомерВходящегоДокумента;Свойство_НомерТранспортировки;Свойство_КодПричиныНеполнойКомплектацииПепси;
	|ОсновнойКодПричиныНеполнойКомплектации;ОсновнойСклад;КачествоПретензия;КостЦентр;СобственныеАрендодатели;Свойство_КодСотрудникаСАП;Свойство_КодТранспортаСАП;
	
	///Антропов Е.П. от 27.11.2023 №000000116
	|СкладБаллонов;ОсновнойДоговорПриемаНаХранение;ПричинаВозвратаБаллонов;
	///Антропов Е.П. от 27.11.2023 №000000116
	
	|ТехническоеИмяМестаОтгрузки;КаталогХраненияПечатныхФорм;НомерВиртуальнойПартии;ГруппаХранения;ВремяНачалаМаршрута;ВремяОкончанияМаршрута;СреднееВремяПосещения;Углекислота;Баллон;ОсновнойДоговорПокупка;ПереводитьЦифровыеПартииНаВиртуальные;Свойство_НомерЗаказаГрузополучателя;ТипШтрихкодаУпак;ТипШтрихкодаШт;", ";");
	
	Для каждого ИмяСвойства Из МассивПроверяемыхСвойств Цикл
		
		Если ПустаяСтрока(ИмяСвойства) Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НЕ СвойстваПартнера.Свойство(ИмяСвойства) Тогда
			ТекстСообщения = ТекстСообщения + ОбщиеФункции._СтрШаблон_("В настройках обмена не найдено свойство '%1'", ИмяСвойства) + Символы.ПС;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ТекстСообщения <> "" Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли; 
	
КонецПроцедуры
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьПолноеИмяОперации(Операция)
	
	ПрефиксОперации = "ЗапущенаОперация";
	ПолноеИмяОперации = ОбщиеФункции._СтрШаблон_("%1_%2", ПрефиксОперации, Операция);
	
	Возврат ПолноеИмяОперации;
	
КонецФункции

Функция ПолучитьИнформациюОПрошломЗапуске(Операция)
	
	ПолноеИмяОперации = СформироватьПолноеИмяОперации(Операция);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДополнительныеРеквизиты_3PL.ЗначениеСтрока КАК СТРОКА(999)) КАК Инфо
		|ИЗ
		|	РегистрСведений.ДополнительныеРеквизиты_3PL КАК ДополнительныеРеквизиты_3PL
		|ГДЕ
		|	ДополнительныеРеквизиты_3PL.Объект = &Объект
		|	И ДополнительныеРеквизиты_3PL.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Объект", Партнер); 
	Запрос.УстановитьПараметр("Свойство", ПолноеИмяОперации); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Инфо = "";
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Инфо = ВыборкаДетальныеЗаписи.Инфо;
	КонецЕсли; 
	
	Возврат Инфо;
	
КонецФункции
 
Функция ОперацияЗапущена(Операция, ИнформацияОЗапуске = "")
	
	Отказ = Ложь;
	
	ПолноеИмяОперации = СформироватьПолноеИмяОперации(Операция);
	
	СвойствоОбъекта = РегистрыСведений.ДополнительныеРеквизиты_3PL.ПолучитьСвойствоОбъекта(Партнер, ПолноеИмяОперации);
	
	Если ЗначениеЗаполнено(СвойствоОбъекта) Тогда
		Отказ = СвойствоОбъекта.ЗапущенаОперация_ПолучитьДокументы;
		Если Отказ Тогда
			ИнформацияОЗапуске = ПолучитьИнформациюОПрошломЗапуске(Операция);		
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Отказ;
	
КонецФункции

Процедура УстановитьПризнакЗапускаОперации(Операция, ПризнакЗапуска)
	
	СтруктураЗаписи = РегистрыСведений.ДополнительныеРеквизиты_3PL.ПолучитьСтруктуруЗаписи();
	СтруктураЗаписи.Объект = Партнер;
	СтруктураЗаписи.Свойство = СформироватьПолноеИмяОперации(Операция);
	СтруктураЗаписи.Значение = ПризнакЗапуска;
	СтруктураЗаписи.ЗначениеСтрока = ОбщиеФункции._СтрШаблон_("Компьютер: %1, Пользователь: %2, Дата запуска: %3",
		ИмяКомпьютера(), ПараметрыСеанса.ТекущийПользователь, ТекущаяДатаСеанса());
	
	НоваяЗапись = РегистрыСведений.ДополнительныеРеквизиты_3PL.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
	
	НоваяЗапись.Записать();
	
	СвойстваПартнера.ЗапущенаОперация_ПолучитьДокументы = ПризнакЗапуска;
	
КонецПроцедуры
  
Процедура СоздатьУведомление(ТекстСообщения)
	
	Перем Получатели, ИнфСобытие;
	
	Если СвойстваПартнера.Свойство("ПолучателиУведомленийПоНоменклатуре")
		И ЗначениеЗаполнено(СвойстваПартнера.ПолучателиУведомленийПоНоменклатуре) Тогда
		
		Получатели = СвойстваПартнера.ПолучателиУведомленийПоНоменклатуре;
				
	КонецЕсли;
	
	Если СвойстваПартнера.Свойство("ИнфСобытие")
		И ЗначениеЗаполнено(СвойстваПартнера.ИнфСобытие) Тогда
		
		ИнфСобытие = СвойстваПартнера.ИнфСобытие;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Получатели) И ЗначениеЗаполнено(ИнфСобытие) Тогда
		
		МассивПолучателей = ОбщиеФункции.РазложитьСтрокуВМассив(Получатели, ";");
		МассивПользователейДляРассылкиУведомлений = ПолучитьМассивПользователейДляРассылкиУведомлений(МассивПолучателей);
		
		Для каждого Пользователь Из МассивПользователейДляРассылкиУведомлений Цикл
			
			НоваяЗапись = РегистрыСведений.СобытияДляУведомления.СоздатьМенеджерЗаписи();
			НоваяЗапись.Пользователь = Пользователь;
			НоваяЗапись.Метка = Партнер;
			НоваяЗапись.Событие = ИнфСобытие;
			НоваяЗапись.СчетчикПоказов = 1;
			НоваяЗапись.Дата = ТекущаяДатаСеанса();
			НоваяЗапись.Комментарий = Новый ХранилищеЗначения(ТекстСообщения);
			НоваяЗапись.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьМассивПользователейДляРассылкиУведомлений(МассивПолучателей)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивПолучателей", МассивПолучателей); 
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Справочник.Пользователи ГДЕ Наименование В (&МассивПолучателей)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции
  
Функция ПолучитьМассивСкладовХранения()
	
	Склады = Новый Массив;
	Склады.Добавить(СвойстваПартнера.Склад);
	Если УчетСерийныхНомеровПоБаллонам Тогда
		Склады.Добавить(СвойстваПартнера.СкладБаллонов);
	КонецЕсли; 
	
	Возврат Склады
	
КонецФункции

Процедура СбросНастроек() Экспорт
	
	Соединение = Неопределено;
	СвойстваПартнера = Неопределено;
	
КонецПроцедуры

Процедура СформироватьТаблицуНоменклатурыУглекислота()
	
	МассивАртикуловНоменклатурыУглекислота = ОбщиеФункции.РазложитьСтрокуВМассив(СвойстваПартнера.Углекислота, ";");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппаНоменклатурыСОХ", СвойстваПартнера.ГруппаНоменклатуры); 
	Запрос.УстановитьПараметр("МассивАртикулов", МассивАртикуловНоменклатурыУглекислота); 
	Запрос.Текст = "ВЫБРАТЬ Ссылка КАК Номенклатура ИЗ Справочник.Номенклатура ГДЕ Ссылка В ИЕРАРХИИ (&ГруппаНоменклатурыСОХ) И Артикул В (&МассивАртикулов)";
	
	ТаблицаНоменклатурыУглекислоты = Запрос.Выполнить().Выгрузить();
		
КонецПроцедуры
 
Функция ПолучитьМаршрутныйДокумент(НомерВходящегоДокумента, ДатаЭкспедиции, Основание, СтруктурнаяЕдиницаКонтрагента)
	
	МаршрутныйДокумент = ОбщиеФункции.ВернутьОбъектПоЗначениюСвойства(СвойстваПартнера.Свойство_НомерВходящегоДокумента, Основание);
	
	Если НЕ ЗначениеЗаполнено(МаршрутныйДокумент) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтгрузкаТоваровУслуг.Ссылка
		|ИЗ
		|	Документ.ОтгрузкаТоваровУслуг КАК ОтгрузкаТоваровУслуг
		|ГДЕ
		|	ОтгрузкаТоваровУслуг.СтруктурнаяЕдиницаКонтрагента = &СтруктурнаяЕдиницаКонтрагента
		|	И ОтгрузкаТоваровУслуг.ДатаОтгрузки >= &ДатаСреза
		|	И ОтгрузкаТоваровУслуг.Склад = &Склад
		|	И ОтгрузкаТоваровУслуг.Проведен
		|	И ОтгрузкаТоваровУслуг.Подразделение В ИЕРАРХИИ(&ПепсиТО)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтгрузкаТоваровУслуг.ДатаОтгрузки";
		
		Запрос.УстановитьПараметр("ДатаСреза", 						НачалоДня(ДатаЭкспедиции));
		Запрос.УстановитьПараметр("Склад", 							СвойстваПартнера.Склад);
		Запрос.УстановитьПараметр("ПепсиТО", 						СвойстваПартнера.ОсновноеПодразделение); 
		Запрос.УстановитьПараметр("СтруктурнаяЕдиницаКонтрагента", 	СтруктурнаяЕдиницаКонтрагента);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			МаршрутныйДокумент = ВыборкаДетальныеЗаписи.Ссылка;
		Иначе
			МаршрутныйДокумент = Документы.ОтгрузкаТоваровУслуг.ПустаяСсылка();
		КонецЕсли; 
			
	КонецЕсли;
	
	Возврат МаршрутныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПереводаЦифровыхПартийНаВиртуальную(ЗаказыПоставщику, МассивПартийДляПереводаНаВиртуальную)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПоставщику.Ссылка.Дата КАК Дата,
	|	Док.Ссылка КАК Ссылка,
	|	ЗаказПоставщику.Номенклатура КАК Номенклатура,
	|	ЗаказПоставщику.НомерПартииПоставщика КАК НомерПартииПоставщика,
	|	ЗаказПоставщику.Качество КАК Склад,
	|	ЗаказПоставщику.Качество КАК СкладПолучатель,
	|	ЗаказПоставщику.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПоставщику.Количество КАК Количество,
	|	""04"" КАК ТипОперации,
	|	""311"" КАК ТипДвижения,
	|	ИСТИНА КАК ЭтоПересорт,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.СерияНоменклатуры.Комментарий ПОДОБНО ""%CIM%""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ
	|			Ложь
	|	КОНЕЦ КАК ЕстьПомарочныйУчет
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщику
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйСкладскойОрдер КАК Док
	|		ПО ЗаказПоставщику.Ссылка = Док.ДокументОснование
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &Ссылка
	|	И НЕ ЗаказПоставщику.Номенклатура В ИЕРАРХИИ (&Молочко)
	|	И ЗаказПоставщику.СерияНоменклатуры <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И ЗаказПоставщику.НомерПартииПоставщика <> &НомерВиртуальнойПартии
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|ИТОГИ
	|	МАКСИМУМ(ТипОперации),
	|	МАКСИМУМ(ТипДвижения)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоставПСО.СерияНоменклатуры
	|ИЗ
	|	Документ.ПриходныйСкладскойОрдер КАК ПСО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйСкладскойОрдер.Товары КАК СоставПСО
	|		ПО ПСО.Ссылка = СоставПСО.Ссылка
	|ГДЕ
	|	ПСО.ДокументОснование = &Ссылка
	|	И НЕ СоставПСО.Номенклатура В ИЕРАРХИИ (&Молочко)
	|	И СоставПСО.СерияНоменклатуры <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И СоставПСО.СерияНоменклатуры.НомерПартииПоставщика <> &НомерВиртуальнойПартии";
	
	Запрос.УстановитьПараметр("Ссылка",                 ЗаказыПоставщику);
	Запрос.УстановитьПараметр("Молочко",                Справочники.Номенклатура.НайтиПоКоду("Ц060537470")); 
	Запрос.УстановитьПараметр("НомерВиртуальнойПартии", СвойстваПартнера.НомерВиртуальнойПартии); 
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	МассивПартийДляПереводаНаВиртуальную = РезультатЗапроса.Получить(1).Выгрузить().ВыгрузитьКолонку("СерияНоменклатуры");
	
	Возврат РезультатЗапроса.Получить(0).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

Функция ПолучитьСерииБаллонов(ДокументСсылка, ПолноеИмяТЧ, ИмяКолонкиСерии)
		
	ТекстЗапроса = ОбщиеФункции._СтрШаблон_("ВЫБРАТЬ РАЗЛИЧНЫЕ ТабЧасть.%1 КАК СерияНоменклатуры, ТабЧасть.Номенклатура
	|ИЗ %2 КАК ТабЧасть ГДЕ ТабЧасть.Ссылка В (&Ссылка) И ТабЧасть.Номенклатура = &Баллон",
	ИмяКолонкиСерии, ПолноеИмяТЧ);
		
	Запрос = Новый Запрос(ТекстЗапроса);	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка); 
	Запрос.УстановитьПараметр("Баллон", СвойстваПартнера.Баллон); 
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СформироватьПолноеИмяТЧ(ДокументСсылка, ИмяТЧ)
	
	Мета = ДокументСсылка.Метаданные();
	
	Возврат ОбщиеФункции._СтрШаблон_("Документ.%1.%2", Мета.Имя, ИмяТЧ);
	
КонецФункции

Функция ПолучитьДокументыПодтвержденияПоБаллонамИзЧекина(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", ДокументСсылка.ДокументыОтгрузки.ВыгрузитьКолонку("ДокументОтгрузки")); 
	Запрос.Текст = "ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	(ВозвратТоваровОтПокупателя.Ссылка В (&МассивДокументов)
	|			ИЛИ ВозвратТоваровОтПокупателя.МаршрутныйДокумент В (&МассивДокументов))";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
 
Процедура ПеревестиЦифровыеПартииНаВиртуальнуюВСап(ЗаказПоставщику)
	
	Перем Запрос;
		
	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_КорректировкаОстатков;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	СоздатьЗапросДляМетода(СтруктураМетода, Запрос);
	
	МассивПартийДляПереводаНаВиртуальную = Новый Массив;
	
	ВыборкаДанных = ПолучитьДанныеДляПереводаЦифровыхПартийНаВиртуальную(ЗаказПоставщику, МассивПартийДляПереводаНаВиртуальную);
	
	Пока ВыборкаДанных.Следующий() Цикл
		
		Попытка
			
			ТелоЗапроса = СформироватьТелоЗапросаПоРасхождениямПриПересчете(ВыборкаДанных, МассивПартийДляПереводаНаВиртуальную);
			
			Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.Системная);
			
			Ответ = Соединение.ОтправитьДляОбработки(Запрос);
			
			Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
			
			Если Ответ.КодСостояния > 200 И Ответ.КодСостояния < 300 Тогда
				
				// Добавляем дополнительную запись в журнал операций, чтобы повторно не отослать в САП перевод партий в FGDUMMY
				// т.к будет ошибка. Эту запись будет использовать для проверки в функции "ПолучитьДанныеДляПереводаЦифровыхПартийНаВиртуальную"
				_3PLСервер.ДобавитьЗаписьПоДокументуВЖурналОпераций(ЗаказПоставщику, "1С", "AutoConverter", Справочники.СтатусыЗаявок.УспешноОбработана,
					"convertfgdummy"+Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddHHmmss"), ТекущаяДатаСеанса(), ТекущаяДатаСеанса(), ТелоЗапроса);
				
				ПеревестиЦифровыеПартииНаВиртуальнуюВ1С(МассивПартийДляПереводаНаВиртуальную);
				
			ИначеЕсли Ответ.КодСостояния = 401
				
				///Антропов Е.П. от 15.02.2024 №000000191
				Тогда
				ТокенОбновлен = ПроверкаНаОбновлениеТокена(Данные);
				Если ТокенОбновлен Тогда						
					ОтправитьКорректировкиОстатков();
				КонецЕсли;

				//И ТипЗнч(Данные) = Тип("Структура")
				//И Данные.Свойство("detail")
				//И Данные.detail = "Full authentication is required to access this resource" Тогда 
				//// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
				//СвойстваПартнера.Токен = "";
				//
				//ОбновитьТокенДоступа();
				//
				//ОтправитьКорректировкиОстатков();
				///Антропов Е.П. от 15.02.2024 №000000191
				
			Иначе
				ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
			КонецЕсли;
			
		Исключение
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
		КонецПопытки
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПеревестиЦифровыеПартииНаВиртуальнуюВ1С(МассивПартий)
	
	Для каждого Элемент Из МассивПартий Цикл
		
		ЕстьПомарочныйУчет = (СтрНайти(ВРЕГ(Элемент.Комментарий), "CIM") > 0);
		
		Попытка
			
			ПартияОбъект = Элемент.ПолучитьОбъект();
			СтарыйНомерПартии = ПартияОбъект.НомерПартииПоставщика;
			//{[+] Боровик Артем Олегович 09.12.2024 12:27:01
			Если ЕстьПомарочныйУчет Тогда
				ПартияОбъект.НомерПартииПоставщика = СвойстваПартнера.НомерВиртуальнойПартииПУ;
			Иначе
				ПартияОбъект.НомерПартииПоставщика = СвойстваПартнера.НомерВиртуальнойПартии;
			КонецЕсли; 
			//}Боровик Артем Олегович 09.12.2024 12:27:01 
			ПартияОбъект.Комментарий = ПартияОбъект.Комментарий + " oldbatch:" +СтарыйНомерПартии;
			ПартияОбъект.Наименование = ПартияОбъект.СформироватьНаименование();
			ПартияОбъект.ОбменДанными.Загрузка = Истина;///Антропов Е.П. от 10.01.2025
			ПартияОбъект.Записать();
			
		Исключение
		    Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось перевести партию '%1 (Владелец: %2)' на виртуальную по причине: %3",
				Элемент, Элемент.Владелец, ОписаниеОшибки()), СтатусСообщения.ОченьВажное);
		КонецПопытки; 
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОбработкаНоменклатурыИзФайла(ТаблицаДанных) Экспорт
	
	ОбновитьНоменклатуру(ОпределитьТребуемыеДействияПоРаботеСНоменклатурой(ТаблицаДанных));
	
КонецПроцедуры

Процедура СоздатьЗаявкиПоКорректировкеОстатков()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	влЗапрос.Дата,
	|	влЗапрос.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Док.Дата КАК Дата,
	|		Состав.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.СписаниеТоваров.Товары КАК Состав
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеТоваров КАК Док
	|			ПО Состав.Ссылка = Док.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналОпераций
	|			ПО (Док.Ссылка = ЖурналОпераций.Объект)
	|				И (ЖурналОпераций.Источник = ""1С"")
	|				И (ЖурналОпераций.Приемник = &Партнер)
	|	ГДЕ
	|		Состав.Номенклатура В ИЕРАРХИИ(&ГруппаНоменклатуры)
	|		И Док.Дата >= &ДатаСреза
	|		И Док.Проведен
	|		И Док.Склад В (&ОсновнойСклад)
	|		И Док.ИнвентаризацияТоваровНаСкладе = НЕОПРЕДЕЛЕНО
	|		И ЖурналОпераций.Объект ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Док.Дата,
	|		Состав.Ссылка
	|	ИЗ
	|		Документ.ОприходованиеТоваров.Товары КАК Состав
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров КАК Док
	|			ПО Состав.Ссылка = Док.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналОпераций
	|			ПО (Док.Ссылка = ЖурналОпераций.Объект)
	|				И (ЖурналОпераций.Источник = ""1С"")
	|				И (ЖурналОпераций.Приемник = &Партнер)
	|	ГДЕ
	|		Состав.Номенклатура В ИЕРАРХИИ(&ГруппаНоменклатуры)
	|		И Док.Дата >= &ДатаСреза
	|		И Док.Проведен
	|		И Док.Склад В (&ОсновнойСклад)
	|		И Док.ИнвентаризацияТоваровНаСкладе = НЕОПРЕДЕЛЕНО
	|		И ЖурналОпераций.Объект ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Док.Дата,
	|		Состав.Ссылка
	|	ИЗ
	|		Документ.КорректировкаКачестваЗапасов.Товары КАК Состав
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаКачестваЗапасов КАК Док
	|			ПО Состав.Ссылка = Док.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналОпераций
	|			ПО (Док.Ссылка = ЖурналОпераций.Объект)
	|				И (ЖурналОпераций.Источник = ""1С"")
	|				И (ЖурналОпераций.Приемник = &Партнер)
	|	ГДЕ
	|		Состав.Номенклатура В ИЕРАРХИИ(&ГруппаНоменклатуры)
	|		И Док.Дата >= &ДатаСреза
	|		И Док.Проведен
	|		И Док.Склад В (&ОсновнойСклад)
	|		И ЖурналОпераций.Объект ЕСТЬ NULL) КАК влЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	влЗапрос.Дата";
		
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", СвойстваПартнера.ГруппаНоменклатуры); 
	Запрос.УстановитьПараметр("ОсновнойСклад", ПолучитьМассивСкладовХранения()); 
	Запрос.УстановитьПараметр("Партнер", Строка(Партнер));
	Запрос.УстановитьПараметр("ДатаСреза", НачалоДня(ТекущаяДатаСеанса())); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		_3PLСервер.ДобавитьЗаписьПоДокументуВЖурналОпераций(ВыборкаДетальныеЗаписи.Ссылка, "1С", Строка(Партнер), Справочники.СтатусыЗаявок.Новая,
					"inventorymovement_"+Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddHHmmss"), ТекущаяДатаСеанса(), ТекущаяДатаСеанса());	
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСведенияОСерияхНаБаллоны(ЗаписьДжисон, СерииБаллонов)
	
	ЗаписьДжисон.ЗаписатьИмяСвойства("serialNumDetails");
	
	ЗаписьДжисон.ЗаписатьНачалоМассива();
	
		Для каждого СтрСерияБаллона Из СерииБаллонов Цикл
			ЗаписьДжисон.ЗаписатьНачалоОбъекта();
				ЗаписатьСвойствоИЗначениеJSON(ЗаписьДжисон, "serialno", Строка(СтрСерияБаллона.СерияНоменклатуры));
			ЗаписьДжисон.ЗаписатьКонецОбъекта();
		КонецЦикла; 
	
	ЗаписьДжисон.ЗаписатьКонецМассива();
	
КонецПроцедуры

Процедура ДобавитьСведенияОСерияхНаБаллоныПоКорректировкамОстатков(ЗаписьДжисон, СерииБаллонов, НомерСтроки)
	
	Если НЕ ЗначениеЗаполнено(СерииБаллонов) Тогда
		Возврат;
	КонецЕсли; 
	
	СтрСерияБаллона = СерииБаллонов.Получить(НомерСтроки - 1);
	
	ЗаписьДжисон.ЗаписатьИмяСвойства("serialNumDetails");
	
	ЗаписьДжисон.ЗаписатьНачалоМассива();
	
		ЗаписьДжисон.ЗаписатьНачалоОбъекта();
			ЗаписатьСвойствоИЗначениеJSON(ЗаписьДжисон, "matdocitem", НомерСтроки);
			ЗаписатьСвойствоИЗначениеJSON(ЗаписьДжисон, "serialno", Строка(СтрСерияБаллона.СерияНоменклатуры));
		ЗаписьДжисон.ЗаписатьКонецОбъекта();
	
	ЗаписьДжисон.ЗаписатьКонецМассива();	
	
КонецПроцедуры	

#Область ОБЩИЕ

Функция ПолучитьОтветственного(Контрагент, СтруктурнаяЕдиницаКонтрагента, Подразделение, ПоказатьУведомление = Ложь)
	
	Ответственный = Справочники.Пользователи.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаспределениеМенеджеров.Менеджер
	|ИЗ
	|	РегистрСведений.РаспределениеМенеджеровЗаПокупателями КАК РаспределениеМенеджеров
	|ГДЕ
	|	РаспределениеМенеджеров.Контрагент = &Контрагент
	|	И РаспределениеМенеджеров.СтруктурнаяЕдиницаКонтрагента = &СтруктурнаяЕдиницаКонтрагента
	|	И РаспределениеМенеджеров.Менеджер.Подразделение.Наименование ПОДОБНО ""%Пепси%""";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиницаКонтрагента", СтруктурнаяЕдиницаКонтрагента);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если  Выборка.Следующий() Тогда
		Ответственный = Выборка.Менеджер;
	Иначе
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Если ПоказатьУведомление Тогда
			Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось найти агента подвязанного к торговой точке %1 (%2)", Контрагент, СтруктурнаяЕдиницаКонтрагента))
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Ответственный; 
	
КонецФункции

Процедура СформироватьТаблицуОсновныхКарточек()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", СвойстваПартнера.ГруппаНоменклатуры); 
	
	Если СвойстваПартнера.Склад = Обмен_1С_Транзит_ПовтИсп.ПолучитьСсылкуНаСохЛогКомплекс() Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	влЗапрос.Номенклатура,
		|	влЗапрос.ОсновнаяНоменклатура,
		|	влЗапрос.Номенклатура.Артикул КАК Артикул
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.Номенклатура) КАК Номенклатура,
		|		ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Номенклатура) КАК ОсновнаяНоменклатура
		|	ИЗ
		|		РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|	ГДЕ
		|		ЗначенияСвойствОбъектов.Свойство = &Свойство_ОсновнаяКарточкаНоменклатуры) КАК влЗапрос
		|ГДЕ
		|	влЗапрос.ОсновнаяНоменклатура В ИЕРАРХИИ(&ГруппаНоменклатуры)";
		
		Запрос.УстановитьПараметр("Свойство_ОсновнаяКарточкаНоменклатуры", ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьСвойствоПоИмени("ОсновнаяКарточкаНоменклатуры")); 	
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ
		|	СпрТовары.Ссылка КАК ОсновнаяНоменклатура,
		|	влЗапрос.Ссылка КАК Номенклатура,
		|	влЗапрос.Артикул
		|ИЗ
		|	Справочник.Номенклатура КАК СпрТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СпрТовары.Ссылка КАК Ссылка,
		|			СпрТовары.Артикул КАК Артикул
		|		ИЗ
		|			Справочник.Номенклатура КАК СпрТовары
		|		ГДЕ
		|			СпрТовары.Ссылка В ИЕРАРХИИ(&ГруппыНоменклатуры3ПД)) КАК влЗапрос
		|		ПО СпрТовары.Артикул = влЗапрос.Артикул
		|ГДЕ
		|	СпрТовары.Ссылка В ИЕРАРХИИ(&ГруппаНоменклатуры)
		|	И СпрТовары.ЭтоГруппа = ЛОЖЬ";
		
		МассивКодовГруппНоменклатуры = ОбщиеФункции.РазложитьСтрокуВМассив(СвойстваПартнера.ГруппыНоменклатуры3PD, ";");
		ГруппыНоменклатуры3ПД = Новый СписокЗначений;
		
		Для каждого КодГруппы Из МассивКодовГруппНоменклатуры Цикл
			ГруппыНоменклатуры3ПД.Добавить(Справочники.Номенклатура.НайтиПоКоду(КодГруппы));
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ГруппыНоменклатуры3ПД", ГруппыНоменклатуры3ПД); 
		
	КонецЕсли; 
	
	ТаблицаОсновныхКарточекНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОсновныхКарточекНоменклатуры.Индексы.Добавить("ОсновнаяНоменклатура");
	
КонецПроцедуры
 
Процедура КонвертироватьТоварыВыкупаВТоварыДистрибьютора(Товары)
	
	Если ТаблицаОсновныхКарточекНоменклатуры = Неопределено Тогда
		СформироватьТаблицуОсновныхКарточек();
	КонецЕсли; 
	
	Для каждого Элемент Из Товары Цикл
		
		СтрОсновная = ТаблицаОсновныхКарточекНоменклатуры.Найти(Элемент.Номенклатура, "ОсновнаяНоменклатура");
		
		Если СтрОсновная = Неопределено Тогда
			Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось конвертировать товар выкупа '%1' в товар дистрибьютора по причине: у товара дистрибьютора не заполнено свойство 'Основная карточка номенклатуры' или товара дистрибьютора не существует", Элемент.Номенклатура), СтатусСообщения.Внимание);
			Продолжить;
		КонецЕсли; 
		
		Элемент.Номенклатура = СтрОсновная.Номенклатура;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура СформироватьТаблицуЕдиницПоклажедателя()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	влЗапрос.Объект,
	|	влЗапрос.Значение.КодовоеОбозначение КАК ЕдИзмПоклажедателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		СвойстваОбъектов.Объект КАК Объект,
	|		СвойстваОбъектов.Значение КАК Значение
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваОбъектов
	|			ПО Номенклатура.Ссылка = СвойстваОбъектов.Объект
	|  				И СвойстваОбъектов.Свойство = &ЕдиницаХраненияПоклажедателя 
	|	ГДЕ
	|		Номенклатура.Ссылка В ИЕРАРХИИ(&ГруппаНоменклатуры)
	|		И Номенклатура.ПометкаУдаления = ЛОЖЬ
	|		И Номенклатура.ЭтоГруппа = ЛОЖЬ) КАК влЗапрос";
	
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", СвойстваПартнера.ГруппаНоменклатуры);
	Запрос.УстановитьПараметр("ЕдиницаХраненияПоклажедателя", СвойстваПартнера.Свойство_ЕдиницаХраненияВнешнейСистемы); 
	
	ТаблицаЕдиницИзмеренийПоклажедателя = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры
 
Процедура СформироватьТаблицаТоваровДистрибьютора()
	
	ВнСистема = СвойстваПартнера.ВнешняяСистемаОбмена3PD;
	
	Если НЕ ЗначениеЗаполнено(ВнСистема) Тогда
		
		Сообщить("У партнера не найдено свойство 'ВнешняяСистемаОбмена3PD'. Создание дублей для дистрибютора невозможно");
		Возврат;
		
	КонецЕсли;
	
	Контракты = Справочники.ВнешниеСистемы.ПолучитьЗначенияКлюча(ВнСистема, "КонтрактДляОстатков");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Артикул
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ДистрибьюторскийКонтракт В(&МассивКонтрактов)
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("МассивКонтрактов", Контракты); 
	
	ТаблицаТоваровДистрибьютора = Запрос.Выполнить().Выгрузить();
	
	ТаблицаТоваровДистрибьютора.Индексы.Добавить("Артикул");
	
КонецПроцедуры
 
Процедура ЗаполнитьТаблицуНовыхЗаявокНаОбновлениеСтатусовПоставки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Объект,
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Идентификатор,
	|	ВЫРАЗИТЬ(ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Текст КАК СТРОКА(36)) КАК НомерТранспортировки
	|ИЗ
	|	РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций
	|ГДЕ
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Идентификатор В (""shipmentupdate_004"", ""shipmentupdate_005"")
	|	И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыЗаявок.Новая)";
	
	ТаблицаНовыхЗаявокНаОбновлениеСтатусовПоставки = Запрос.Выполнить().Выгрузить();
	ТаблицаНовыхЗаявокНаОбновлениеСтатусовПоставки.Колонки.Индекс(ТаблицаНовыхЗаявокНаОбновлениеСтатусовПоставки.Колонки.НомерТранспортировки);
	
КонецПроцедуры

Функция ОпределитьЕдиницуИзмеренияПепси(ЕдиницаИзмерения, Владелец) Экспорт
	
	Если ТаблицаЕдиницИзмеренийПоклажедателя = Неопределено Тогда
		СформироватьТаблицуЕдиницПоклажедателя();
	КонецЕсли; 
	
	ЕдиницаИзмеренияПепси = "";
	
	СтрЕдиницаИзмеренияПоклажедателя = ТаблицаЕдиницИзмеренийПоклажедателя.Найти(Владелец, "Объект");
	
	Если СтрЕдиницаИзмеренияПоклажедателя <> Неопределено И ЗначениеЗаполнено(СтрЕдиницаИзмеренияПоклажедателя.ЕдИзмПоклажедателя) Тогда
		ЕдиницаИзмеренияПепси = СтрЕдиницаИзмеренияПоклажедателя.ЕдИзмПоклажедателя;
	Иначе
		
		Если ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код = "796" Тогда
			ЕдиницаИзмеренияПепси = "EA";
		ИначеЕсли ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код = "166" Тогда
			ЕдиницаИзмеренияПепси = "KG";
		Иначе
			ЕдиницаИзмеренияПепси = "CS";
		КонецЕсли;
	
	КонецЕсли; 
		
	Возврат ЕдиницаИзмеренияПепси;
	
КонецФункции

Процедура ЗаписатьСвойствоИЗначениеJSON(Запись, ИмяСвойства, пЗначение = Неопределено) Экспорт
	
	Запись.ЗаписатьИмяСвойства(ИмяСвойства);
	Если пЗначение <> Неопределено Тогда
		Если ТипЗнч(пЗначение) = Тип("Дата") Тогда
			Запись.ЗаписатьЗначение(ЗаписатьДатуJSON(пЗначение, ФорматДатыJSON.ISO));
		ИначеЕсли ТипЗнч(пЗначение) = Тип("Число") Тогда
			Запись.ЗаписатьЗначение(Формат(пЗначение, "ЧРД=.; ЧН=0; ЧГ=0"));
		Иначе
			Запись.ЗаписатьЗначение(Строка(пЗначение));
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьДату(ДатаВСтроке, Формат)
	
	ПустаяДата = Дата(1,1,1);
	
	Если НЕ ЗначениеЗаполнено(ДатаВСтроке) Тогда
		Возврат ПустаяДата;
	КонецЕсли;

	// В интерфейсах дата приходит в разных форматах.
	Если Формат = ФорматДатыJSON.ISO Тогда
		Возврат ПрочитатьДатуJSON(ДатаВСтроке, Формат)
	ИначеЕсли Формат = "yyyyMMdd" Тогда
		Возврат Дата(ДатаВСтроке);
	ИначеЕсли Формат = "dd.MM.yyyy" Тогда	
		Возврат Дата(ДатаВСтроке+" 00:00:00");
	Иначе
		Возврат ПустаяДата;
	КонецЕсли; 
	
КонецФункции

Функция ПреобразоватьСтрокуТабЗначВСтруктуру(СтрокаТабЗнач, КолонкиТабЗнач)
	
	СписокСвойств = "";
	
	Для каждого Колонка Из КолонкиТабЗнач Цикл
		СписокСвойств = СписокСвойств + ?(СписокСвойств = "", "", ",") + Колонка.Имя;
	КонецЦикла;
	
	МассивСвойств = ОбщиеФункции.РазложитьСтрокуВМассив(СписокСвойств, ",");
	
	СтруктураСтроки = Новый Структура;
	
	Для каждого Свойство Из МассивСвойств Цикл
		СтруктураСтроки.Вставить(Свойство, СтрокаТабЗнач[Свойство]);
	КонецЦикла;
	
	СтруктураСтроки.Вставить("Партнер", Партнер);
	
	Возврат СтруктураСтроки;
	
КонецФункции

Функция СформироватьСтруктуруМетода(ОписаниеМетода)
	
	СтруктураМетода = Новый Структура;
	СоответствиеПараметров = Новый Соответствие;
	СоответствиеЗаголовков = Новый Соответствие;
	
	Для каждого Реквизит Из ОписаниеМетода.ДополнительныеРеквизиты Цикл
		
		Если Найти(ВРЕГ(Реквизит.ИмяРеквизита), "ПАРАМЕТР") > 0 Тогда
			
			СоответствиеПараметров.Вставить(Реквизит.ЗначениеСтрока, Реквизит.Значение);
			
			Продолжить;
			
		ИначеЕсли Найти(ВРЕГ(Реквизит.ИмяРеквизита), "ЗАГОЛОВОК") > 0 Тогда
			
			СоответствиеЗаголовков.Вставить(Реквизит.ЗначениеСтрока, Реквизит.Значение);
			
			Продолжить;
			
		КонецЕсли;
				
		СтруктураМетода.Вставить(Реквизит.ИмяРеквизита, ?(ЗначениеЗаполнено(Реквизит.Значение), Реквизит.Значение, Реквизит.ЗначениеСтрока));
		
	КонецЦикла;
	
	СтруктураМетода.Вставить("Параметры", СоответствиеПараметров);
	СтруктураМетода.Вставить("Заголовки", СоответствиеЗаголовков);
	
	Возврат СтруктураМетода;
	
КонецФункции

Функция СформироватьТекстИсключения(АдресРесурса, ОписаниеОшибки)
	
	ПолныйПутьКРесурсу = ОбщиеФункции._СтрШаблон_("https://%1%2", Соединение.Сервер, АдресРесурса);
	
	Возврат ОбщиеФункции._СтрШаблон_("Ошибка при выполнении запроса к ресурсу '%1':%2", ПолныйПутьКРесурсу, ОписаниеОшибки);
	
КонецФункции

Процедура СоздатьЗапросДляМетода(СтруктураМетода, Запрос, ДопПараметрыЗапроса = Неопределено)
	// Укажаем обязательные параметры
	ПараметрыЗапроса = ОбщиеФункции._СтрШаблон_("?requiredTimeStamp.greaterThan=%1", Формат(СвойстваПартнера.ДатаПоследнегоОбмена - 25200, "ДФ='yyyy-MM-dd HH:mm:ss'"));
	// Укажаем обязательные заголовки
	Заголовки = Новый Соответствие;
	СтруктураМетода.Заголовки.Вставить("Plant", СвойстваПартнера.КодДистрибьютора);
	СтруктураМетода.Заголовки.Вставить("Host", СвойстваПартнера.АдресСервиса);
	СтруктураМетода.Заголовки.Вставить("Authorization", СвойстваПартнера.Токен);
	
	Если СтруктураМетода.ТипМетода = "GET" Тогда
		
		Для каждого КлючИЗначение Из СтруктураМетода.Параметры Цикл
			ПараметрыЗапроса = ПараметрыЗапроса + ОбщиеФункции._СтрШаблон_("%1%2=%3",
				?(ПараметрыЗапроса = "?", "", "&"), КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		// Замена обязательных параметров
		Если ДопПараметрыЗапроса <> Неопределено 
			И ТипЗнч(ДопПараметрыЗапроса) = Тип("Структура") Тогда
			
			ПараметрыЗапроса = "?";
			
			Для каждого КлючИЗначение Из ДопПараметрыЗапроса Цикл
				ПараметрыЗапроса = ПараметрыЗапроса + ОбщиеФункции._СтрШаблон_("%1%2=%3",
					?(ПараметрыЗапроса = "?", "", "&"), КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
			
		КонецЕсли; 
			
	Иначе
		ПараметрыЗапроса = "";
	КонецЕсли; 

	Запрос = Новый HTTPЗапрос;
	Запрос.АдресРесурса = СтруктураМетода.АдресРесурса + ПараметрыЗапроса;
	Запрос.Заголовки = СтруктураМетода.Заголовки;
	
КонецПроцедуры
 
Функция ПолучитьДанныеИзОтвета(Ответ, АдресРесурса)
	
	Перем РезультатЗапроса;
	
	Если НЕ ЗначениеЗаполнено(Ответ.ПолучитьТелоКакСтроку()) Тогда
		Возврат Новый Структура;
	КонецЕсли; 
	
	Попытка
		
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		РезультатЗапроса = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		
	Исключение
		ВызватьИсключение ОбщиеФункции._СтрШаблон_("При обработке ответа по ресурсу '%1' произошла ошибка: %2",
			АдресРесурса, ОписаниеОшибки());
	КонецПопытки;
	
	Возврат РезультатЗапроса
	
КонецФункции
 
Процедура ПрочитатьСвойстваПартнера() Экспорт
	
	Если СвойстваПартнера <> Неопределено Тогда
		Возврат;
	КонецЕсли; 
	            
	///Антропов Е.П. от 14.10.2024 УЗ №000000452
	ТекФилиал = СтрПолучитьСтроку(СтрЗаменить(Партнер, "_", Символы.ПС),3);	
	Источник_Utrace = "1С_КМ_" + ТекФилиал;
	Приемник_Utrace = "Utrace_" + ТекФилиал;
	///Антропов Е.П. от 14.10.2024 УЗ №000000452
	
	СвойстваПартнера = РегистрыСведений.ДополнительныеРеквизиты_3PL.ПолучитьСвойстваОбъекта(Партнер);
	
	Если СвойстваПартнера.Количество() = 0 Тогда
		СвойстваПартнера = Неопределено;
	Иначе
		УчетСерийныхНомеровПоБаллонам = (СвойстваПартнера.Свойство("УчетСерийныхНомеровПоБаллонам") И СвойстваПартнера.УчетСерийныхНомеровПоБаллонам = Истина);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПрочитатьМетодыОбменаСПартнером()
	
	Если МетодыОбменаСПартнером <> Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	МетодыОбменаСПартнером = РегистрыСведений.ДополнительныеРеквизиты_3PL.ПолучитьМетодыОбмена(Партнер);
	
	Если МетодыОбменаСПартнером.Количество() = 0 Тогда
		МетодыОбменаСПартнером = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьСоединение()
	
	ПрочитатьСвойстваПартнера();
	
	ПрочитатьМетодыОбменаСПартнером();
	
	ПроверкаЗаполнения();
	
	ОбновитьТокенДоступа();
	
	Защита = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);

	Попытка
		Соединение = Новый HTTPСоединение(СвойстваПартнера.АдресСервиса,, СвойстваПартнера.Пользователь, СвойстваПартнера.Пароль,,60, Защита);
	Исключение
		ВызватьИсключение ОбщиеФункции._СтрШаблон_("Не удалось подключиться к сервису '%1' по причине: %2", СвойстваПартнера.АдресСервиса, ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция ДобавитьЛидирующиеНулиВКодТовара(Знач Код)
	// Почему-то у ПепсиКо одни интерфейсы работают с кодами без 0, а другие их требуют
	ДлинаКода = 18;
	
	ТекДлинаКода = СтрДлина(Код);
	
	Для Сч = 1 По ДлинаКода - ТекДлинаКода Цикл
		Код = "0" + Код;
	КонецЦикла;
	
	Возврат Код
	
КонецФункции

Функция УдалитьЛидирущиеНулиИзКодаТовара(Знач Код)
	
	Возврат Формат(Число(Код), "ЧГ=0");
	
КонецФункции

#КонецОбласти 

#Область ПЕЧАТНЫЕ_ФОРМЫ

Процедура ЗагрузитьПечатныеФормы(ТаблицаПечФорм)
	
	Защита = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows );
	
	Попытка
		СоединениеДляПолученияПечФорм = Новый HTTPСоединение(СвойстваПартнера.АдресСервиса,, , ,,600, Защита);
	Исключение
		ВызватьИсключение ОбщиеФункции._СтрШаблон_("Не удалось подключиться к сервису '%1' по причине: %2", СвойстваПартнера.АдресСервиса, ОписаниеОшибки());
	КонецПопытки;
	
	Запрос = Новый HTTPЗапрос;
	Запрос.Заголовки = Новый Соответствие;
	Запрос.Заголовки.Вставить("Authorization", СвойстваПартнера.Токен);
	
	ТекстОшибки = "";	
	Для каждого СтрТаб Из ТаблицаПечФорм Цикл
		
		ПечФорма = Новый Файл(СтрТаб.ПутьКФайлу);
		
		Если ПечФорма.Существует() Тогда
			Продолжить;
		КонецЕсли;
		
		//{[-]Боровик А.О, 2024-03-28 14:26:45. Временно убрал это условие
		//Если Найти(ВРЕГ(СтрТаб.Ссылка), ВРЕГ(СвойстваПартнера.АдресСервиса)) = 0 Тогда
		//	ВызватьИсключение ОбщиеФункции._СтрШаблон_("Не удалось найти адрес сервера печати (%1) в ссылке: %2", СвойстваПартнера.АдресСервиса, СтрТаб.Ссылка);
		//КонецЕсли;
		//}Боровик А.О, 2024-03-28 14:26:45
		
		КаталогПоставки = Новый Файл(ОбщиеФункции._СтрШаблон_("%1\%2", СвойстваПартнера.КаталогХраненияПечатныхФорм, СтрТаб.НомерПоставки));
		
		Если НЕ КаталогПоставки.Существует() Тогда
			СоздатьКаталог(КаталогПоставки.ПолноеИмя);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СтрТаб.НомерВходящегоДокумента) Тогда
			
			КаталогЗаказа = Новый Файл(ОбщиеФункции._СтрШаблон_("%1\%2\%3", СвойстваПартнера.КаталогХраненияПечатныхФорм, СтрТаб.НомерПоставки, СтрТаб.НомерВходящегоДокумента));
			
			Если НЕ КаталогЗаказа.Существует() Тогда
				СоздатьКаталог(КаталогЗаказа.ПолноеИмя);
			КонецЕсли; 
			
		КонецЕсли;  
		
		Попытка
			
			Запрос.АдресРесурса = СтрТаб.Ссылка + "?" +СвойстваПартнера.ТокенПечати;
			//{[+]Боровик А.О, 2024-03-28 14:31:26. Временно добавил условие
			Если Найти(ВРЕГ(Запрос.АдресРесурса), ВРЕГ("api-essa.mypepsico.com")) > 0 Тогда
				Запрос.АдресРесурса = СтрЗаменить(Запрос.АдресРесурса, ?(ТипЗнч(Защита) = Тип("ЗащищенноеСоединениеOpenSSL"), "https://", "http://") + "api-essa.mypepsico.com", "");
				СерверПечати = "api-essa.mypepsico.com";
			Иначе
				Запрос.АдресРесурса = СтрЗаменить(Запрос.АдресРесурса, ?(ТипЗнч(Защита) = Тип("ЗащищенноеСоединениеOpenSSL"), "https://", "http://") + СвойстваПартнера.АдресСервиса, "");
				СерверПечати = СвойстваПартнера.АдресСервиса;
			КонецЕсли;
			
			Если СоединениеДляПолученияПечФорм.Сервер <> СерверПечати Тогда
				СоединениеДляПолученияПечФорм = Новый HTTPСоединение(СерверПечати,, , ,,600, Защита);	
			КонецЕсли; 			
			//} Боровик А.О, 2024-03-28 14:31:26
			
			Ответ = СоединениеДляПолученияПечФорм.Получить(Запрос);
			
			Если Ответ.КодСостояния >= 200 И Ответ.КодСостояния < 300 Тогда
				
				ДвоичныеДанные = Ответ.ПолучитьТелоКакДвоичныеДанные();
				ДвоичныеДанные.Записать(СтрТаб.ПутьКФайлу);
				
			ИначеЕсли СтрТаб.Ссылка = "" Тогда 	
				
				ТекстОшибки = ТекстОшибки + СтрШаблон("Нет ссылки на печ. форму. Ожидаемый файл: %1
				|", СтрТаб.ПутьКФайлу);
				
			Иначе
				
				ТекстОшибки = ТекстОшибки + СтрШаблон("Не удалось загрузить печатную форму по адресу: %1
				|по причине: %2
				|Ожидаемый файл: %3
				|", Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку(), СтрТаб.ПутьКФайлу);
				//ВызватьИсключение ОбщиеФункции._СтрШаблон_("Не удалось загрузить печатные формы по адресу: %1
				//	|по причине: %2", Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
				
			КонецЕсли;
			
		Исключение
			ВызватьИсключение ОбщиеФункции._СтрШаблон_("Не удалось загрузить печатные формы по адресу: %1
				|по причине: %2", Запрос.АдресРесурса, ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДобавитьСтрокиВТаблицуПечФорм(ТаблицаПечФорм, Данные)
	
	КоличествоЭлементов = Данные.Количество();
	
	КаталогХранения = СвойстваПартнера.КаталогХраненияПечатныхФорм;
	
	Для Сч = 0 По КоличествоЭлементов-1 цикл
		
		Элемент = Данные.Получить(Сч);
		
		НомерПоставки = Элемент.shipmentNumber;
		
		НомерВходящегоДокумента = ?(Элемент.deliveryNumber = "none", "", Элемент.deliveryNumber);
		
		Состав = Элемент.printDetails;
		
		Для каждого ДетальнаяЗапись Из Состав Цикл
			
			НовСтр = ТаблицаПечФорм.Добавить();
			НовСтр.НомерПоставки 			= НомерПоставки;
			НовСтр.НомерВходящегоДокумента 	= НомерВходящегоДокумента;
			НовСтр.Ссылка 					= СтрЗаменить(ДетальнаяЗапись.fileDownloadUri, "https://"+СвойстваПартнера.АдресСервисаПечати, "");
			НовСтр.ПутьКФайлу 				= ОбщиеФункции._СтрШаблон_("%1\%2\%3\%4_%5(%6).pdf", КаталогХранения, НомерПоставки, НомерВходящегоДокумента, 
				ДетальнаяЗапись.printOrder, ДетальнаяЗапись.fileName, ДетальнаяЗапись.numOfCopies);
			НовСтр.Токен 					= СвойстваПартнера.ТокенПечати;
			
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры
 
Функция СформироватьТаблицуПечФорм()
	
	ТабЗнач = Новый ТаблицаЗначений;
	ТабЗнач.Колонки.Добавить("НомерПоставки", 			Новый ОписаниеТипов("Строка"));
	ТабЗнач.Колонки.Добавить("НомерВходящегоДокумента", Новый ОписаниеТипов("Строка"));
	ТабЗнач.Колонки.Добавить("Ссылка", 					Новый ОписаниеТипов("Строка"));
	ТабЗнач.Колонки.Добавить("ПутьКФайлу", 				Новый ОписаниеТипов("Строка"));
	ТабЗнач.Колонки.Добавить("Токен", 					Новый ОписаниеТипов("Строка"));
	
	Возврат ТабЗнач;
	
КонецФункции
 
Функция ПолучитьЗаявкиНаЗагрузкуПечатныхФорм()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Объект,
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Текст КАК НомерПоставки
	|ИЗ
	|	РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций
	|ГДЕ
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Источник = &Приемник
	|	И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Приемник = ""1С""
	|	И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Статус = &Статус
	|   И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Идентификатор = ""prints""";
	
	Запрос.УстановитьПараметр("Приемник", Строка(Партнер));
	Запрос.УстановитьПараметр("Статус", Справочники.СтатусыЗаявок.Новая); 
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЗаявкаНаПолучениеПечатныхФормСуществует(НомерПоставки) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Объект
		|ИЗ
		|	РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций
		|ГДЕ
		|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Источник = &Источник
		|	И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Идентификатор = &Идентификатор
		|	И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Статус = &Статус
		|	И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Текст ПОДОБНО &НомерПоставки";
	
	Запрос.УстановитьПараметр("Идентификатор", "prints");
	Запрос.УстановитьПараметр("Источник", Строка(Партнер));
	Запрос.УстановитьПараметр("НомерПоставки", НомерПоставки);
	Запрос.УстановитьПараметр("Статус", Справочники.СтатусыЗаявок.Новая);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи.Следующий();
	
КонецФункции

Процедура СоздатьЗаявкуНаПолучениеПечатныхФорм(Объект, НомерПоставки)
	
	Если ЗаявкаНаПолучениеПечатныхФормСуществует(НомерПоставки) Тогда
		Возврат;	
	КонецЕсли; 
	
	РегистраторЗаписи = Документы.РегистраторЗаписи.СоздатьНовыйДокумент("" + Объект);
	
	_3PLСервер.ДобавитьЗаписьПоДокументуВЖурналОпераций(РегистраторЗаписи, Строка(Партнер), "1С",
		Справочники.СтатусыЗаявок.Новая, "prints", ТекущаяДатаСеанса(),, НомерПоставки);
	
КонецПроцедуры

#КонецОбласти 

#Область МАРШРУТЫ

Функция ПолучитьДанныеПоМаршрутуДляЗаполнения(ДокументСсылка)
	
	МассивКодовСобственныхАрендодателей = ОбщиеФункции.РазложитьСтрокуВМассив(СвойстваПартнера.СобственныеАрендодатели, ";");
	
	Список_СобственныеАрендодатели = Новый СписокЗначений;
	
	Для каждого Элемент Из МассивКодовСобственныхАрендодателей Цикл
		Список_СобственныеАрендодатели.Добавить(Справочники.Контрагенты.НайтиПоКоду(Элемент));
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокМаршрут.Ссылка КАК МаршрутЭкспедитора,
	|	МАКСИМУМ(ВЫБОР
	|  		КОГДА МаршрутДокументыОснования.Контрагент = &ШкуренкоТД
	|  			ТОГДА ""I"" 
	|		КОГДА ДокМаршрут.Транспорт.Арендодатель В (&СобственныеАрендодатели)
	|			ТОГДА ""I""
	|		ИНАЧЕ ""E""
	|	КОНЕЦ) КАК ВидАрендныхОтношений,
	|	""3PLOCH"" КАК ТехническоеИмяМаршрута,
	|	ЕСТЬNULL(СвойстваТранспорта.Значение, """") КАК КодТранспортногоСредства,
	|	СпрТранспорт.Госномер КАК НаименованиеТранспорта,
	|	ЕСТЬNULL(СвойстваФизЛица.Значение, """") КАК КодСотрудникаСАП,
	|	ДокМаршрут.Экспедитор КАК ИмяСотрудника,
	|	ДокМаршрут.ДлинаМаршрута КАК ДлинаМаршрута,
	|	"""" КАК КодКассира,
	|	ДокМаршрут.НачалоМаршрута КАК ВремяНачалоМаршрута,
	|	ДокМаршрут.ОкончаниеМаршрута КАК ВремяОкончанияМаршрута,
	|	КОЛИЧЕСТВО(МаршрутДокументыОснования.ДокументОснование) КАК КоличествоДокументовМаршрута,
	|	МаршрутДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА МаршрутДокументыОснования.НомерТочкиРазгрузки > 0
	|			ТОГДА МаршрутДокументыОснования.НомерТочкиРазгрузки - 1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК НомерТочкиРазгрузки,
	|	""SIT"" КАК ТипОстановки,
	|	ЕСТЬNULL(СвойстваТорговыхТочек.Значение, """") КАК КодГрузополучателя,
	|	ЕСТЬNULL(СвойстваЗаявокПоклажедателя.Значение, """") КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.МаршрутЭкспедитора КАК ДокМаршрут
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутЭкспедитора.ДокументыОснования КАК МаршрутДокументыОснования
	|		ПО ДокМаршрут.Ссылка = МаршрутДокументыОснования.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТранспортДоставки КАК СпрТранспорт
	|		ПО ДокМаршрут.Транспорт = СпрТранспорт.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурнаяЗаявок
	|		ПО (МаршрутДокументыОснования.ДокументОснование = ЖурнаяЗаявок.Объект)
	|			И (ЖурнаяЗаявок.Источник = &Партнер)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваТранспорта
	|		ПО (СпрТранспорт.Ссылка = СвойстваТранспорта.Объект)
	|			И (СвойстваТранспорта.Свойство = &КодТранспортаСАП)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваФизЛица
	|		ПО ДокМаршрут.Экспедитор = СвойстваФизЛица.Объект
	|			И (СвойстваФизЛица.Свойство = &КодСотрудникаСАП)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваТорговыхТочек
	|		ПО (МаршрутДокументыОснования.ПунктРазгрузки = СвойстваТорговыхТочек.Объект
	|				ИЛИ МаршрутДокументыОснования.ПунктПогрузки = СвойстваТорговыхТочек.Объект)
	|			И (СвойстваТорговыхТочек.Свойство = &КодТорговойТочки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваЗаявокПоклажедателя
	|		ПО (МаршрутДокументыОснования.ДокументОснование = СвойстваЗаявокПоклажедателя.Объект)
	|			И (СвойстваЗаявокПоклажедателя.Свойство = &НомерВходящегоДокумента)
	|ГДЕ
	|	ДокМаршрут.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокМаршрут.Ссылка,
	|	СпрТранспорт.Госномер,
	|	ДокМаршрут.Экспедитор,
	|	ДокМаршрут.ДлинаМаршрута,
	|	ДокМаршрут.НачалоМаршрута,
	|	ДокМаршрут.ОкончаниеМаршрута,
	|	МаршрутДокументыОснования.ДокументОснование,
	|	МаршрутДокументыОснования.НомерТочкиРазгрузки,
	|	ЕСТЬNULL(СвойстваЗаявокПоклажедателя.Значение, """"),
	|	ЕСТЬNULL(СвойстваТранспорта.Значение, """"),
	|	ЕСТЬNULL(СвойстваФизЛица.Значение, """"),
	|	ЕСТЬNULL(СвойстваТорговыхТочек.Значение, """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	МаршрутЭкспедитора,
	|	МаршрутДокументыОснования.НомерТочкиРазгрузки
	|ИТОГИ
	|	МАКСИМУМ(ВидАрендныхОтношений),
	|	МАКСИМУМ(ТехническоеИмяМаршрута),
	|	МАКСИМУМ(КодТранспортногоСредства),
	|	МАКСИМУМ(НаименованиеТранспорта),
	|	МАКСИМУМ(КодСотрудникаСАП),
	|	МАКСИМУМ(ИмяСотрудника),
	|	МАКСИМУМ(ДлинаМаршрута),
	|	МАКСИМУМ(КодКассира),
	|	МАКСИМУМ(ВремяНачалоМаршрута),
	|	МАКСИМУМ(ВремяОкончанияМаршрута),
	|	СУММА(КоличествоДокументовМаршрута),
	|	МАКСИМУМ(ДокументОснование),
	|	МАКСИМУМ(ТипОстановки),
	|	МАКСИМУМ(КодГрузополучателя)
	|ПО
	|	МаршрутЭкспедитора,
	|	НомерТочкиРазгрузки";
	
	Запрос.УстановитьПараметр("КодСотрудникаСАП", 			СвойстваПартнера.Свойство_КодСотрудникаСАП);
	Запрос.УстановитьПараметр("КодТорговойТочки", 			СвойстваПартнера.Свойство_КодГрузополучателя);
	Запрос.УстановитьПараметр("КодТранспортаСАП", 			СвойстваПартнера.Свойство_КодТранспортаСАП);
	Запрос.УстановитьПараметр("НомерВходящегоДокумента", 	СвойстваПартнера.Свойство_НомерВходящегоДокумента);
	Запрос.УстановитьПараметр("СобственныеАрендодатели", 	Список_СобственныеАрендодатели);
	Запрос.УстановитьПараметр("Ссылка", 					ДокументСсылка);
	Запрос.УстановитьПараметр("Партнер", 					Строка(Партнер));
	Запрос.УстановитьПараметр("ШкуренкоТД",                 СвойстваПартнера.КонтрагентНаВыкуп);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаМаршрутЭкспедитора = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ВыборкаМаршрутЭкспедитора;
		
КонецФункции

Функция СформироватьТелоЗапросаДляОтправкиМаршрута(ДокументСсылка)
	
	 ТелоЗапроса = "";
	 
	 ВыборкаПоМаршруту = ПолучитьДанныеПоМаршрутуДляЗаполнения(ДокументСсылка);
	 ВыборкаПоМаршруту.Следующий();
	 
	 МассивОшибок = Новый Массив;
	 
	 Если НЕ ЗначениеЗаполнено(ВыборкаПоМаршруту.КодТранспортногоСредства) Тогда
	 	 МассивОшибок.Добавить(ОбщиеФункции._СтрШаблон_("У транспорта '%1' не заполнен код транс. средства SAP", ВыборкаПоМаршруту.НаименованиеТранспорта));
	 КонецЕсли;
	 
	 Если НЕ ЗначениеЗаполнено(ВыборкаПоМаршруту.КодСотрудникаСАП) Тогда
	 	 МассивОшибок.Добавить(ОбщиеФункции._СтрШаблон_("У сотрудника '%1' не заполнен код сотрудника SAP", ВыборкаПоМаршруту.ИмяСотрудника));
	 КонецЕсли; 
	 
	 ВремяНачалаМаршрута =		ДокументСсылка.ДатаЭкспедиции + (ВыборкаПоМаршруту.ВремяНачалоМаршрута - Дата(1,1,1));
	 Если НЕ ЗначениеЗаполнено(ВыборкаПоМаршруту.ВремяНачалоМаршрута) Тогда
		 ВремяНачалаМаршрута = ДокументСсылка.ДатаЭкспедиции + (СвойстваПартнера.ВремяНачалаМаршрута - Дата(1,1,1));
	 КонецЕсли; 
	
	 ВремяОкончанияМаршрута = 	ДокументСсылка.ДатаЭкспедиции + (ВыборкаПоМаршруту.ВремяОкончанияМаршрута - Дата(1,1,1));
	 Если НЕ ЗначениеЗаполнено(ВыборкаПоМаршруту.ВремяОкончанияМаршрута) Тогда
		 ВремяОкончанияМаршрута = ДокументСсылка.ДатаЭкспедиции + (СвойстваПартнера.ВремяОкончанияМаршрута - Дата(1,1,1));
	 КонецЕсли;
	 
	 Запись = Новый ЗаписьJSON;
	 Запись.УстановитьСтроку();
	 Запись.ЗаписатьНачалоОбъекта();
	 
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "locationID", 	СвойстваПартнера.ТехническоеИмяМестаОтгрузки);
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "plantNumber", 	СвойстваПартнера.КодДистрибьютора);
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "interfaceName", "DeliveryRouting");
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "shipmentType", 	ВыборкаПоМаршруту.ВидАрендныхОтношений);
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "routeCode", 	ВыборкаПоМаршруту.ТехническоеИмяМаршрута);
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "equipmentID", 	ВыборкаПоМаршруту.КодТранспортногоСредства);
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "equipmentName", СтрЗаменить(ВыборкаПоМаршруту.НаименованиеТранспорта, " ", ""));
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "employeeID", 	ВыборкаПоМаршруту.КодСотрудникаСАП);
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "employeeName", 	ВыборкаПоМаршруту.ИмяСотрудника);
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "employee2ID", 	ВыборкаПоМаршруту.КодКассира);
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "distance", 		ВыборкаПоМаршруту.ДлинаМаршрута);
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "startTime", 	ЗаписатьДатуJSON(ВремяНачалаМаршрута, ФорматДатыJSON.ISO));
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "endTime", 		ЗаписатьДатуJSON(ВремяОкончанияМаршрута, ФорматДатыJSON.ISO));
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "exti2", 		ОбщиеФункции._СтрШаблон_("%1_%2", ДокументСсылка.Номер, Формат(ДокументСсылка.Дата, "ДФ=yyyyMMdd")));
		 
		 ВыборкаПоНомерамРазгрузки = ВыборкаПоМаршруту.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		 
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "stops");
		 СреднееВремяПосещения = СвойстваПартнера.СреднееВремяПосещения;
		 Если ЗначениеЗаполнено(ВремяНачалаМаршрута) И ЗначениеЗаполнено(ВремяОкончанияМаршрута) Тогда
		 	 СреднееВремяПосещения = (ВремяОкончанияМаршрута - ВремяНачалаМаршрута - СреднееВремяПосещения) / ВыборкаПоМаршруту.КоличествоДокументовМаршрута;
		 КонецЕсли;
		 
		 ДатаПосещения = ВремяНачалаМаршрута + СреднееВремяПосещения;
		 Запись.ЗаписатьНачалоМассива();
		 Пока ВыборкаПоНомерамРазгрузки.Следующий() Цикл
			 
			     Запись.ЗаписатьНачалоОбъекта();
				 
				 	ЗаписатьСвойствоИЗначениеJSON(Запись, "stopIx", 		ВыборкаПоНомерамРазгрузки.НомерТочкиРазгрузки);
					ЗаписатьСвойствоИЗначениеJSON(Запись, "arrivalTime", 	ЗаписатьДатуJSON(ДатаПосещения, ФорматДатыJSON.ISO));
					ЗаписатьСвойствоИЗначениеJSON(Запись, "departureTime", 	ЗаписатьДатуJSON(ДатаПосещения, ФорматДатыJSON.ISO));
					ЗаписатьСвойствоИЗначениеJSON(Запись, "locationType", 	ВыборкаПоНомерамРазгрузки.ТипОстановки);
					ЗаписатьСвойствоИЗначениеJSON(Запись, "locationID", 	ВыборкаПоНомерамРазгрузки.КодГрузополучателя);
					
					ЗаписатьСвойствоИЗначениеJSON(Запись, "orders");
					
					ВыборкаПоДокументам = ВыборкаПоНомерамРазгрузки.Выбрать();
					
					Запись.ЗаписатьНачалоМассива();
					Пока ВыборкаПоДокументам.Следующий() Цикл
						
						Запись.ЗаписатьНачалоОбъекта();
							ЗаписатьСвойствоИЗначениеJSON(Запись, "orderNumber", ВыборкаПоДокументам.НомерВходящегоДокумента);
						Запись.ЗаписатьКонецОбъекта();
						
					КонецЦикла; 
					Запись.ЗаписатьКонецМассива();
				 
				 Запись.ЗаписатьКонецОбъекта();
				 
			     ДатаПосещения = ДатаПосещения + СреднееВремяПосещения;
				 
				 Если ВыборкаПоНомерамРазгрузки.НомерТочкиРазгрузки = 0 Тогда
				 	  МассивОшибок.Добавить("Нумерация пунктов разгрузок должна начинаться с 2");
				 КонецЕсли; 
				 
		 КонецЦикла; 
		 Запись.ЗаписатьКонецМассива();
	Запись.ЗаписатьКонецОбъекта();
		 
	ТелоЗапроса = Запись.Закрыть();
	
	Если ЗначениеЗаполнено(МассивОшибок) Тогда
		
		ТелоЗапроса = "";
		
		Сообщить(ОбщиеФункции._СтрШаблон_("Маршрут '%1' не будет отправлен по причине:", ДокументСсылка), СтатусСообщения.ОченьВажное);
		
		Для каждого Элемент Из МассивОшибок Цикл
			Сообщить(Элемент, СтатусСообщения.Внимание);
		КонецЦикла;
		
	КонецЕсли;
		 
	Возврат ТелоЗапроса;
	
КонецФункции

Процедура ВыгрузитьМаршрутыВФайл() экспорт
	
	ТаблицаДокументов = ПолучитьМаршрутыЭкспедиторовДляВыгрузкиВФайл();
	
	ТабДокумент = СформироватьВыгрузкуМаршрутов(ТаблицаДокументов);
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ПутьКФайлуВыгрузкиМаршрутов = "";
	#Если Клиент Тогда
		ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Если ДиалогВыбора.Выбрать() Тогда
			ПутьКФайлуВыгрузкиМаршрутов = ДиалогВыбора.ПолноеИмяФайла + ".xlsx";
		КонецЕсли;
	#КонецЕсли 
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлуВыгрузкиМаршрутов) Тогда
		ПутьКФайлуВыгрузкиМаршрутов = КаталогВременныхФайлов() + "ТранспортировкиSAP.xlsx";
	КонецЕсли; 
	
	ТабДокумент.Записать(ПутьКФайлуВыгрузкиМаршрутов, ТипФайлаТабличногоДокумента.XLSX);
	
	Сообщить("Создан файл: "+ПутьКФайлуВыгрузкиМаршрутов, СтатусСообщения.Информация);
	
КонецПроцедуры

Функция ПолучитьДанныеПоМаршрутуДляВыгрузкиВФайл(ДокументСсылка)
	
	МассивКодовСобственныхАрендодателей = ОбщиеФункции.РазложитьСтрокуВМассив(СвойстваПартнера.СобственныеАрендодатели, ";");
	
	Список_СобственныеАрендодатели = Новый СписокЗначений;
	
	Для каждого Элемент Из МассивКодовСобственныхАрендодателей Цикл
		Список_СобственныеАрендодатели.Добавить(Справочники.Контрагенты.НайтиПоКоду(Элемент));
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокМаршрут.Ссылка КАК МаршрутЭкспедитора,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МаршрутДокументыОснования.Контрагент = &ШкуренкоТД
	|				ТОГДА ""I""
	|			КОГДА ДокМаршрут.Транспорт.Арендодатель В (&СобственныеАрендодатели)
	|				ТОГДА ""I""
	|			ИНАЧЕ ""E""
	|		КОНЕЦ) КАК ВидАрендныхОтношений,
	|	""3PLOCH"" КАК ТехническоеИмяМаршрута,
	|	ЕСТЬNULL(СвойстваТранспорта.Значение, """") КАК КодТранспортногоСредства,
	|	СпрТранспорт.Госномер КАК НаименованиеТранспорта,
	|	ЕСТЬNULL(СвойстваФизЛица.Значение, """") КАК КодСотрудникаСАП,
	|	ДокМаршрут.Экспедитор КАК ИмяСотрудника,
	|	ДокМаршрут.ДлинаМаршрута КАК ДлинаМаршрута,
	|	"""" КАК КодКассира,
	|	ДокМаршрут.НачалоМаршрута КАК ВремяНачалоМаршрута,
	|	ДокМаршрут.ОкончаниеМаршрута КАК ВремяОкончанияМаршрута,
	|	КОЛИЧЕСТВО(МаршрутДокументыОснования.ДокументОснование) КАК КоличествоДокументовМаршрута,
	|	МаршрутДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА МаршрутДокументыОснования.НомерТочкиРазгрузки > 0
	|			ТОГДА МаршрутДокументыОснования.НомерТочкиРазгрузки - 1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК НомерТочкиРазгрузки,
	|	""SIT"" КАК ТипОстановки,
	|	ЕСТЬNULL(СвойстваТорговыхТочек.Значение, """") КАК КодГрузополучателя,
	|	ЕСТЬNULL(СвойстваЗаявокПоклажедателя.Значение, """") КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.МаршрутЭкспедитора КАК ДокМаршрут
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутЭкспедитора.ДокументыОснования КАК МаршрутДокументыОснования
	|		ПО ДокМаршрут.Ссылка = МаршрутДокументыОснования.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТранспортДоставки КАК СпрТранспорт
	|		ПО ДокМаршрут.Транспорт = СпрТранспорт.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурнаяЗаявок
	|		ПО (МаршрутДокументыОснования.ДокументОснование = ЖурнаяЗаявок.Объект)
	|			И (ЖурнаяЗаявок.Источник = &Партнер)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваТранспорта
	|		ПО (СпрТранспорт.Ссылка = СвойстваТранспорта.Объект)
	|			И (СвойстваТранспорта.Свойство = &КодТранспортаСАП)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваФизЛица
	|		ПО ДокМаршрут.Экспедитор = СвойстваФизЛица.Объект
	|			И (СвойстваФизЛица.Свойство = &КодСотрудникаСАП)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваТорговыхТочек
	|		ПО (МаршрутДокументыОснования.ПунктРазгрузки = СвойстваТорговыхТочек.Объект
	|				ИЛИ МаршрутДокументыОснования.ПунктПогрузки = СвойстваТорговыхТочек.Объект)
	|			И (СвойстваТорговыхТочек.Свойство = &КодТорговойТочки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваЗаявокПоклажедателя
	|		ПО (МаршрутДокументыОснования.ДокументОснование = СвойстваЗаявокПоклажедателя.Объект)
	|			И (СвойстваЗаявокПоклажедателя.Свойство = &НомерВходящегоДокумента)
	|ГДЕ
	|	ДокМаршрут.Ссылка = &Ссылка
	|   //И МаршрутДокументыОснования.Контрагент <> &ШкуренкоТД
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокМаршрут.Ссылка,
	|	СпрТранспорт.Госномер,
	|	ДокМаршрут.Экспедитор,
	|	ДокМаршрут.ДлинаМаршрута,
	|	ДокМаршрут.НачалоМаршрута,
	|	ДокМаршрут.ОкончаниеМаршрута,
	|	МаршрутДокументыОснования.ДокументОснование,
	|	МаршрутДокументыОснования.НомерТочкиРазгрузки,
	|	ЕСТЬNULL(СвойстваЗаявокПоклажедателя.Значение, """"),
	|	ЕСТЬNULL(СвойстваТранспорта.Значение, """"),
	|	ЕСТЬNULL(СвойстваФизЛица.Значение, """"),
	|	ЕСТЬNULL(СвойстваТорговыхТочек.Значение, """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	МаршрутЭкспедитора,
	|	МаршрутДокументыОснования.НомерТочкиРазгрузки
	|ИТОГИ
	|	МАКСИМУМ(ВидАрендныхОтношений),
	|	МАКСИМУМ(ТехническоеИмяМаршрута),
	|	МАКСИМУМ(КодТранспортногоСредства),
	|	МАКСИМУМ(НаименованиеТранспорта),
	|	МАКСИМУМ(КодСотрудникаСАП),
	|	МАКСИМУМ(ИмяСотрудника),
	|	МАКСИМУМ(ДлинаМаршрута),
	|	МАКСИМУМ(КодКассира),
	|	МАКСИМУМ(ВремяНачалоМаршрута),
	|	МАКСИМУМ(ВремяОкончанияМаршрута),
	|	СУММА(КоличествоДокументовМаршрута),
	|	МАКСИМУМ(ДокументОснование),
	|	МАКСИМУМ(ТипОстановки),
	|	МАКСИМУМ(КодГрузополучателя)
	|ПО
	|	МаршрутЭкспедитора";
	
	Запрос.УстановитьПараметр("КодСотрудникаСАП", 			СвойстваПартнера.Свойство_КодСотрудникаСАП);
	Запрос.УстановитьПараметр("КодТорговойТочки", 			СвойстваПартнера.Свойство_КодГрузополучателя);
	Запрос.УстановитьПараметр("КодТранспортаСАП", 			СвойстваПартнера.Свойство_КодТранспортаСАП);
	Запрос.УстановитьПараметр("НомерВходящегоДокумента", 	СвойстваПартнера.Свойство_НомерВходящегоДокумента);
	Запрос.УстановитьПараметр("СобственныеАрендодатели", 	Список_СобственныеАрендодатели);
	Запрос.УстановитьПараметр("Ссылка", 					ДокументСсылка);
	Запрос.УстановитьПараметр("Партнер", 					Строка(Партнер));
	Запрос.УстановитьПараметр("ШкуренкоТД",                 СвойстваПартнера.КонтрагентНаВыкуп);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаМаршрутЭкспедитора = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ВыборкаМаршрутЭкспедитора;
		
КонецФункции

Функция ПолучитьМаршрутыЭкспедиторовДляВыгрузкиВФайл()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Маршрут.Ссылка КАК МаршрутЭкспедитора
	|ИЗ
	|	Документ.МаршрутЭкспедитора.ДокументыОснования КАК Маршрут
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Док.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ОтгрузкаТоваровУслуг КАК Док
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровУслуг.Товары КАК Состав
	|				ПО Док.Ссылка = Состав.Ссылка
	|		ГДЕ
	|			Док.Дата МЕЖДУ &НачДата И &КонДата
	|			И Док.Проведен
	|			И Состав.ДоговорВладельца = &ДоговорВладельца
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Док.Ссылка
	|		ИЗ
	|			Документ.ВозвратТоваровОтПокупателя КАК Док
	|		ГДЕ
	|			Док.Дата МЕЖДУ &НачДата И &КонДата
	|			И Док.Проведен
	|			И Док.ДоговорВладельца = &ДоговорВладельца) КАК ДокументыОтгрузкиСОХ
	|		ПО Маршрут.ДокументОснование = ДокументыОтгрузкиСОХ.Ссылка
	|ГДЕ
	|	Маршрут.Ссылка.ГотовКОтправкеВТранзит";
	
	Запрос.УстановитьПараметр("НачДата", НачалоПериода); 
	Запрос.УстановитьПараметр("КонДата", КонецДня(КонецПериода)); 
	Запрос.УстановитьПараметр("ДоговорВладельца", СвойстваПартнера.ОсновнойДоговорПриемаНаХранение); 
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СформироватьВыгрузкуМаршрутов(ТаблицаДокументов)
	
	Если НЕ ЗначениеЗаполнено(ТаблицаДокументов) Тогда
		Сообщить("Не найдены маршруты для выгрузки", СтатусСообщения.Внимание);
		Возврат Неопределено;
	КонецЕсли; 
	
	МакетВыгрузки = ПолучитьМакет("ВыгрузкаМаршрутовВСап");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	ОбластьШапки = МакетВыгрузки.ПолучитьОбласть("Шапка");
	
	ТабДокумент.Вывести(ОбластьШапки);
	
	ОбластьСтроки = МакетВыгрузки.ПолучитьОбласть("СтрокаДанных");
	
	Сч = 1;
	
	Для каждого СтрТаб Из ТаблицаДокументов Цикл
		
		ДокументСсылка = СтрТаб.МаршрутЭкспедитора;
		
		ВыборкаПоМаршруту = ПолучитьДанныеПоМаршрутуДляВыгрузкиВФайл(ДокументСсылка);
		
		ВыборкаПоМаршруту.Следующий();
		
		МассивОшибок = Новый Массив;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоМаршруту.КодТранспортногоСредства) Тогда
			МассивОшибок.Добавить(ОбщиеФункции._СтрШаблон_("У транспорта '%1' не заполнен код транс. средства SAP", ДокументСсылка.Транспорт));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоМаршруту.НаименованиеТранспорта) Тогда
			МассивОшибок.Добавить(ОбщиеФункции._СтрШаблон_("У транспорта '%1' не заполнен гос. номер", ДокументСсылка.Транспорт));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоМаршруту.КодСотрудникаСАП) Тогда
			МассивОшибок.Добавить(ОбщиеФункции._СтрШаблон_("У сотрудника '%1' не заполнен код сотрудника SAP", ВыборкаПоМаршруту.ИмяСотрудника));
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(МассивОшибок) Тогда
			
			Сообщить(ОбщиеФункции._СтрШаблон_("Маршрут '%1' не будет отправлен по причине:", ДокументСсылка), СтатусСообщения.ОченьВажное);
			
			Для каждого Элемент Из МассивОшибок Цикл
				Сообщить(Элемент, СтатусСообщения.Внимание);
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;	
		
		ВремяНачалаМаршрута =		ДокументСсылка.ДатаЭкспедиции + (ВыборкаПоМаршруту.ВремяНачалоМаршрута - Дата(1,1,1));
		Если НЕ ЗначениеЗаполнено(ВыборкаПоМаршруту.ВремяНачалоМаршрута) Тогда
			ВремяНачалаМаршрута = ДокументСсылка.ДатаЭкспедиции + (СвойстваПартнера.ВремяНачалаМаршрута - Дата(1,1,1));
		КонецЕсли; 
		
		ВремяОкончанияМаршрута = 	ДокументСсылка.ДатаЭкспедиции + (ВыборкаПоМаршруту.ВремяОкончанияМаршрута - Дата(1,1,1));
		Если НЕ ЗначениеЗаполнено(ВыборкаПоМаршруту.ВремяОкончанияМаршрута) Тогда
			ВремяОкончанияМаршрута = ДокументСсылка.ДатаЭкспедиции + (СвойстваПартнера.ВремяОкончанияМаршрута - Дата(1,1,1));
		КонецЕсли;
		
		ИдМаршрута = Формат(Сч, "ЧЦ=4; ЧВН=; ЧГ=0");
		
		ОбластьСтроки.Параметры.ИдМаршрута = ИдМаршрута;
		ОбластьСтроки.Параметры.ПунктПогрузки = СвойстваПартнера.ТехническоеИмяМестаОтгрузки;
		ОбластьСтроки.Параметры.ВидТранспортировки = ВыборкаПоМаршруту.ВидАрендныхОтношений;
		ОбластьСтроки.Параметры.Водитель = ВыборкаПоМаршруту.КодСотрудникаСАП;
		ОбластьСтроки.Параметры.Транспорт = ВыборкаПоМаршруту.КодТранспортногоСредства;
		ОбластьСтроки.Параметры.Киллометраж = ВыборкаПоМаршруту.ДлинаМаршрута;
		ОбластьСтроки.Параметры.ДатаТранспортировки = Формат(ДокументСсылка.ДатаЭкспедиции, "ДЛФ=D");
		ОбластьСтроки.Параметры.ВремяНачалаТранспортировки = Формат(ВремяНачалаМаршрута, "ДФ=HH:MM");
		ОбластьСтроки.Параметры.ОкончаниеТранспортировки = Формат(ДокументСсылка.ДатаЭкспедиции, "ДЛФ=D");
		ОбластьСтроки.Параметры.ВремяОкончанияТранспортировки = Формат(ВремяОкончанияМаршрута, "ДФ=HH:MM");
			
		ВыборкаПоставок = ВыборкаПоМаршруту.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ОтобразитьГосНомерВПервойСтрокеМаршрута = Истина;
		
		Пока ВыборкаПоставок.Следующий() Цикл
			ОбластьСтроки.Параметры.НомерПоставки = ВыборкаПоставок.НомерВходящегоДокумента;
			ОбластьСтроки.Параметры.ПунктОтгрузки = ВыборкаПоставок.КодГрузополучателя;
			ОбластьСтроки.Параметры.ДатаТранспортировкиПоставки = ОбластьСтроки.Параметры.ДатаТранспортировки;
			ОбластьСтроки.Параметры.ВремяТранспортировкиПоставки = ОбластьСтроки.Параметры.ВремяНачалаТранспортировки;
			ОбластьСтроки.Параметры.ОкончаниеТранспортировкиПоставки = ОбластьСтроки.Параметры.ДатаТранспортировки;
			ОбластьСтроки.Параметры.ВремяОкончанияТранспортировкиПоставки = ОбластьСтроки.Параметры.ВремяОкончанияТранспортировки;
			Если ОтобразитьГосНомерВПервойСтрокеМаршрута Тогда
				ОбластьСтроки.Параметры.ГосНомер = ВыборкаПоМаршруту.НаименованиеТранспорта;
				ОтобразитьГосНомерВПервойСтрокеМаршрута = Ложь;
			Иначе
				ОбластьСтроки.Параметры.ГосНомер = "";	
			КонецЕсли; 
			ТабДокумент.Вывести(ОбластьСтроки);
		КонецЦикла;
		
		Сч = Сч + 1;
				
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция СформироватьТаблицуДляЗагрузкиДанныхПоДокументам()
	
	ТабЗнач = Новый ТаблицаЗначений;
	ТабЗнач.Колонки.Добавить("НомерВходящегоДокумента", 		Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТабЗнач.Колонки.Добавить("ДатаВходящегоДокумента", 			Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТабЗнач.Колонки.Добавить("ДатаПоступления", 				Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТабЗнач.Колонки.Добавить("ТипДокумента", 					Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(1)));
	ТабЗнач.Колонки.Добавить("ВидОперации", 					Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(10)));
	ТабЗнач.Колонки.Добавить("Организация", 					Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТабЗнач.Колонки.Добавить("Склад", 							Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТабЗнач.Колонки.Добавить("Контрагент", 						Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТабЗнач.Колонки.Добавить("СтруктурнаяЕдиницаКонтрагента", 	Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницыКонтрагентов"));
	ТабЗнач.Колонки.Добавить("ДоговорКонтрагента", 				Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТабЗнач.Колонки.Добавить("Подразделение", 					Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	ТабЗнач.Колонки.Добавить("ТипЦен", 							Новый ОписаниеТипов("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов, СправочникСсылка.ТипыЦенНоменклатуры"));
	ТабЗнач.Колонки.Добавить("Автор", 							Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТабЗнач.Колонки.Добавить("Ответственный", 					Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТабЗнач.Колонки.Добавить("ВидПоставки", 					Новый ОписаниеТипов("СправочникСсылка.ВидыПоставки"));
	ТабЗнач.Колонки.Добавить("СрокКредитования", 				Новый ОписаниеТипов("СправочникСсылка.СрокиКредитования"));
	ТабЗнач.Колонки.Добавить("СпособРасчетов", 					Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРасчетов"));
	ТабЗнач.Колонки.Добавить("ДатаПоставки", 					Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТабЗнач.Колонки.Добавить("ДатаОтгрузки",					Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТабЗнач.Колонки.Добавить("Товары", 							Новый ОписаниеТипов("Массив"));
	ТабЗнач.Колонки.Добавить("ВозвратнаяТара", 					Новый ОписаниеТипов("Массив"));
	ТабЗнач.Колонки.Добавить("ОшибкиВыполнения", 				Новый ОписаниеТипов("Массив"));
	ТабЗнач.Колонки.Добавить("НаименованиеДоговораОтветХранения", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(150)));
	ТабЗнач.Колонки.Добавить("НомерТранспортировки", 			Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(15)));
	ТабЗнач.Колонки.Добавить("НеВыгружатьВТранзит", 			Новый ОписаниеТипов("Булево"));
	ТабЗнач.Колонки.Добавить("ГруппаДоставки", 					Новый ОписаниеТипов("СправочникСсылка.ГруппыДоставкиЗаказовПокупателей"));
	ТабЗнач.Колонки.Добавить("МаршрутныйДокумент", 				Новый ОписаниеТипов("ДокументСсылка.ОтгрузкаТоваровУслуг"));
	ТабЗнач.Колонки.Добавить("НомерЗаказаГрузополучателя", 		Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	
	///Антропов Е.П. от 27.11.2023 №000000116
	ТабЗнач.Колонки.Добавить("ДоговорВладельца", 				Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТабЗнач.Колонки.Добавить("ПричинаВозврата", 				Новый ОписаниеТипов("СправочникСсылка.ПричиныВозврата"));	
	///Антропов Е.П. от 27.11.2023 №000000116
	
	ТабЗнач.Колонки.Добавить("УтилизацияПепси", 				Новый ОписаниеТипов("Булево")); ///Антропов Е.П. от 01.03.2023 №000000204
	
	Возврат ТабЗнач;
	
КонецФункции 

#КонецОбласти 

#Область ОСТАТКИ

Функция ПолучитьТекущиеОстатки(Склады)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗапасыНаСкладахОстатки.Номенклатура,
	|	ЗапасыНаСкладахОстатки.Качество КАК Качество,
	|	СУММА(ЗапасыНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.СерияНоменклатуры.НомерПартииПоставщика, """") КАК НомерПартииПоставщика,
	|	ЕСТЬNULL(МАКСИМУМ(ЗапасыНаСкладахОстатки.СерияНоменклатуры.Используется), ИСТИНА) КАК Используется
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах.Остатки(
	|			,
	|			Склад В (&Склады)
	|				И Номенклатура В ИЕРАРХИИ (&ГруппаНоменклатуры)) КАК ЗапасыНаСкладахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыНаСкладахОстатки.СерияНоменклатуры.НомерПартииПоставщика,
	|	ЗапасыНаСкладахОстатки.Номенклатура,
	|	ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков,
	|	ЗапасыНаСкладахОстатки.Качество
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗапасыНаСкладахОстатки.КоличествоОстаток) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Качество,
	|	ЗапасыНаСкладахОстатки.Номенклатура.ДистрибьюторскийКонтракт";
	
	Запрос.УстановитьПараметр("Склады", Склады);
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", СвойстваПартнера.ГруппаНоменклатуры);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
 
Функция СформироватьТаблицуСкладовПоклажедателей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СкладыПоклажедателей3PL.Ссылка,
	|	СкладыПоклажедателей3PL.Код,
	|	СкладыПоклажедателей3PL.Наименование,
	|	СкладыПоклажедателей3PL.Партнер,
	|	СкладыПоклажедателей3PL.СсылкаНаОбъект
	|ИЗ
	|	Справочник.СкладыПоклажедателей3PL КАК СкладыПоклажедателей3PL
	|ГДЕ
	|	СкладыПоклажедателей3PL.Партнер = &Партнер
	|	И СкладыПоклажедателей3PL.СсылкаНаОбъект <> Неопределено
	|   И ТИПЗНАЧЕНИЯ(СкладыПоклажедателей3PL.СсылкаНаОбъект) = ТИП(Справочник.Качество)";
	
	Запрос.УстановитьПараметр("Партнер", Партнер); 
	
	ТаблицаСкладовПоклажедателей = Запрос.Выполнить().Выгрузить();
	
КонецФункции

///Антропов Е.П. от 18.04.2023 №000000276
Функция СформироватьТелоЗапросаПоТекущимОстаткам() ///Антропов Е.П. от 18.04.2023 №000000276
	
	ТелоЗапроса = "";
	
	Версия = "000";
	ЛогическийСклад = СокрЛП(СвойстваПартнера.ОсновнойСклад.Код);
	Завод = СвойстваПартнера.КодДистрибьютора;
	ЛогическийСкладБлокировки = СокрЛП(СвойстваПартнера.СкладБлокировки.Код);
	КачествоДляБлокировки = СвойстваПартнера.КачествоДляБлокировки;
	
	ТаблицаОстатков = ПолучитьТекущиеОстатки(СвойстваПартнера.Склад);
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	
	Запись.ЗаписатьНачалоОбъекта();
	
	Запись.ЗаписатьИмяСвойства("inventorySnapshotHeader");
	
	Запись.ЗаписатьНачалоОбъекта();
	
	ЗаписатьСвойствоИЗначениеJSON(Запись, "interfaceName", "inventorysnapshot");
	
	Запись.ЗаписатьИмяСвойства("invSnap");
	
	Запись.ЗаписатьНачалоМассива();
	
	КодСклада = "1000";
	
	///Антропов Е.П. от 18.04.2023 №000000276
	ТЗ_Остатки = Новый ТаблицаЗначений;
	ТЗ_Остатки.Колонки.Добавить("skuid"        , Новый ОписаниеТипов("Строка"));
	ТЗ_Остатки.Колонки.Добавить("storloc"      , Новый ОписаниеТипов("Строка"));
	ТЗ_Остатки.Колонки.Добавить("lot"          , Новый ОписаниеТипов("Строка"));
	ТЗ_Остатки.Колонки.Добавить("baseuom"      , Новый ОписаниеТипов("Строка"));
	ТЗ_Остатки.Колонки.Добавить("availableqty" , Новый ОписаниеТипов("Число"));
	ТЗ_Остатки.Колонки.Добавить("blockedqty"   , Новый ОписаниеТипов("Число"));
	
	///Антропов Е.П. от 02.05.2023 №000000289
	//текКачество_Стандарт = Справочники.Качество.Стандарт; 	
	ТекСписокКачеств = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Качество.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Качество КАК Качество
	|ГДЕ
	|	Качество.Код в(""Ц00002"", ""Ц00008"", ""Ц00004"", ""Ц00023"", ""Ц00027"", ""Ц00028"")"; 
	//<Претензия>, Агент, VIP, кросс докинг БИЙСК, кросс докинг РУБЦОВСК,кросс докинг СЛАВГОРОД 
	ТекСписокКачеств.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	///Антропов Е.П. от 02.05.2023 №000000289
		
	Для Каждого СтрТаб Из ТаблицаОстатков Цикл 		
		СтрокаСоСкладомПоклажедателя = ТаблицаСкладовПоклажедателей.Найти(СтрТаб.Качество, "СсылкаНаОбъект"); 		
		Если СтрокаСоСкладомПоклажедателя = Неопределено Тогда  			
			Сообщить(ОбщиеФункции._СтрШаблон_("По товару '%1' с качеством '%2' и партией '%3' не удалось подобрать склад поклажедателя", 
				СтрТаб.Номенклатура, СтрТаб.Качество, СтрТаб.НомерПартииПоставщика), СтатусСообщения.ОченьВажное); 				
			Продолжить; 			
		Иначе    			
			КодСклада = СтрокаСоСкладомПоклажедателя.Код;  			
		КонецЕсли;
		
		НовСтр = ТЗ_Остатки.Добавить();
		НовСтр.skuid        = ДобавитьЛидирующиеНулиВКодТовара(СтрТаб.Номенклатура.Артикул);
		НовСтр.storloc      = КодСклада;
		НовСтр.lot          = СтрТаб.НомерПартииПоставщика;
		НовСтр.baseuom      = ОпределитьЕдиницуИзмеренияПепси(СтрТаб.ЕдиницаИзмерения, СтрТаб.Номенклатура);
		
		///Антропов Е.П. от 02.05.2023 №000000289
		//НовСтр.availableqty = ?(СтрТаб.Качество = текКачество_Стандарт И СтрТаб.Используется, СтрТаб.КоличествоОстаток, 0);
		//НовСтр.blockedqty   = ?(СтрТаб.Качество <> текКачество_Стандарт И СтрТаб.Используется, СтрТаб.КоличествоОстаток, 0);
		Если ТекСписокКачеств.НайтиПоЗначению(СтрТаб.Качество) <> Неопределено Тогда 
			НовСтр.blockedqty = СтрТаб.КоличествоОстаток;
		Иначе 
			НовСтр.availableqty = СтрТаб.КоличествоОстаток;
		КонецЕсли;
		///Антропов Е.П. от 02.05.2023 №000000289
		
	КонецЦикла;
	ТЗ_Остатки.Свернуть("skuid,storloc,lot,baseuom","availableqty,blockedqty");
	
	Для Каждого СтрТаб Из ТЗ_Остатки Цикл 
		Запись.ЗаписатьНачалоОбъекта();
		
		ЗаписатьСвойствоИЗначениеJSON(Запись, "skuid",         СтрТаб.skuid); 		
		ЗаписатьСвойствоИЗначениеJSON(Запись, "plant",         Завод); 		
		ЗаписатьСвойствоИЗначениеJSON(Запись, "storloc",       СтрТаб.storloc); 		
		ЗаписатьСвойствоИЗначениеJSON(Запись, "lot",           СтрТаб.lot);		
		ЗаписатьСвойствоИЗначениеJSON(Запись, "version",       Версия); 		
		ЗаписатьСвойствоИЗначениеJSON(Запись, "baseuom",       СтрТаб.baseuom); 		
		ЗаписатьСвойствоИЗначениеJSON(Запись, "availableqty",  Формат(СтрТаб.availableqty, "ЧРД=.; ЧН=0; ЧГ=0"));		
		ЗаписатьСвойствоИЗначениеJSON(Запись, "blockedqty",    Формат(СтрТаб.blockedqty, "ЧРД=.; ЧН=0; ЧГ=0"));
		ЗаписатьСвойствоИЗначениеJSON(Запись, "qiqty",         "0");  		
		ЗаписатьСвойствоИЗначениеJSON(Запись, "wbstext",       null);
		
		Запись.ЗаписатьКонецОбъекта();
	КонецЦикла;
	///Антропов Е.П. от 18.04.2023 №000000276
	
	Запись.ЗаписатьКонецМассива(); 
	
	Запись.ЗаписатьКонецОбъекта();
	
	Запись.ЗаписатьКонецОбъекта(); // inventorySnapshotHeader
	
	ТелоЗапроса = Запись.Закрыть();
	
	Возврат ТелоЗапроса;
	
КонецФункции
///Антропов Е.П. от 18.04.2023 №000000276

Функция СформироватьТелоЗапросаПоРасхождениямПриПересчете(ВыборкаПоТипуОперации, МассивПартийДляПереводаНаВиртуальную)
	
	ВыборкаДетальныхЗаписей = ВыборкаПоТипуОперации.Выбрать();
	
	ТекстОперации = "";
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	
	Запись.ЗаписатьНачалоОбъекта();
	ЗаписатьСвойствоИЗначениеJSON(Запись, "inventoryMove");
	
	Запись.ЗаписатьНачалоОбъекта();
	ЗаписатьСвойствоИЗначениеJSON(Запись, "interfaceName", "inventorymovement");
	
	ЗаписатьСвойствоИЗначениеJSON(Запись, "invmovhead");
	Запись.ЗаписатьНачалоОбъекта();
	ЗаписатьСвойствоИЗначениеJSON(Запись, "postdate", Формат(ТекущаяДатаСеанса(), "ДФ='yyyy-MM-dd HH:mm:ss'"));
	ЗаписатьСвойствоИЗначениеJSON(Запись, "docdate", Формат(ТекущаяДатаСеанса(), "ДФ='yyyy-MM-dd HH:mm:ss'"));
	Если ВыборкаПоТипуОперации.ТипДвижения = "311" Тогда
		ЗаписатьСвойствоИЗначениеJSON(Запись, "htxt", ОбщиеФункции.ВернутьЗначениеСвойстваОбъекта(ВыборкаПоТипуОперации.Ссылка.ДокументОснование,
			СвойстваПартнера.Свойство_НомерВходящегоДокумента));
	КонецЕсли; 
	Запись.ЗаписатьКонецОбъекта();
	
	ЗаписатьСвойствоИЗначениеJSON(Запись, "invmovcode");
	Запись.ЗаписатьНачалоОбъекта();
	ЗаписатьСвойствоИЗначениеJSON(Запись, "trcode", ВыборкаПоТипуОперации.ТипОперации);
	Запись.ЗаписатьКонецОбъекта();
	
	ЗаписатьСвойствоИЗначениеJSON(Запись, "invmovdetail");
	Запись.ЗаписатьНачалоОбъекта();
	
	ЗаписатьСвойствоИЗначениеJSON(Запись, "inventorymovementsdet");
	Запись.ЗаписатьНачалоМассива();
	Молочка = Справочники.Номенклатура.НайтиПоКоду("Ц060537470");
	СерииБаллонов = Неопределено;
	
	Пока ВыборкаДетальныхЗаписей.Следующий() цикл
		
		Если ВыборкаПоТипуОперации.ТипДвижения = "343" тогда
			СкладПолучатель = _3PLСервер.ОпределитьСкладПоклажедателя(Партнер, ВыборкаДетальныхЗаписей.Склад);
			Склад           = _3PLСервер.ОпределитьСкладПоклажедателя(Партнер, ВыборкаДетальныхЗаписей.СкладПолучатель);
		ИначеЕсли  ВыборкаПоТипуОперации.ТипДвижения = "344" Тогда
			// newstorloc = 1000, storloc = качество не стандарт
			СкладПолучатель = _3PLСервер.ОпределитьСкладПоклажедателя(Партнер, ВыборкаДетальныхЗаписей.СкладПолучатель);
			Склад           = _3PLСервер.ОпределитьСкладПоклажедателя(Партнер, ВыборкаДетальныхЗаписей.Склад);			
		Иначе
			Склад = 			_3PLСервер.ОпределитьСкладПоклажедателя(Партнер, ВыборкаДетальныхЗаписей.Склад);
			СкладПолучатель = 	_3PLСервер.ОпределитьСкладПоклажедателя(Партнер, ВыборкаДетальныхЗаписей.СкладПолучатель);
		КонецЕсли; 
		
		Запись.ЗаписатьНачалоОбъекта();
			ЗаписатьСвойствоИЗначениеJSON(Запись, "itemnum", 	ДобавитьЛидирующиеНулиВКодТовара(ВыборкаДетальныхЗаписей.Номенклатура.Артикул));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "lot", 		ВыборкаДетальныхЗаписей.НомерПартииПоставщика);
			ЗаписатьСвойствоИЗначениеJSON(Запись, "qty", 		?(ВыборкаДетальныхЗаписей.Количество < 0, -ВыборкаДетальныхЗаписей.Количество, ВыборкаДетальныхЗаписей.Количество));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "baseuom", 	ОпределитьЕдиницуИзмеренияПепси(ВыборкаДетальныхЗаписей.ЕдиницаИзмерения, ВыборкаДетальныхЗаписей.Номенклатура));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "movtype", 	ВыборкаДетальныхЗаписей.ТипДвижения);
			ЗаписатьСвойствоИЗначениеJSON(Запись, "storloc", 	Склад.Код);
			ЗаписатьСвойствоИЗначениеJSON(Запись, "newstorloc", СкладПолучатель.Код);
			ЗаписатьСвойствоИЗначениеJSON(Запись, "plant", 		СвойстваПартнера.КодДистрибьютора);
			ЗаписатьСвойствоИЗначениеJSON(Запись, "costcenter", СвойстваПартнера.КостЦентр);
			
			Если  ВыборкаПоТипуОперации.ТипДвижения = "311"
				И ВыборкаДетальныхЗаписей.ЭтоПересорт
				И ВыборкаДетальныхЗаписей.НомерПартииПоставщика <> "FGDUMMY" Тогда
				
				Если ВыборкаДетальныхЗаписей.ЕстьПомарочныйУчет Тогда
					ЗаписатьСвойствоИЗначениеJSON(Запись, "newbatch", СвойстваПартнера.НомерВиртуальнойПартииПУ);
				Иначе
					ЗаписатьСвойствоИЗначениеJSON(Запись, "newbatch", СвойстваПартнера.НомерВиртуальнойПартии);
				КонецЕсли; 
				
			КонецЕсли;
			
			Если ВыборкаДетальныхЗаписей.Номенклатура = СвойстваПартнера.Баллон И УчетСерийныхНомеровПоБаллонам Тогда
				// Не знаю, будет ли недостача по баллонам при приемке. Если да, пока не понимаю, как это показать
			    Если СерииБаллонов = Неопределено И ТипЗнч(ВыборкаДетальныхЗаписей.Ссылка) <> Тип("ДокументСсылка.ПриходныйСкладскойОрдер") Тогда
					СерииБаллонов = ВыборкаДетальныхЗаписей.Ссылка.Товары;
				КонецЕсли; 
				
				ДобавитьСведенияОСерияхНаБаллоныПоКорректировкамОстатков(Запись, СерииБаллонов, ВыборкаДетальныхЗаписей.НомерСтроки);	
				
			КонецЕсли; 
			
		Запись.ЗаписатьКонецОбъекта();
		
	КонецЦикла;
	Запись.ЗаписатьКонецМассива();

	Запись.ЗаписатьКонецОбъекта();
	
	Запись.ЗаписатьКонецОбъекта();
	
	Запись.ЗаписатьКонецОбъекта();
	
	ТекстОперации = Запись.Закрыть();
		
	Возврат ТекстОперации;
	
КонецФункции

Функция ПолучитьДанныеПоДвижениямКорректировкиОстатков()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	"""" КАК НомерСтроки,
	|	Недостача.Дата КАК Дата,
	|	Недостача.Ссылка КАК Ссылка,
	|	Недостача.Номенклатура КАК Номенклатура,
	|	Недостача.НомерПартииПоставщика КАК НомерПартииПоставщика,
	|	Недостача.Склад КАК Склад,
	|	Недостача.СкладПолучатель КАК СкладПолучатель,
	|	Недостача.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Недостача.Количество КАК Количество,
	|	Недостача.ТипОперации КАК ТипОперации,
	|	Недостача.ТипДвижения КАК ТипДвижения,
	|	Недостача.ЭтоПересорт КАК ЭтоПересорт,
	|	Недостача.ЕстьПомарочныйУчет КАК ЕстьПомарочныйУчет
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(Док.Дата) КАК Дата,
	|		МАКСИМУМ(Док.Ссылка) КАК Ссылка,
	|		влЗапрос.Номенклатура КАК Номенклатура,
	|		влЗапрос.НомерПартииПоставщика КАК НомерПартииПоставщика,
	|		влЗапрос.Склад КАК Склад,
	|		ВЫБОР
	|			КОГДА влЗапрос.ЭтоПересорт
	|				ТОГДА влЗапрос.Склад
	|			ИНАЧЕ влЗапрос.СкладПолучатель
	|		КОНЕЦ КАК СкладПолучатель,
	|		влЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		влЗапрос.Количество - СУММА(ЕСТЬNULL(Состав.Количество, 0) * ЕСТЬNULL(Состав.Коэффициент, 0)) КАК Количество,
	|		влЗапрос.ТипОперации КАК ТипОперации,
	|		влЗапрос.ТипДвижения КАК ТипДвижения,
	|		влЗапрос.ЭтоПересорт КАК ЭтоПересорт,
	|		влЗапрос.ЕстьПомарочныйУчет КАК ЕстьПомарочныйУчет
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЗаказПоставщику.Ссылка КАК ЗаказПоставщика,
	|			ЗаказПоставщику.Номенклатура КАК Номенклатура,
	|			ЗаказПоставщику.НомерПартииПоставщика КАК НомерПартииПоставщика,
	|			&Склад КАК Склад,
	|			&КачествоПретензия КАК СкладПолучатель,
	|			ЗаказПоставщику.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			ЗаказПоставщику.Количество КАК Количество,
	|			""04"" КАК ТипОперации,
	|			""311"" КАК ТипДвижения,
	|			ЛОЖЬ КАК ЭтоПересорт,
	|			ВЫБОР
	|				КОГДА ЗаказПоставщику.СерияНоменклатуры.Комментарий ПОДОБНО ""%CIM%""
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ЕстьПомарочныйУчет
	|		ИЗ
	|			Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщику
	|		ГДЕ
	|			ЗаказПоставщику.Ссылка.Дата МЕЖДУ &НачПериод И &КонПериод
	|			И ЗаказПоставщику.Ссылка.Склад В(&ОсновнойСклад)
	|			И ЗаказПоставщику.Номенклатура В ИЕРАРХИИ(&ГруппаНоменклатуры)
	|			И ЗаказПоставщику.НомерПартииПоставщика <> """"
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗаказПоставщику.Ссылка,
	|			ЗаказПоставщику.Номенклатура,
	|			ЗаказПоставщику.ЕдиницаИзмерения,
	|			ЗаказПоставщику.Количество,
	|			ЗаказПоставщику.НомерПартииПоставщика,
	|			ВЫБОР
	|				КОГДА ЗаказПоставщику.СерияНоменклатуры.Комментарий ПОДОБНО ""%CIM%""
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) КАК влЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйСкладскойОрдер КАК Док
	|			ПО влЗапрос.ЗаказПоставщика = Док.ДокументОснование
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйСкладскойОрдер.Товары КАК Состав
	|			ПО (Док.Ссылка = Состав.Ссылка)
	|				И влЗапрос.Номенклатура = Состав.Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналОпераций
	|			ПО (Док.Ссылка = ЖурналОпераций.Объект)
	|				И (ЖурналОпераций.Источник = ""1С"")
	|				И (ЖурналОпераций.Приемник = &Партнер)
	|	ГДЕ
	|		Док.Проведен
	|		И Док.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.ПриемНаХранение)
	|		И ЖурналОпераций.Статус ЕСТЬ NULL
	|	
	|	СГРУППИРОВАТЬ ПО
	|		влЗапрос.Номенклатура,
	|		влЗапрос.НомерПартииПоставщика,
	|		влЗапрос.Склад,
	|		ВЫБОР
	|			КОГДА влЗапрос.ЭтоПересорт
	|				ТОГДА влЗапрос.Склад
	|			ИНАЧЕ влЗапрос.СкладПолучатель
	|		КОНЕЦ,
	|		влЗапрос.ЕдиницаИзмерения,
	|		влЗапрос.Количество,
	|		влЗапрос.ТипОперации,
	|		влЗапрос.ТипДвижения,
	|		влЗапрос.ЭтоПересорт,
	|		влЗапрос.ЕстьПомарочныйУчет
	|	
	|	ИМЕЮЩИЕ
	|		влЗапрос.Количество > СУММА(ЕСТЬNULL(Состав.Количество, 0) * ЕСТЬNULL(Состав.Коэффициент, 0))) КАК Недостача
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Состав.НомерСтроки,
	|	Док.Дата,
	|	Состав.Ссылка,
	|	Состав.Номенклатура,
	|	Состав.СерияНоменклатуры.НомерПартииПоставщика,
	|	Состав.Качество,
	|	Состав.Качество,
	|	Состав.ЕдиницаИзмерения,
	|	Состав.Количество,
	|	""03"",
	|	ВЫБОР
	|		КОГДА Состав.СерияНоменклатуры <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|				И НЕ Состав.СерияНоменклатуры.Используется
	|			ТОГДА ""Z94""
	|		ИНАЧЕ ""ZI4""
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА Состав.СерияНоменклатуры.Комментарий ПОДОБНО ""%CIM%""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Документ.СписаниеТоваров.Товары КАК Состав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеТоваров КАК Док
	|		ПО Состав.Ссылка = Док.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналОпераций
	|		ПО (Док.Ссылка = ЖурналОпераций.Объект)
	|			И (ЖурналОпераций.Источник = ""1С"")
	|			И (ЖурналОпераций.Приемник = &Партнер)
	|ГДЕ
	|	Состав.Номенклатура В ИЕРАРХИИ(&ГруппаНоменклатуры)
	|	И Док.Проведен
	|	И Док.Склад В(&ОсновнойСклад)
	|	И Док.ИнвентаризацияТоваровНаСкладе = НЕОПРЕДЕЛЕНО
	|	И ЖурналОпераций.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыЗаявок.Новая)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Состав.НомерСтроки,
	|	Док.Дата,
	|	Состав.Ссылка,
	|	Состав.Номенклатура,
	|	Состав.СерияНоменклатуры.НомерПартииПоставщика,
	|	Состав.Качество,
	|	Состав.Качество,
	|	Состав.ЕдиницаИзмерения,
	|	Состав.Количество,
	|	""03"",
	|	ВЫБОР
	|		КОГДА Состав.СерияНоменклатуры <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|				И НЕ Состав.СерияНоменклатуры.Используется
	|			ТОГДА ""Z93""
	|		ИНАЧЕ ""ZI3""
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА Состав.СерияНоменклатуры.Комментарий ПОДОБНО ""%CIM%""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Документ.ОприходованиеТоваров.Товары КАК Состав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров КАК Док
	|		ПО Состав.Ссылка = Док.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналОпераций
	|		ПО (Док.Ссылка = ЖурналОпераций.Объект)
	|			И (ЖурналОпераций.Источник = ""1С"")
	|			И (ЖурналОпераций.Приемник = &Партнер)
	|ГДЕ
	|	Состав.Номенклатура В ИЕРАРХИИ(&ГруппаНоменклатуры)
	|	И Док.Проведен
	|	И Док.Склад В(&ОсновнойСклад)
	|	И Док.ИнвентаризацияТоваровНаСкладе = НЕОПРЕДЕЛЕНО
	|	И ЖурналОпераций.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыЗаявок.Новая)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Состав.НомерСтроки,
	|	Док.Дата,
	|	Состав.Ссылка,
	|	Состав.Номенклатура,
	|	Состав.СерияНоменклатуры.НомерПартииПоставщика,
	|	Состав.КачествоНовое,
	|	Состав.КачествоСтарое,
	|	Состав.ЕдиницаИзмерения,
	|	Состав.Количество,
	|	""04"",
	|	ВЫБОР
	|		КОГДА Состав.КачествоНовое <> ЗНАЧЕНИЕ(Справочник.Качество.Стандарт)
	|			ТОГДА ""344""
	|		ИНАЧЕ ""343""
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА Состав.СерияНоменклатуры.Комментарий ПОДОБНО ""%CIM%""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Документ.КорректировкаКачестваЗапасов.Товары КАК Состав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаКачестваЗапасов КАК Док
	|		ПО Состав.Ссылка = Док.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналОпераций
	|		ПО (Док.Ссылка = ЖурналОпераций.Объект)
	|			И (ЖурналОпераций.Источник = ""1С"")
	|			И (ЖурналОпераций.Приемник = &Партнер)
	|ГДЕ
	|	Состав.Номенклатура В ИЕРАРХИИ(&ГруппаНоменклатуры)
	|	И Док.Проведен
	|	И Док.Склад В(&ОсновнойСклад)
	|	И ЖурналОпераций.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыЗаявок.Новая)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Недостача.Дата
	|ИТОГИ
	|	МАКСИМУМ(ТипОперации),
	|	МАКСИМУМ(ТипДвижения)
	|ПО
	|	Ссылка";
		
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", СвойстваПартнера.ГруппаНоменклатуры); 
	Запрос.УстановитьПараметр("ОсновнойСклад", ПолучитьМассивСкладовХранения()); 
	Запрос.УстановитьПараметр("Партнер", Строка(Партнер)); 
	Запрос.УстановитьПараметр("КачествоПретензия", СвойстваПартнера.КачествоПретензия);
	Запрос.УстановитьПараметр("Склад", СвойстваПартнера.Склад);
	КолДнейСреза = 0;
	Если ДеньНедели(ТекущаяДатаСеанса()) > 5 И ДеньНедели(ТекущаяДатаСеанса()) <= 7 Тогда
		КолДнейСреза = 5 - ДеньНедели(ТекущаяДатаСеанса());	
	КонецЕсли; 
	Запрос.УстановитьПараметр("НачПериод", ОбщиеФункции.ДобавитьДень(НачалоДня(ТекущаяДатаСеанса()), КолДнейСреза)); 
	Запрос.УстановитьПараметр("КонПериод", ТекущаяДатаСеанса()); 
	
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

Процедура ВыгрузитьОстаткиВФайл(ПутьКФайлу) Экспорт
	
	ПрочитатьСвойстваПартнера();
	
	СформироватьТаблицуСкладовПоклажедателей();
	
	Завод = СвойстваПартнера.КодДистрибьютора;
	
	ТаблицаОстатков = ПолучитьТекущиеОстатки(СвойстваПартнера.Склад);
	
	КодСклада = "";
	
	ТабДокумент = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ВыгрузкаОстатков");
	ОбластьШапки = Макет.ПолучитьОбласть("КолонкиТаблицы");
	ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаТаблицы");
	
	ТабДокумент.Вывести(ОбластьШапки);
	
	Для каждого СтрТаб Из ТаблицаОстатков Цикл
		
		СтрокаСоСкладомПоклажедателя = ТаблицаСкладовПоклажедателей.Найти(СтрТаб.Качество, "СсылкаНаОбъект");
		
		Если СтрокаСоСкладомПоклажедателя = Неопределено Тогда
			
			Сообщить(ОбщиеФункции._СтрШаблон_("По товару '%1' с качеством '%2' и партией '%3' не удалось подобрать склад поклажедателя", 
			СтрТаб.Номенклатура, СтрТаб.Качество, СтрТаб.НомерПартииПоставщика), СтатусСообщения.ОченьВажное);
			
			Продолжить;
			
		Иначе
			
			КодСклада = СтрокаСоСкладомПоклажедателя.Код;
			
		КонецЕсли;
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Артикул", СтрТаб.Номенклатура.Артикул);
		СтруктураЗаписи.Вставить("Завод", Завод);
		СтруктураЗаписи.Вставить("КодСклада", КодСклада);
		СтруктураЗаписи.Вставить("Партия", СтрТаб.НомерПартииПоставщика);
		СтруктураЗаписи.Вставить("ЕдиницаХраненияОстатков", ОпределитьЕдиницуИзмеренияПепси(СтрТаб.ЕдиницаИзмерения, СтрТаб.Номенклатура));
		СтруктураЗаписи.Вставить("СвободныйЗапас", ?(СтрТаб.Качество = Справочники.Качество.Стандарт И СтрТаб.Используется, Формат(СтрТаб.КоличествоОстаток, "ЧРД=.; ЧГ=0"), "0"));
		СтруктураЗаписи.Вставить("ОграниченныйЗапас", "0");
		СтруктураЗаписи.Вставить("ЗаблокированныйЗапас", ?(СтрТаб.Качество <> Справочники.Качество.Стандарт И СтрТаб.Используется, Формат(СтрТаб.КоличествоОстаток, "ЧРД=.; ЧГ=0"), "0"));
		
		ОбластьСтроки.Параметры.Заполнить(СтруктураЗаписи);
		
		ТабДокумент.Вывести(ОбластьСтроки);
		
	КонецЦикла;
	
	ТабДокумент.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLSX);
	
КонецПроцедуры 

#КонецОбласти 

#Область ПОДТВЕРЖДЕНИЯ

Функция ПолучитьСерииОтбора(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	
	///Антропов Е.П. от 01.03.2023 №000000204
	|	ОтборЗапасовНаСкладеСерииОтбора.ИдСтрокиПоклажедателя КАК ИдСтрокиПоклажедателя,
	///Антропов Е.П. от 01.03.2023 №000000204
	
	|	ОтборЗапасовНаСкладеСерииОтбора.Номенклатура, 	
	|	СУММА(ОтборЗапасовНаСкладеСерииОтбора.КоличествоПлан) КАК КоличествоПлан,
	|	СУММА(ОтборЗапасовНаСкладеСерииОтбора.КоличествоФакт) КАК КоличествоФакт,
	|	ВЫБОР
	|		КОГДА ОтборЗапасовНаСкладеСерииОтбора.СерияНоменклатурыОтбора.НомерПартииПоставщика ЕСТЬ NULL
	|			ТОГДА &ВиртуальнаяПартия
	|		ИНАЧЕ ОтборЗапасовНаСкладеСерииОтбора.СерияНоменклатурыОтбора.НомерПартииПоставщика
	|	КОНЕЦ КАК НомерПартииПоставщика 	
	|ИЗ
	|	Документ.ОтборЗапасовНаСкладе.СерииОтбора КАК ОтборЗапасовНаСкладеСерииОтбора
	|ГДЕ
	|	ОтборЗапасовНаСкладеСерииОтбора.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	
	///Антропов Е.П. от 01.03.2023 №000000204
	|	ОтборЗапасовНаСкладеСерииОтбора.ИдСтрокиПоклажедателя,
	///Антропов Е.П. от 01.03.2023 №000000204
	
	|	ОтборЗапасовНаСкладеСерииОтбора.Номенклатура,
	|	ВЫБОР
	|		КОГДА ОтборЗапасовНаСкладеСерииОтбора.СерияНоменклатурыОтбора.НомерПартииПоставщика ЕСТЬ NULL
	|			ТОГДА &ВиртуальнаяПартия
	|		ИНАЧЕ ОтборЗапасовНаСкладеСерииОтбора.СерияНоменклатурыОтбора.НомерПартииПоставщика
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("Ссылка",            ДокументСсылка); 
	Запрос.УстановитьПараметр("ВиртуальнаяПартия", СвойстваПартнера.НомерВиртуальнойПартии); 
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции 

Функция ЕстьЗаявкаНаОперациюОбновленияПоставок(НомерТранспортировки, СтатусТранспортировки)
	
	СтруктураОтбора = Новый Структура("НомерТранспортировки, Идентификатор", НомерТранспортировки, СтатусТранспортировки);

	Возврат ЗначениеЗаполнено(ТаблицаНовыхЗаявокНаОбновлениеСтатусовПоставки.НайтиСтроки(СтруктураОтбора));
	
КонецФункции

Процедура ДобавитьНовуюЗаявкуВТаблицуЗаявокНаОбновлениеПоставок(Объект, Идентификатор, НомерТранспортировки)
	
	НовСтр = ТаблицаНовыхЗаявокНаОбновлениеСтатусовПоставки.Добавить();
	НовСтр.Объект               = Объект;
	НовСтр.Идентификатор        = Идентификатор;
	НовСтр.НомерТранспортировки = НомерТранспортировки;
	
КонецПроцедуры
 
Функция ПолучитьЗаявкиНаОбновлениеПоставок()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Объект,
	|	ВЫРАЗИТЬ(ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Текст КАК СТРОКА(25)) КАК НомерТранспортировки,
	|	ВЫРАЗИТЬ(ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Идентификатор КАК СТРОКА(36)) КАК Идентификатор
	|ИЗ
	|	РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций
	|ГДЕ
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Источник = ""1С""
	|	И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Приемник = &Приемник
	|	И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Идентификатор В (""shipmentupdate_004"", ""shipmentupdate_005_start"", ""shipmentupdate_005_finish"", ""shipmentupdate_005"")
	|	И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Статус = &Статус
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Объект,
	|	ВЫРАЗИТЬ(ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Текст КАК СТРОКА(25)),
	|	ВЫРАЗИТЬ(ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Идентификатор КАК СТРОКА(36))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	влЗапрос.НомерТранспортировки,
	|	СвойстваОбъектов.Объект КАК Объект,
	|	СтатусыНакладных.Состояние,
	|	""004"" КАК СтатусТранспортировки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Объект КАК Объект,
	|		ВЫРАЗИТЬ(ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Текст КАК СТРОКА(25)) КАК НомерТранспортировки,
	|		ВЫРАЗИТЬ(ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Идентификатор КАК СТРОКА(36)) КАК Идентификатор
	|	ИЗ
	|		РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций
	|	ГДЕ
	|		ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Источник = ""1С""
	|		И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Приемник = &Приемник
	|		И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Идентификатор = ""shipmentupdate_004""
	|		И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Статус = &Статус
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Объект,
	|		ВЫРАЗИТЬ(ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Текст КАК СТРОКА(25)),
	|		ВЫРАЗИТЬ(ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Идентификатор КАК СТРОКА(36))) КАК влЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваОбъектов
	|		ПО влЗапрос.НомерТранспортировки = СвойстваОбъектов.Значение
	|			И (СвойстваОбъектов.Свойство = &НомерПоДаннымПоставщика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеДокументовОтгрузки.СрезПоследних КАК СтатусыНакладных
	|		ПО (СвойстваОбъектов.Объект = СтатусыНакладных.ДокументОтгрузки)
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СвойстваОбъектов.Объект) = ТИП(Документ.ОтгрузкаТоваровУслуг)
	|	И СтатусыНакладных.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовОтгрузки.Создан), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовОтгрузки.ВОтборе))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	влЗапрос.НомерТранспортировки,
	|	СвойстваОбъектов.Объект,
	|	СтатусыНакладных.Состояние,
	|	""005""
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Объект КАК Объект,
	|		ВЫРАЗИТЬ(ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Текст КАК СТРОКА(25)) КАК НомерТранспортировки,
	|		ВЫРАЗИТЬ(ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Идентификатор КАК СТРОКА(36)) КАК Идентификатор
	|	ИЗ
	|		РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций
	|	ГДЕ
	|		ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Источник = ""1С""
	|		И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Приемник = &Приемник
	|		И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Идентификатор = ""shipmentupdate_005""
	|		И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Статус = &Статус
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Объект,
	|		ВЫРАЗИТЬ(ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Текст КАК СТРОКА(25)),
	|		ВЫРАЗИТЬ(ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Идентификатор КАК СТРОКА(36))) КАК влЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваОбъектов
	|		ПО влЗапрос.НомерТранспортировки = СвойстваОбъектов.Значение
	|			И (СвойстваОбъектов.Свойство = &НомерПоДаннымПоставщика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеДокументовОтгрузки.СрезПоследних КАК СтатусыНакладных
	|		ПО (СвойстваОбъектов.Объект = СтатусыНакладных.ДокументОтгрузки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйСкладскойОрдер КАК РСО
	|		ПО (СвойстваОбъектов.Объект = РСО.ДокументОснование)
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СвойстваОбъектов.Объект) = ТИП(Документ.ОтгрузкаТоваровУслуг)
	|	И РСО.Ссылка ЕСТЬ NULL";
	
	///Антропов Е.П. от 22.12.2023 №000000063
	//|	И СтатусыНакладных.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовОтгрузки.НеВыполнен)";
	///Антропов Е.П. от 22.12.2023 №000000063
	
	Запрос.УстановитьПараметр("Приемник", Строка(Партнер));
	Запрос.УстановитьПараметр("Статус", Справочники.СтатусыЗаявок.Новая);
	Запрос.УстановитьПараметр("НомерПоДаннымПоставщика", СвойстваПартнера.Свойство_НомерТранспортировки); 
	
	Результат = Запрос.ВыполнитьПакет();
	
	РазблокированныеТранспортировки = Результат.Получить(0).Выгрузить();
	
	ЗаблокированныеТранспортировки = Результат.Получить(1).Выгрузить();
	
	Если ЗначениеЗаполнено(ЗаблокированныеТранспортировки) Тогда
		
		ТекстПричины004 = "";
		ОжидаемыйСтатусТранспортировкиДо004 = "Отобран";
		ОжидаемыйСтатусТранспортировкиДо005 = "Отгружен, Выполнен, Не выполнен";
		
		Для каждого СтрТаб Из ЗаблокированныеТранспортировки Цикл
			
			Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось обновить статус транспортировки №%1 до статуса %2 по причине: '%3' имеет состояние '%4'. Ожидаемый статус должен быть '%5'",
				СтрТаб.НомерТранспортировки, СтрТаб.СтатусТранспортировки, СтрТаб.Объект, СтрТаб.Состояние, ?(СтрТаб.СтатусТранспортировки = "004", ОжидаемыйСтатусТранспортировкиДо004, ОжидаемыйСтатусТранспортировкиДо005)),
			СтатусСообщения.Внимание);
			
			СтрокаРазблокированныеТранспортировки = РазблокированныеТранспортировки.НайтиСтроки(Новый Структура("НомерТранспортировки, Идентификатор", СтрТаб.НомерТранспортировки, "shipmentupdate_" + СтрТаб.СтатусТранспортировки));
			
			Для каждого Элемент Из СтрокаРазблокированныеТранспортировки Цикл
				РазблокированныеТранспортировки.Удалить(Элемент);
			КонецЦикла; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РазблокированныеТранспортировки;
	
КонецФункции

Процедура СоздатьЗаявкуНаОперациюОбновленияПоставок(СтрТаб, МассивТранспортировок)
	
	Объект = СтрТаб.Объект; ///Антропов Е.П. от 14.10.2024 УЗ №000000452
	
	РегистраторЗаписи004 = Документы.РегистраторЗаписи.СоздатьНовыйДокумент("" + Объект);
	
	РегистраторЗаписи005 = Документы.РегистраторЗаписи.СоздатьНовыйДокумент("" + Объект);
	
	НомерТранспортировки = ОбщиеФункции.ВернутьЗначениеСвойстваОбъекта(Объект, СвойстваПартнера.Свойство_НомерТранспортировки);
	
	Если МассивТранспортировок.Найти(НомерТранспортировки) = Неопределено Тогда
		
		///Антропов Е.П. от 14.10.2024 УЗ №000000452
		НужноЧерезUtrace = Ложь; 		
		Если СвойстваПартнера.Свойство("ОжидатьПодтвержденияUtraceПоПУ") И СвойстваПартнера.ОжидатьПодтвержденияUtraceПоПУ Тогда 
			ЕстьПУ = ЕстьПомарочныйУчет(Объект);
			Если ЕстьПУ Тогда 
				НужноЧерезUtrace = Истина; 
			КонецЕсли;
		КонецЕсли;		
		///Антропов Е.П. от 14.10.2024 УЗ №000000452
		
		Если НЕ ЕстьЗаявкаНаОперациюОбновленияПоставок(НомерТранспортировки, "shipmentupdate_004") Тогда
			
			///Антропов Е.П. от 14.10.2024 УЗ №000000452
			Если НужноЧерезUtrace И ТипЗнч(СтрТаб.ДокументПодтверждения) = Тип("ДокументСсылка.ОтборЗапасовНаСкладе") Тогда 
				_3PLСервер.ДобавитьЗаписьПоДокументуВЖурналОпераций(СтрТаб.ДокументПодтверждения, Источник_Utrace, Приемник_Utrace, 
				Справочники.СтатусыЗаявок.Новая, "");
			Иначе
			///Антропов Е.П. от 14.10.2024 УЗ №000000452
				
			_3PLСервер.ДобавитьЗаписьПоДокументуВЖурналОпераций(РегистраторЗаписи004, "1С", Строка(Партнер), 
				Справочники.СтатусыЗаявок.Новая, "shipmentupdate_004", ТекущаяДатаСеанса(),, НомерТранспортировки);
			
			ДобавитьНовуюЗаявкуВТаблицуЗаявокНаОбновлениеПоставок(РегистраторЗаписи004, "shipmentupdate_004", НомерТранспортировки);
			
			КонецЕсли;///Антропов Е.П. от 14.10.2024 УЗ №000000452
			
		КонецЕсли;  
		
		///Антропов Е.П. от 14.10.2024 УЗ №000000452
		Если НЕ НужноЧерезUtrace И НЕ ЕстьЗаявкаНаОперациюОбновленияПоставок(НомерТранспортировки, "shipmentupdate_005") Тогда
		//Если НЕ ЕстьЗаявкаНаОперациюОбновленияПоставок(НомерТранспортировки, "shipmentupdate_005") Тогда
		///Антропов Е.П. от 14.10.2024 УЗ №000000452
			
			_3PLСервер.ДобавитьЗаписьПоДокументуВЖурналОпераций(РегистраторЗаписи005, "1С", Строка(Партнер), 
				Справочники.СтатусыЗаявок.Новая, "shipmentupdate_005", ТекущаяДатаСеанса(),, НомерТранспортировки);
			
			ДобавитьНовуюЗаявкуВТаблицуЗаявокНаОбновлениеПоставок(РегистраторЗаписи005, "shipmentupdate_005", НомерТранспортировки);
			
		КонецЕсли;
			
		МассивТранспортировок.Добавить(НомерТранспортировки);
		
	КонецЕсли; 
		
КонецПроцедуры

Функция ПолучитьМаршрутПоНомеруТранспортировки(НомерТранспортировки)
	
	Маршрут = Документы.МаршрутЭкспедитора.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &Свойство
	|	И ЗначенияСвойствОбъектов.Значение = &Значение
	|	И ТИПЗНАЧЕНИЯ(ЗначенияСвойствОбъектов.Объект) = ТИП(Документ.МаршрутЭкспедитора)";
	
	Запрос.УстановитьПараметр("Свойство", СвойстваПартнера.Свойство_НомерТранспортировки); 
	Запрос.УстановитьПараметр("Значение", НомерТранспортировки); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Маршрут = Выборка.Объект;
	КонецЕсли; 
	
	Возврат Маршрут;
	
КонецФункции

Функция ПолучитьВремяСборкиТранспортировки(НомерТранспортировки)
	
	ВремяСборки = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(Отбор.Дата) КАК ДатаОтбора
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗначенияСвойствОбъектов.Объект КАК Объект
	|	ИЗ
	|		РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|	ГДЕ
	|		ЗначенияСвойствОбъектов.Свойство = &Свойство
	|		И ЗначенияСвойствОбъектов.Значение = &Значение
	|		И ТИПЗНАЧЕНИЯ(ЗначенияСвойствОбъектов.Объект) = ТИП(Документ.ОтгрузкаТоваровУслуг)) КАК влЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтборЗапасовНаСкладе.ЗаказыНаОтгрузку КАК тчЛистОтбора
	|		ПО влЗапрос.Объект = тчЛистОтбора.ЗаказНаОтгрузку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтборЗапасовНаСкладе КАК Отбор
	|		ПО (тчЛистОтбора.Ссылка = Отбор.Ссылка)";
	
	Запрос.УстановитьПараметр("Свойство", СвойстваПартнера.Свойство_НомерТранспортировки); 
	Запрос.УстановитьПараметр("Значение", НомерТранспортировки); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВремяСборки = Выборка.ДатаОтбора;
	КонецЕсли; 
	
	Возврат ВремяСборки;
	
КонецФункции

Функция ПолучитьВремяОтгрузкиТранспортировки(НомерТранспортировки)
	
	ВремяОтгрузки = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(ОТУ.ДатаОтгрузки) КАК ДатаОтгрузки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗначенияСвойствОбъектов.Объект КАК Объект
	|	ИЗ
	|		РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|	ГДЕ
	|		ЗначенияСвойствОбъектов.Свойство = &Свойство
	|		И ЗначенияСвойствОбъектов.Значение = &Значение
	|		И ТИПЗНАЧЕНИЯ(ЗначенияСвойствОбъектов.Объект) = ТИП(Документ.ОтгрузкаТоваровУслуг)) КАК влЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровУслуг КАК ОТУ
	|		ПО влЗапрос.Объект = ОТУ.Ссылка";
	
	Запрос.УстановитьПараметр("Свойство", СвойстваПартнера.Свойство_НомерТранспортировки); 
	Запрос.УстановитьПараметр("Значение", НомерТранспортировки); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВремяОтгрузки = Выборка.ДатаОтгрузки;
	КонецЕсли; 
	
	Возврат ВремяОтгрузки;
	
КонецФункции

Функция СформироватьТелоЗапросаДляОбновленияПоставки(Объект, НомерТранспортировки, ИдентификаторОперации)
	
	ЧасовойПояс = "RUS03";
	СмещениеВСекундах = 10; // для разницы в 10 сек
	СмещениеВМинутах = 120; // для разницы в 10 мин
	ЭтоВыкуп = Ложь;
	
	МаршрутСсылка = ПолучитьМаршрутПоНомеруТранспортировки(НомерТранспортировки);
	
	Если НЕ ЗначениеЗаполнено(МаршрутСсылка) Тогда
		Возврат "";
	КонецЕсли;
	
	ВремяСборкиТранспортировки = ПолучитьВремяСборкиТранспортировки(НомерТранспортировки);
	ВремяОтгрузкиТранспортировки = ПолучитьВремяОтгрузкиТранспортировки(НомерТранспортировки);
	
	ЭтоВыкуп = (МаршрутСсылка.ДокументыОснования.Количество() = 1
		И МаршрутСсылка.ДокументыОснования.Получить(0).Контрагент = СвойстваПартнера.КонтрагентНаВыкуп);
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	
	Запись.ЗаписатьНачалоОбъекта();
	
		ЗаписатьСвойствоИЗначениеJSON(Запись, "interfaceName", "shipmentupdate");
		ЗаписатьСвойствоИЗначениеJSON(Запись, "plant", СвойстваПартнера.КодДистрибьютора);
		ЗаписатьСвойствоИЗначениеJSON(Запись, "shpnum", НомерТранспортировки);
		
		ЗаписатьСвойствоИЗначениеJSON(Запись, "event");
		Запись.ЗаписатьНачалоМассива();
		
		Если ИдентификаторОперации = "shipmentupdate_004" Тогда
			Запись.ЗаписатьНачалоОбъекта();
			ЗаписатьСвойствоИЗначениеJSON(Запись, "activityCode", 		"001");
			ЗаписатьСвойствоИЗначениеJSON(Запись, "endDate", 			Формат(МаршрутСсылка.Дата, "ДФ=yyyyMMdd"));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "endTime", 			Формат(МаршрутСсылка.Дата, "ДФ=HHmmss"));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "endTimeZone", 		ЧасовойПояс);
			Запись.ЗаписатьКонецОбъекта();
			
			Запись.ЗаписатьНачалоОбъекта();
			ЗаписатьСвойствоИЗначениеJSON(Запись, "activityCode", 		"002");
			ЗаписатьСвойствоИЗначениеJSON(Запись, "endDate", 			Формат(МаршрутСсылка.Дата, "ДФ=yyyyMMdd"));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "endTime", 			Формат(МаршрутСсылка.Дата + СмещениеВСекундах, "ДФ=HHmmss"));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "endTimeZone", 		ЧасовойПояс);
			Запись.ЗаписатьКонецОбъекта();
			
			Запись.ЗаписатьНачалоОбъекта();
			ЗаписатьСвойствоИЗначениеJSON(Запись, "activityCode", 		"003");
			ЗаписатьСвойствоИЗначениеJSON(Запись, "startDate", 			Формат(ВремяСборкиТранспортировки, "ДФ=yyyyMMdd"));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "startTime", 			Формат(ВремяСборкиТранспортировки, "ДФ=HHmmss"));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "startTimeZone", 		ЧасовойПояс);
			ЗаписатьСвойствоИЗначениеJSON(Запись, "endDate", 			Формат(ВремяСборкиТранспортировки, "ДФ=yyyyMMdd"));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "endTime", 			Формат(ВремяСборкиТранспортировки + СмещениеВМинутах, "ДФ=HHmmss"));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "endTimeZone", 		ЧасовойПояс);
			Запись.ЗаписатьКонецОбъекта();
			
			Запись.ЗаписатьНачалоОбъекта();
			ЗаписатьСвойствоИЗначениеJSON(Запись, "activityCode", 		"004");
			ЗаписатьСвойствоИЗначениеJSON(Запись, "endDate", 			Формат(ВремяОтгрузкиТранспортировки, "ДФ=yyyyMMdd"));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "endTime", 			Формат(ВремяОтгрузкиТранспортировки + (СмещениеВСекундах + СмещениеВМинутах), "ДФ=HHmmss"));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "endTimeZone", 		ЧасовойПояс);
			Запись.ЗаписатьКонецОбъекта();
			
		ИначеЕсли ИдентификаторОперации = "shipmentupdate_005_start" Тогда 
			
			Запись.ЗаписатьНачалоОбъекта();
			ЗаписатьСвойствоИЗначениеJSON(Запись, "activityCode", 		"005");
			ЗаписатьСвойствоИЗначениеJSON(Запись, "startDate", 			Формат(ВремяОтгрузкиТранспортировки, "ДФ=yyyyMMdd"));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "startTime", 			Формат(ВремяОтгрузкиТранспортировки, "ДФ=HHmmss"));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "startTimeZone", 		ЧасовойПояс);
			Запись.ЗаписатьКонецОбъекта();
			
		ИначеЕсли ИдентификаторОперации = "shipmentupdate_005_finish" Тогда 
			
			Запись.ЗаписатьНачалоОбъекта();
			ЗаписатьСвойствоИЗначениеJSON(Запись, "activityCode", 		"005");
			ЗаписатьСвойствоИЗначениеJSON(Запись, "endDate", 			Формат(МаршрутСсылка.ОкончаниеМаршрута, "ДФ=yyyyMMdd"));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "endTime", 			Формат(МаршрутСсылка.ОкончаниеМаршрута, "ДФ=HHmmss"));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "endTimeZone", 		ЧасовойПояс);
			Запись.ЗаписатьКонецОбъекта();
			
		ИначеЕсли ИдентификаторОперации = "shipmentupdate_005" И ЭтоВыкуп Тогда
			
			Запись.ЗаписатьНачалоОбъекта();
			ЗаписатьСвойствоИЗначениеJSON(Запись, "activityCode", 		"005");
			ЗаписатьСвойствоИЗначениеJSON(Запись, "startDate", 			Формат(ВремяСборкиТранспортировки, "ДФ=yyyyMMdd"));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "startTime", 			Формат(ВремяСборкиТранспортировки + (СмещениеВСекундах + СмещениеВМинутах + 1), "ДФ=HHmmss"));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "startTimeZone", 		ЧасовойПояс);
			ЗаписатьСвойствоИЗначениеJSON(Запись, "endDate", 			Формат(ВремяСборкиТранспортировки, "ДФ=yyyyMMdd"));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "endTime", 			Формат(ВремяСборкиТранспортировки + (СмещениеВСекундах + СмещениеВМинутах + 2), "ДФ=HHmmss"));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "endTimeZone", 		ЧасовойПояс);
			Запись.ЗаписатьКонецОбъекта();
			
		Иначе
			
			Запись.ЗаписатьНачалоОбъекта();
			ЗаписатьСвойствоИЗначениеJSON(Запись, "activityCode", 		"005");
			ЗаписатьСвойствоИЗначениеJSON(Запись, "startDate", 			Формат(ВремяОтгрузкиТранспортировки, "ДФ=yyyyMMdd"));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "startTime", 			Формат(ВремяОтгрузкиТранспортировки + 28800, "ДФ=HHmmss"));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "startTimeZone", 		ЧасовойПояс);
			Запись.ЗаписатьКонецОбъекта();
			
		КонецЕсли;
	
		Запись.ЗаписатьКонецМассива();
	
	Запись.ЗаписатьКонецОбъекта();
	
	Возврат Запись.Закрыть();
	
КонецФункции
 
Функция СформироватьТелоЗапросаДляПодтвержденияПоставки(ДокументСсылка, ДокументПодтверждения, ТипОперации)
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ТипПоставки = "7";
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтгрузкаТоваровУслуг") Тогда 
		ТипПоставки = "J";
	Иначе
		ТипПоставки = "T";
	КонецЕсли;
	
	Если ТипПоставки = "J" Тогда
		ТипДействия = "PIC";
	Иначе
		ТипДействия = "POS";
	КонецЕсли;
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	
	Запись.ЗаписатьНачалоОбъекта();
	
	ЗаписатьСвойствоИЗначениеJSON(Запись, "plant",         СвойстваПартнера.КодДистрибьютора);
	ЗаписатьСвойствоИЗначениеJSON(Запись, "ordnum",        ОбщиеФункции.ВернутьЗначениеСвойстваОбъекта(ДокументСсылка, СвойстваПартнера.Свойство_НомерВходящегоДокумента));
	ЗаписатьСвойствоИЗначениеJSON(Запись, "action",        ТипДействия);
	ЗаписатьСвойствоИЗначениеJSON(Запись, "orddtpick",     Формат(ДокументПодтверждения.Дата, "ДФ=yyyyMMdd"));
	ЗаписатьСвойствоИЗначениеJSON(Запись, "ordtyptxt",     ТипПоставки);
	ЗаписатьСвойствоИЗначениеJSON(Запись, "interfaceName", "pickingconfirmation");
	
	Запись.ЗаписатьИмяСвойства("shipOrderDetails");
	
	Запись.ЗаписатьНачалоМассива();
	
	Если ТипПоставки <> "J" Тогда
	
		ДокументПодтвержденияТовары = ДокументПодтверждения.Товары;
				
		ЭтоПустыеБаллоны = Истина;
		
		Если ТаблицаНоменклатурыУглекислоты = Неопределено Тогда
			СформироватьТаблицуНоменклатурыУглекислота();
		КонецЕсли; 
		
		Для Каждого СтрТабУглекислота Из ТаблицаНоменклатурыУглекислоты цикл
			Если ДокументПодтвержденияТовары.Найти(СтрТабУглекислота.Номенклатура, "Номенклатура") <> Неопределено Тогда
				ЭтоПустыеБаллоны = Ложь;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		Для каждого СтрТабЧасть Из ДокументСсылка.Товары Цикл
			
			Если СтрТабЧасть.ИдСтрокиПоклажедателя = "" Тогда
				Сообщить(СтрШаблон("ВНИМАНИЕ!!! В строке %1 документа '%2' не указан ид строки поклажедателя", СтрТабЧасть.НомерСтроки, ДокументСсылка), СтатусСообщения.ОченьВажное);
				Возврат Неопределено;	
			КонецЕсли; 
			
			Если СтрТабЧасть.Номенклатура = СвойстваПартнера.Баллон И НЕ ЭтоПустыеБаллоны И УчетСерийныхНомеровПоБаллонам Тогда	
				Продолжить;
			КонецЕсли;
		
			Запись.ЗаписатьНачалоОбъекта();
			
			ЗаписатьСвойствоИЗначениеJSON(Запись, "linenum",    СтрТабЧасть.ИдСтрокиПоклажедателя);
			ЗаписатьСвойствоИЗначениеJSON(Запись, "itemnum",    СтрТабЧасть.Номенклатура.Артикул);
			
			Если СтрТабЧасть.Номенклатура = СвойстваПартнера.Баллон И ЭтоПустыеБаллоны И УчетСерийныхНомеровПоБаллонам Тогда
				ПолноеИмяТЧ = "";
				
				Если ТипЗнч(ДокументПодтверждения) = Тип("ДокументСсылка.ИнвентаризацияДоставкиСводная") Тогда
					ПолноеИмяТЧ = СформироватьПолноеИмяТЧ(Документы.ВозвратТоваровОтПокупателя.ПустаяСсылка(), "Товары");
					_ДокументПодтверждения = ПолучитьДокументыПодтвержденияПоБаллонамИзЧекина(ДокументПодтверждения);
				Иначе
					ПолноеИмяТЧ = СформироватьПолноеИмяТЧ(ДокументПодтверждения, "Товары");
					_ДокументПодтверждения = ДокументПодтверждения;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ПолноеИмяТЧ) Тогда
					ДобавитьСведенияОСерияхНаБаллоны(Запись, ПолучитьСерииБаллонов(_ДокументПодтверждения, ПолноеИмяТЧ, "СерияНоменклатуры"));
				КонецЕсли;
								
			КонецЕсли;
			
				Запись.ЗаписатьИмяСвойства("shipOrderStock");
				Запись.ЗаписатьНачалоОбъекта();
					ЗаписатьСвойствоИЗначениеJSON(Запись, "ordqty",     Формат(СтрТабЧасть.Количество, "ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьСвойствоИЗначениеJSON(Запись, "orduom",     ОпределитьЕдиницуИзмеренияПепси(СтрТабЧасть.ЕдиницаИзмерения, СтрТабЧасть.Номенклатура));
					ЗаписатьСвойствоИЗначениеJSON(Запись, "lot",        ?(ЗначениеЗаполнено(СтрТабЧасть.СерияНоменклатуры), СтрТабЧасть.СерияНоменклатуры.НомерПартииПоставщика, СвойстваПартнера.НомерВиртуальнойПартии)); 
				Запись.ЗаписатьКонецОбъекта();
			
			Запись.ЗаписатьКонецОбъекта();
			
			СтрокиПодтверждения = ДокументПодтвержденияТовары.НайтиСтроки(Новый Структура("Номенклатура", СтрТабЧасть.Номенклатура));
			
			КоличествоФакт = 0;
			
			Для каждого СтрПодтверждение Из СтрокиПодтверждения Цикл
				КоличествоФакт = КоличествоФакт + (СтрПодтверждение.Количество * СтрПодтверждение.Коэффициент / СтрТабЧасть.Коэффициент);
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		СделкаТовары = ДокументСсылка.Сделка.Товары;
		
		СерииОтбора = ПолучитьСерииОтбора(ДокументПодтверждения);
		
		Для каждого СтрТабЧасть Из СерииОтбора Цикл
			
			///Антропов Е.П. от 01.03.2023 №000000204
			//СтрТабОснование = СделкаТовары.Найти(СтрТабЧасть.Номенклатура, "Номенклатура");
			Если ЗначениеЗаполнено(СтрТабЧасть.ИдСтрокиПоклажедателя) Тогда
				СтрТабОснование = СделкаТовары.Найти(СтрТабЧасть.ИдСтрокиПоклажедателя, "ИдСтрокиПоклажедателя"); 
			Иначе
				СтрТабОснование = СделкаТовары.Найти(СтрТабЧасть.Номенклатура, "Номенклатура"); 
			КонецЕсли;
			///Антропов Е.П. от 01.03.2023 №000000204
			
			Если СтрТабОснование = Неопределено Тогда
				Сообщить(ОбщиеФункции._СтрШаблон_("В документе '%1' не удалось найти товар '%2', который есть в отборе '%3'. Строка будет пропущена",
					ДокументСсылка, СтрТабЧасть.Номенклатура, ДокументПодтверждения));
				Продолжить;
			КонецЕсли; 
			
			Если СтрТабОснование.ИдСтрокиПоклажедателя = "" Тогда
				Возврат Неопределено;	
			КонецЕсли; 
		
			Запись.ЗаписатьНачалоОбъекта();
			
			ЗаписатьСвойствоИЗначениеJSON(Запись, "linenum",    СтрТабОснование.ИдСтрокиПоклажедателя);
			ЗаписатьСвойствоИЗначениеJSON(Запись, "itemnum",    СтрТабЧасть.Номенклатура.Артикул);
			
			Если СтрТабЧасть.Номенклатура = СвойстваПартнера.Баллон И УчетСерийныхНомеровПоБаллонам Тогда
				ПолноеИмяТЧ = СформироватьПолноеИмяТЧ(ДокументПодтверждения, "СерииОтбора");
				ДобавитьСведенияОСерияхНаБаллоны(Запись, ПолучитьСерииБаллонов(ДокументПодтверждения, ПолноеИмяТЧ, "СерияНоменклатурыОтбора"));
			КонецЕсли; 
			
			//Если СтрТабЧасть.КоличествоПлан < СтрТабЧасть.КоличествоФакт Тогда
				СтрокаЛистОтбора = ДокументПодтверждения.ЛистОтбора.Найти(СтрТабЧасть.Номенклатура, "Номенклатура");
				КодПричиныНеполнойКомплектации = СвойстваПартнера.ОсновнойКодПричиныНеполнойКомплектации;
				Если СтрокаЛистОтбора <> Неопределено И ЗначениеЗаполнено(СтрокаЛистОтбора.ПричинаНедобора) Тогда
					КодПричиныНеполнойКомплектации = ОбщиеФункции.ВернутьЗначениеСвойстваОбъекта(СтрокаЛистОтбора.ПричинаНедобора,
					СвойстваПартнера.Свойство_КодПричиныНеполнойКомплектацииПепси);
					Если НЕ ЗначениеЗаполнено(КодПричиныНеполнойКомплектации) Тогда
						ВызватьИсключение ОбщиеФункции._СтрШаблон_("Для причины недобора '%1' не установлен код недопоставки Пепси в регистре сведений 'Значения свойств объектов', свойство: Код причины неполной комплектации Пепси (3PL)",
							СтрокаЛистОтбора.ПричинаНедобора);
					КонецЕсли; 
					ЗаписатьСвойствоИЗначениеJSON(Запись, "udreason", КодПричиныНеполнойКомплектации);
				КонецЕсли;
				
			//КонецЕсли;
			
				Запись.ЗаписатьИмяСвойства("shipOrderStock");
				Запись.ЗаписатьНачалоОбъекта();
					ЗаписатьСвойствоИЗначениеJSON(Запись, "ordqty",     Формат(СтрТабЧасть.КоличествоФакт, "ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьСвойствоИЗначениеJSON(Запись, "orduom",     ОпределитьЕдиницуИзмеренияПепси(СтрТабЧасть.Номенклатура.ЕдиницаХраненияОстатков, СтрТабЧасть.Номенклатура));
					ЗаписатьСвойствоИЗначениеJSON(Запись, "lot",        СтрТабЧасть.НомерПартииПоставщика); 
				Запись.ЗаписатьКонецОбъекта();
			
			Запись.ЗаписатьКонецОбъекта();
		
		КонецЦикла;
			
	КонецЕсли;  
	
	Запись.ЗаписатьКонецМассива();
	
	Запись.ЗаписатьКонецОбъекта();

	Возврат Запись.Закрыть();
	
КонецФункции

///Антропов Е.П. от 14.10.2024 УЗ №000000452
Функция ЕстьПомарочныйУчет(ДокументСсылка, ИмяДокумента = "ОтгрузкаТоваровУслуг")
	ЕстьПУ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.Текст =  	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьПУ
	|ИЗ
	|	Документ."+ИмяДокумента+".Товары КАК ОТУ_Товары
	|ГДЕ
	|	ОТУ_Товары.Ссылка = &ДокументСсылка
	|	И ОТУ_Товары.Номенклатура.ЭтоМаркировочнаяПродукция
	|	И ОТУ_Товары.Номенклатура.типТовара_ЧЗ = ЗНАЧЕНИЕ(Перечисление.типТовара_ЧЗ.УпакованнаяВода)"; 
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		ЕстьПУ = Истина;
	КонецЕсли;	
	
	Возврат ЕстьПУ;
КонецФункции
///Антропов Е.П. от 14.10.2024 УЗ №000000452

#КонецОбласти

#Область ТРАНСПОРТИРОВКИ

Функция ОпределитьДокументыДляТранспортировки(ТаблицаДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	т.ДокументСсылка,
	|	т.НомерТранспортировки,
	|	т.НомерВходящегоДокумента
	|ПОМЕСТИТЬ втДокументыДляТранспортировки
	|ИЗ
	|	&ТаблицаДанных КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	влЗапрос.ДокументСсылка,
	|	влЗапрос.НомерТранспортировки,
	|	влЗапрос.НомерВходящегоДокумента,
	|	СоставМаршрута.Ссылка КАК МаршрутЭкспедитора
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕСТЬNULL(СвойстваДокументов.Объект, НЕОПРЕДЕЛЕНО) КАК ДокументСсылка,
	|		ДокументыДляТранспортировки.НомерТранспортировки КАК НомерТранспортировки,
	|		ДокументыДляТранспортировки.НомерВходящегоДокумента КАК НомерВходящегоДокумента
	|	ИЗ
	|		втДокументыДляТранспортировки КАК ДокументыДляТранспортировки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваДокументов
	|			ПО ДокументыДляТранспортировки.НомерВходящегоДокумента = СвойстваДокументов.Значение
	|				И (СвойстваДокументов.Свойство = &Свойство_НомерВходящегоДокумента)) КАК влЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутЭкспедитора.ДокументыОснования КАК СоставМаршрута
	|		ПО влЗапрос.ДокументСсылка = СоставМаршрута.ДокументОснование";
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	Запрос.УстановитьПараметр("Свойство_НомерВходящегоДокумента", СвойстваПартнера.Свойство_НомерВходящегоДокумента);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПреобразоватьДанныеПоТранспортировкамВТаблицуЗначений(Данные)
	
	ТабЗнач = СформироватьТаблицуДляЗагрузкиТранспортировок();
	
	Для каждого Элемент Из Данные Цикл
		
		НомерТранспортировки = Элемент.internalLoadNum;
		
		СоставТранспортировки = Элемент.shipmentDetails;
		
		Для каждого СтрТранспортировки Из СоставТранспортировки Цикл
			
			НовСтр = ТабЗнач.Добавить();
			НовСтр.НомерТранспортировки = НомерТранспортировки;
			НовСтр.НомерВходящегоДокумента = УдалитьЛидирущиеНулиИзКодаТовара(СтрТранспортировки.shipmentId);
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	Возврат ТабЗнач;
	
КонецФункции

Функция ПреобразоватьДанныеПоТранспортировкамИзФайлаВТаблицуЗначений(Данные)
	
	ТабЗнач = СформироватьТаблицуДляЗагрузкиТранспортировок();
	
	Для каждого Элемент Из Данные Цикл
		
		НомерТранспортировки = Элемент._Транспортировки;
		
		Пока СтрДлина(НомерТранспортировки) < 10 Цикл
			НомерТранспортировки = "0"+НомерТранспортировки;
		КонецЦикла; 
				
		НовСтр = ТабЗнач.Добавить();
		НовСтр.НомерТранспортировки = НомерТранспортировки;
		НовСтр.НомерВходящегоДокумента = УдалитьЛидирущиеНулиИзКодаТовара(Элемент.Поставка);
		
	КонецЦикла; 
	
	Возврат ТабЗнач;
	
КонецФункции

Функция СформироватьТаблицуДляЗагрузкиТранспортировок()
	
	ТабЗнач = Новый ТаблицаЗначений;
	ТабЗнач.Колонки.Добавить("ДокументСсылка",          Новый ОписаниеТипов("ДокументСсылка.ОтгрузкаТоваровУслуг"));
	ТабЗнач.Колонки.Добавить("НомерТранспортировки",    Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36)));
	ТабЗнач.Колонки.Добавить("НомерВходящегоДокумента", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36)));
	
	Возврат ТабЗнач;
	
КонецФункции
 
Процедура ЗагрузитьНомераТранспортировокИзФайла(Данные) Экспорт
	ЗаполнитьНомераТранспортировок(ОпределитьДокументыДляТранспортировки(ПреобразоватьДанныеПоТранспортировкамИзФайлаВТаблицуЗначений(Данные)));		
КонецПроцедуры
 
#КонецОбласти 

#Область ДОКУМЕНТЫ

Процедура ОбновитьВыкупСХранения(ДляЗаполнения)
	
	
	
КонецПроцедуры
 
Процедура СоздатьИнвентаризациюДоставкиСводную(ДляЗаполнения)
	
	Если ДляЗаполнения.Свойство("ОшибкиВыполнения") = Ложь Тогда
		ВызватьИсключение "Не найдено обязательное свойство 'ОшибкиВыполнения'";
	ИначеЕсли ЗначениеЗаполнено(ДляЗаполнения.ОшибкиВыполнения) И ТипЗнч(ДляЗаполнения.ОшибкиВыполнения) <> Тип("Массив") Тогда
		ВызватьИсключение "Свойство 'ОшибкиВыполнения' должно быть массивом";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДляЗаполнения.ОшибкиВыполнения) Тогда
		ТекстСообщения = "";
		Для каждого Элемент Из ДляЗаполнения.ОшибкиВыполнения Цикл
			ТекстСообщения = ТекстСообщения + Элемент + Символы.ПС;
		КонецЦикла; 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ТаблицаДокументовОтгрузки = НайтиДокументыТранспортировки(ДляЗаполнения.НомерТранспортировки);
	
	ДатаЭкспедиции = Дата(1,1,1);
	
	Если ЗначениеЗаполнено(ТаблицаДокументовОтгрузки) Тогда
		ДатаЭкспедиции = ТаблицаДокументовОтгрузки.Получить(0).ДатаЭкспедиции;
	Иначе
		ВызватьИсключение ОбщиеФункции._СтрШаблон_("Не удалось найти документы отгрузки по транспортировке №%1", ДляЗаполнения.НомерТранспортировки);
	КонецЕсли; 
	
	СведенияОВычерках = ПолучитьСведенияОВычерках(ТаблицаДокументовОтгрузки.ВыгрузитьКолонку("ДокументОтгрузки"));
	
	ТаблицаВычерков = СведенияОВычерках.ТаблицаВычерков;
	
	ДокументОбъект = Документы.ИнвентаризацияДоставкиСводная.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ДляЗаполнения);
	
	ДокументОбъект.ДатаЭкспедиции = ДатаЭкспедиции;
	ДокументОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
	ДокументОбъект.Комментарий = ОбщиеФункции._СтрШаблон_("Инвентаризация доставки по транпортировке №%1", ДляЗаполнения.НомерТранспортировки);
	
	СтруктураОтбора = Новый Структура("Номенклатура, Качество");
	
	Для каждого СтрТаб Из ДляЗаполнения.Товары Цикл
		
		НовСтр = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтрТаб);
		
		НовСтр.Отгружено = СтрТаб.Количество;
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрТаб);
		
		ВычеркиПоНоменклатуре = ТаблицаВычерков.НайтиСтроки(СтруктураОтбора);
		
		НовСтр.Количество = 0;
		
		Для каждого ЭлМассива Из ВычеркиПоНоменклатуре Цикл
			Если СтрТаб.ЕдиницаИзмерения <> ЭлМассива.ЕдиницаИзмерения Тогда
				
				КоэффициентВходящий = СтрТаб.ЕдиницаИзмерения.Коэффициент;
				КоэффициентТекущий = ЭлМассива.ЕдиницаИзмерения.Коэффициент;
				
				Если КоэффициентВходящий > КоэффициентТекущий Тогда
					ЭлМассива.Количество = ЭлМассива.Количество / КоэффициентВходящий;
				ИначеЕсли КоэффициентВходящий < КоэффициентТекущий Тогда 
					ЭлМассива.Количество = ЭлМассива.Количество * КоэффициентТекущий;
				КонецЕсли; 
				
			КонецЕсли; 
			
			НовСтр.Количество = НовСтр.Количество + ЭлМассива.Количество;
			
		КонецЦикла;
		
		НовСтр.Передано = НовСтр.Отгружено - НовСтр.Количество;
		
	КонецЦикла;
	
	ДокументОбъект.ДокументыОтгрузки.Загрузить(ТаблицаДокументовОтгрузки);
	
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	
	ДокументОбъект.УстановитьНовыйНомер();
	
	ДокументОбъект.Записать();
	
	ОбщиеФункции.УстановитьЗначениеСвойства(Новый Структура("Объект, Свойство, Значение", ДокументОбъект.Ссылка, СвойстваПартнера.Свойство_НомерТранспортировки, ДляЗаполнения.НомерТранспортировки));
	
	ОбщиеФункции.УстановитьЗначениеСвойства(Новый Структура("Объект, Свойство, Значение", ДокументОбъект.Ссылка, СвойстваПартнера.Свойство_НомерВходящегоДокумента, ДляЗаполнения.НомерВходящегоДокумента));
	
	СтатусЗаявки = Справочники.СтатусыЗаявок.Принята;
	
	ОшибкиВыполнения = "";
	
	Если ЗначениеЗаполнено(СведенияОВычерках.ТаблицаДокументовБезИнвентаризацииДоставки) Тогда
		СтатусЗаявки = Справочники.СтатусыЗаявок.Черновик;
		ОшибкиВыполнения = "Документ отгрузки без инвентаризации доставки:
		|";
		Для каждого СтрТаб Из СведенияОВычерках.ТаблицаДокументовБезИнвентаризацииДоставки Цикл
			ОшибкиВыполнения = ОшибкиВыполнения + СтрТаб.ДокументОтгрузки + Символы.ПС;
		КонецЦикла; 
	КонецЕсли; 

	///Антропов Е.П. от 14.10.2024 УЗ №000000452
	СделатьЗаписьВЖРСЗНОО = Истина;
	Если СвойстваПартнера.Свойство("ОжидатьПодтвержденияUtraceПоПУ") И СвойстваПартнера.ОжидатьПодтвержденияUtraceПоПУ Тогда 
		ЕстьПУ = ЕстьПомарочныйУчет(ДокументОбъект.Ссылка, "ИнвентаризацияДоставкиСводная");
		Если ЕстьПУ Тогда 
			
			СтруктураЗаписи = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьСтруктуруЗаписи();
			СтруктураЗаписи.Объект                           = ДокументОбъект.Ссылка;
			СтруктураЗаписи.Источник                         = Приемник_Utrace;
			СтруктураЗаписи.Приемник                         = Источник_Utrace;
			СтруктураЗаписи.Статус                           = Справочники.СтатусыЗаявок.Новая;
			СтруктураЗаписи.Идентификатор                    = "";
			СтруктураЗаписи.ДатаЗаписи                       = ТекущаяДатаСеанса();
			СтруктураЗаписи.ДатаВремяПолученияЗаявкиСервисом = ТекущаяДатаСеанса();
			СтруктураЗаписи.ОшибкиВыполнения                 = "";
			
			РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДобавитьЗапись(СтруктураЗаписи);
			
			СделатьЗаписьВЖРСЗНОО = Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	Если СделатьЗаписьВЖРСЗНОО Тогда 
	///Антропов Е.П. от 14.10.2024 УЗ №000000452
	
		СтруктураЗаписи = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьСтруктуруЗаписи();
		СтруктураЗаписи.Объект                           = ДокументОбъект.Ссылка;
		СтруктураЗаписи.Источник                         = Строка(Партнер);
		СтруктураЗаписи.Приемник                         = "1С";
		СтруктураЗаписи.Статус                           = СтатусЗаявки;
		СтруктураЗаписи.Идентификатор                    = "#ПодтверждениеДоставки";
		СтруктураЗаписи.ДатаЗаписи                       = ТекущаяДатаСеанса();
		СтруктураЗаписи.ДатаВремяПолученияЗаявкиСервисом = ТекущаяДатаСеанса();
		СтруктураЗаписи.ОшибкиВыполнения                 = ОшибкиВыполнения;
		
		РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДобавитьЗапись(СтруктураЗаписи);
		
	КонецЕсли; 	///Антропов Е.П. от 14.10.2024 УЗ №000000452
	
КонецПроцедуры

Функция ПолучитьСведенияОВычерках(МассивДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОтгрузкаТоваровУслуг.Ссылка КАК ДокументОтгрузки,
	|	ИнвДост.Ссылка КАК ИнвентаризацияДоставки
	|ПОМЕСТИТЬ втДокументыОтгрузки
	|ИЗ
	|	Документ.ОтгрузкаТоваровУслуг КАК ОтгрузкаТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияДоставки КАК ИнвДост
	|		ПО ОтгрузкаТоваровУслуг.Ссылка = ИнвДост.ДокументОтгрузки
	|ГДЕ
	|	ОтгрузкаТоваровУслуг.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДО.ДокументОтгрузки
	|ИЗ
	|	втДокументыОтгрузки КАК ДО
	|ГДЕ
	|	ДО.ИнвентаризацияДоставки ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вычерки.Номенклатура,
	|	Вычерки.Качество,
	|	Вычерки.ЕдиницаИзмерения,
	|	Вычерки.Коэффициент,
	|	СУММА(Вычерки.Количество - Вычерки.Передано) КАК Количество
	|ИЗ
	|	Документ.ИнвентаризацияДоставки.Товары КАК Вычерки
	|ГДЕ
	|	Вычерки.Ссылка В
	|			(ВЫБРАТЬ
	|				ДО.ИнвентаризацияДоставки
	|			ИЗ
	|				втДокументыОтгрузки КАК ДО)
	|	И Вычерки.Количество <> Вычерки.Передано
	|
	|СГРУППИРОВАТЬ ПО
	|	Вычерки.Номенклатура,
	|	Вычерки.Качество,
	|	Вычерки.ЕдиницаИзмерения,
	|	Вычерки.Коэффициент";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов); 
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ТаблицаДокументовБезИнвентаризацииДоставки", Результат.Получить(1).Выгрузить());
	СтруктураВозврата.Вставить("ТаблицаВычерков", Результат.Получить(2).Выгрузить());
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция НайтиДокументыТранспортировки(НомерТранспортировки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	влЗапрос.ДокументОтгрузки,
	|	МАКСИМУМ(СоставМаршрута.Ссылка) КАК Маршрут,
	|	МАКСИМУМ(СоставМаршрута.Ссылка.ДатаЭкспедиции) КАК ДатаЭкспедиции
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗначенияСвойствОбъектов.Объект КАК ДокументОтгрузки
	|	ИЗ
	|		РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|	ГДЕ
	|		ЗначенияСвойствОбъектов.Свойство = &Свойство
	|		И ЗначенияСвойствОбъектов.Значение = &Значение) КАК влЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутЭкспедитора.ДокументыОснования КАК СоставМаршрута
	|		ПО влЗапрос.ДокументОтгрузки = СоставМаршрута.ДокументОснование
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(влЗапрос.ДокументОтгрузки) В (ТИП(Документ.ОтгрузкаТоваровУслуг), ТИП(Документ.ВозвратТоваровОтПокупателя))
	|
	|СГРУППИРОВАТЬ ПО
	|	влЗапрос.ДокументОтгрузки";
	
	Запрос.УстановитьПараметр("Свойство", СвойстваПартнера.Свойство_НомерТранспортировки);
	Запрос.УстановитьПараметр("Значение", НомерТранспортировки); 
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
 
Функция ВыбратьСериюНоменклатуры(Владелец, ДатаПроизводства, НомерПартии)
		
	Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(ДатаПроизводства) Тогда
		Возврат Серия; 
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Владелец = &Владелец
	|	И СерииНоменклатуры.ДатаПроизводства = &ДатаПроизводства
	|	И СерииНоменклатуры.НомерПартииПоставщика = &НомерПартии
	|	И СерииНоменклатуры.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("НомерПартии", НомерПартии); 
	Запрос.УстановитьПараметр("ДатаПроизводства", ДатаПроизводства);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Серия = Выборка.Ссылка;
	КонецЕсли; 
	
	Возврат Серия;
	
КонецФункции

Функция ОпределитьТребуемыеДействияПоРаботеСДокументами(ТаблицаДанных)
	
	ТаблицаДанных.Колонки.Добавить("ТребуемоеДействие", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("ДокументСсылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	т.НомерВходящегоДокумента
	|ПОМЕСТИТЬ втДокументы
	|ИЗ
	|	&ТаблицаДанных КАК т;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.НомерВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА СвойстваДокументов.Объект ЕСТЬ NULL
	|			ТОГДА ""Добавление""
	|		ИНАЧЕ ""Обновление""
	|	КОНЕЦ КАК ТребуемоеДействие,
	|   СвойстваДокументов.Объект КАК ДокументСсылка 
	|ИЗ
	|	втДокументы КАК Документы
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваДокументов
	|	ПО Документы.НомерВходящегоДокумента = СвойстваДокументов.Значение
	|		И СвойстваДокументов.Свойство = &Свойство_НомерВходящегоДокумента";
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	Запрос.УстановитьПараметр("Свойство_НомерВходящегоДокумента", СвойстваПартнера.Свойство_НомерВходящегоДокумента);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрТаб Из ТаблицаДанных Цикл
		
		СтрокаРезультатаЗапроса = РезультатЗапроса.Найти(СтрТаб.НомерВходящегоДокумента, "НомерВходящегоДокумента");
		
		Если СтрокаРезультатаЗапроса <> Неопределено Тогда
			СтрТаб.ТребуемоеДействие = СтрокаРезультатаЗапроса.ТребуемоеДействие;
			СтрТаб.ДокументСсылка    = СтрокаРезультатаЗапроса.ДокументСсылка;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПреобразоватьДанныеПоДокументамВТаблицуЗначений(Данные)
	
	ТабЗнач = СформироватьТаблицуДляЗагрузкиДанныхПоДокументам();
	
	НомерПоставки = "";
	
	Если СвойстваПартнера.Свойство("ЗагрузитьПоставкуСНомером") И ЗначениеЗаполнено(СвойстваПартнера.ЗагрузитьПоставкуСНомером) Тогда		
		НомерПоставки = СвойстваПартнера.ЗагрузитьПоставкуСНомером;
		//Сообщить("Получение поставки по номеру " + НомерПоставки);
		МассивНомеровПоставок = ОбщиеФункции.РазложитьСтрокуВМассив(НомерПоставки, ";");
	КонецЕсли;
	
	Если ТаблицаСкладовПоклажедателей = Неопределено Тогда
		СформироватьТаблицуСкладовПоклажедателей();
	КонецЕсли; 
	
	Для каждого Элемент Из Данные Цикл
		
		Если ЗначениеЗаполнено(НомерПоставки) И МассивНомеровПоставок.Найти(Элемент.ordNum) = Неопределено Тогда
			Продолжить;			
		КонецЕсли;
		
		Если Элемент.ordTypTxt = "T"
			И Элемент.ordTyp2Txt = "ZLR"
			И Элемент.soTyp <> "ZRE3" Тогда
			Сообщить(ОбщиеФункции._СтрШаблон_("Возврат №%1 будет пропущен по причине: вид возврата не равен ZRE3", Элемент.ordNum));
			Продолжить;
		КонецЕсли;
		
		Если ТабЗнач.Найти(Элемент.ordNum, "НомерВходящегоДокумента") <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
	
		НовСтр = ТабЗнач.Добавить();
		НовСтр.НомерВходящегоДокумента         = Элемент.ordNum;
		НовСтр.ДатаВходящегоДокумента          = ПрочитатьДату(Элемент.timestamp, ФорматДатыJSON.ISO);
		НовСтр.ДатаПоступления                 = ПрочитатьДату(Элемент.ordDtDelv, "yyyyMMdd");
		НовСтр.ТипДокумента                    = Элемент.ordTypTxt;
		НовСтр.ВидОперации                     = Элемент.ordTyp2Txt;
		НовСтр.Организация                     = СвойстваПартнера.ОсновнаяОрганизация;
		НовСтр.Склад                           = СвойстваПартнера.Склад;
		НовСтр.СтруктурнаяЕдиницаКонтрагента   = ОбщиеФункции.ВернутьОбъектПоЗначениюСвойства(СвойстваПартнера.Свойство_КодГрузополучателя, Элемент.cusId);
		Если НЕ ЗначениеЗаполнено(НовСтр.СтруктурнаяЕдиницаКонтрагента) Тогда
			
			Для Сч=1 По СтрДлина(Элемент.cusId) Цикл
				Если НЕ Сред(Элемент.cusId, Сч, 1) = "0" Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла;
		
			НовСтр.СтруктурнаяЕдиницаКонтрагента   = ОбщиеФункции.ВернутьОбъектПоЗначениюСвойства(СвойстваПартнера.Свойство_КодГрузополучателя, 
				Сред(Элемент.cusId, Сч));
			
		КонецЕсли; 
		НовСтр.Контрагент                      = ?(Элемент.ordTypTxt = "7", СвойстваПартнера.ОсновнойПоставщик, НовСтр.СтруктурнаяЕдиницаКонтрагента.Владелец);
		НовСтр.ДоговорКонтрагента              = ?(Элемент.ordTypTxt = "7", СвойстваПартнера.ОсновнойДоговорПриемаНаХранение, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		НовСтр.ТипЦен                          = ?(Элемент.ordTypTxt = "7", СвойстваПартнера.ОсновнойТипЦенКонтрагента, СвойстваПартнера.ОсновнойТипЦенНоменклатуры);
		НовСтр.Подразделение                   = СвойстваПартнера.ОсновноеПодразделение;
		НовСтр.Автор                           = ПараметрыСеанса.ТекущийПользователь;
		НовСтр.Ответственный                   = ПолучитьОтветственного(НовСтр.Контрагент, НовСтр.СтруктурнаяЕдиницаКонтрагента, НовСтр.Подразделение, (НовСтр.ТипДокумента = "J"));
		НовСтр.ВидПоставки                     = ?(Элемент.shipSeq = "RD", СвойстваПартнера.ВидПоставки_Самовывоз, СвойстваПартнера.ОсновнойВидПоставки);
		НовСтр.СпособРасчетов                  = СвойстваПартнера.ОсновнойСпособРасчетов;
		НовСтр.СрокКредитования                = СвойстваПартнера.ОсновнойСрокКредитования;
		НовСтр.ДатаПоставки                    = ПрочитатьДату(Элемент.ordDtDelv, "yyyyMMdd");
		НовСтр.ДатаОтгрузки                    = НовСтр.ДатаПоставки;
		НовСтр.НаименованиеДоговораОтветХранения = СвойстваПартнера.НаименованиеДоговораОтветХранения;
		НовСтр.НомерТранспортировки            = Элемент.returnShip;
		НовСтр.НеВыгружатьВТранзит             = Ложь;
		НовСтр.НомерЗаказаГрузополучателя      = СокрЛП(Элемент.cusOrdNum);
		НовСтр.ГруппаДоставки                  = ОбщиеФункции.ВернутьЗначениеСвойстваОбъекта(НовСтр.СтруктурнаяЕдиницаКонтрагента, ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьСвойствоПоИмени("ГруппаДоставкиСОХ")); 			
		
		НовСтр.УтилизацияПепси                 = ?(Элемент.soTyp = "ZDOD", Истина, Ложь); ///Антропов Е.П. от 01.03.2023 №000000204
		
		Если НЕ ЗначениеЗаполнено(НовСтр.ГруппаДоставки) Тогда
			Если СвойстваПартнера.Свойство("ГородДоставки")
				И Найти(ВРЕГ(Элемент.city), ВРЕГ(СвойстваПартнера.ГородДоставки)) > 0 Тогда
				НовСтр.ГруппаДоставки = СвойстваПартнера.ГруппаДоставкиГород;
			Иначе
				НовСтр.ГруппаДоставки = СвойстваПартнера.ГруппаДоставкиОбласть;
			КонецЕсли;
		КонецЕсли; 
				
		Если ((НовСтр.ТипДокумента = "J") ИЛИ (НовСтр.ТипДокумента = "T" И НовСтр.ВидОперации <> "ZLOR")) 
			И НовСтр.СтруктурнаяЕдиницаКонтрагента.Пустая() Тогда
			НовСтр.ОшибкиВыполнения.Добавить(ОбщиеФункции._СтрШаблон_("Не удалось найти структурную единицу (%1 %2,%3) по коду: %4",
				Элемент.cusNam, Элемент.city, Элемент.street, Элемент.cusId));
		КонецЕсли;
			
		Если НовСтр.ТипДокумента = "T" И НовСтр.ВидОперации = "ZLR" Тогда
				
			НовСтр.МаршрутныйДокумент = ПолучитьМаршрутныйДокумент(НовСтр.НомерВходящегоДокумента, НовСтр.ДатаОтгрузки, Элемент.cusOrdNum, НовСтр.СтруктурнаяЕдиницаКонтрагента);
			
			Если НЕ ЗначениеЗаполнено(НовСтр.МаршрутныйДокумент) Тогда
				Сообщить(ОбщиеФункции._СтрШаблон_("К возврату от покупателя №%1 по адресу '%2 (%3)' не удалось подобрать маршрутный документ", 
					НовСтр.НомерВходящегоДокумента, НовСтр.СтруктурнаяЕдиницаКонтрагента.Владелец, НовСтр.СтруктурнаяЕдиницаКонтрагента), СтатусСообщения.Внимание);
			КонецЕсли; 
				
		КонецЕсли;
			
		СтрокаСоСкладомПоклажедателя = ТаблицаСкладовПоклажедателей.Найти(Элемент.storLocH, "Код");
		
		Если СтрокаСоСкладомПоклажедателя <> Неопределено Тогда
			КачествоЗапаса = СтрокаСоСкладомПоклажедателя.СсылкаНаОбъект;
		Иначе
			КачествоЗапаса = Справочники.Качество.Стандарт;
		КонецЕсли; 
		
		СоставДокумента = Элемент.orderDetails;
		
		ЕстьГазВПоставке = Ложь;
		ЕстьБаллоныВПоставке = Ложь;
		
		Для каждого СтрДок Из СоставДокумента Цикл
			
			Если НовСтр.ТипДокумента = "7" И НЕ ЗначениеЗаполнено(НовСтр.НомерТранспортировки) Тогда
				
				НовСтр.НомерТранспортировки = СтрДок.stoNum;
				
			КонецЕсли;
			
			Артикул = УдалитьЛидирущиеНулиИзКодаТовара(СтрДок.itemNum);
			
			СтрТоварПоклажедателя = ТаблицаТоваровПоклажедателя.Найти(Артикул, "Артикул");
			
			Если СтрТоварПоклажедателя = Неопределено Тогда
				НовСтр.ОшибкиВыполнения.Добавить(ОбщиеФункции._СтрШаблон_("Не найден товар с кодом '%1'", УдалитьЛидирущиеНулиИзКодаТовара(СтрДок.itemNum)));
				Продолжить;
			КонецЕсли;
			
			Если СвойстваПартнера.Свойство("Углекислота") Тогда
				ЕстьГазВПоставке = Найти(СвойстваПартнера.Углекислота, Артикул) > 0;
			КонецЕсли;
			//000000116
			ЕстьБаллоныВПоставке = (СтрТоварПоклажедателя.Ссылка = СвойстваПартнера.Баллон);
			
			СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
			
			СрокГодности = ПрочитатьДату(СтрДок.sled, "dd.MM.yyyy");
			
			Если ТипЗнч(СрокГодности) = Тип("Дата") И СрокГодности > Дата('39991231') Тогда
				СрокГодности = ОбщиеФункции.ДобавитьПериод(ПрочитатьДату(СтрДок.prodDate, "dd.MM.yyyy"), СтрТоварПоклажедателя.Ссылка.КоличествоПериодовГодности, СтрТоварПоклажедателя.Ссылка.ПериодГодности);
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(СтрДок.lot) Тогда
			// жесткое резервирование по партии
				СерияНоменклатуры = ВыбратьСериюНоменклатуры(СтрТоварПоклажедателя.Ссылка, ПрочитатьДату(СтрДок.prodDate, "dd.MM.yyyy"), СтрДок.lot);
				
				Если СерияНоменклатуры.Пустая() Тогда
					
					Попытка
						_3PLСервер.СоздатьСериюНоменклатуры(Новый Структура("Владелец, ДатаПроизводства, СрокГодности, НомерПартииПоставщика, Комментарий, Используется",
							СтрТоварПоклажедателя.Ссылка, ПрочитатьДату(СтрДок.prodDate, "dd.MM.yyyy"), СрокГодности, СтрДок.lot, ОбщиеФункции._СтрШаблон_("#%1. Создана обменом по договору 3PL", СвойстваПартнера.КодДистрибьютора), Истина), СерияНоменклатуры);
					Исключение
						 НовСтр.ОшибкиВыполнения.Добавить(ОбщиеФункции._СтрШаблон_("Не удалось создать серию по товару '%1' (Номер партии: %2) по причине:%3", 
						 	СтрТоварПоклажедателя.Ссылка, СтрДок.lot, ОписаниеОшибки()));
					КонецПопытки;
						
				КонецЕсли; 
				
			КонецЕсли;
			
			МинСрок = СтрЗаменить(СтрДок.fresMin, "%", "");
			
			Если ТаблицаТоваровПоклажедателя.Колонки.Найти(СтрДок.ordUom) = Неопределено Тогда
				ЕдиницаИзмерения = СтрТоварПоклажедателя.EA;
			Иначе
				ЕдиницаИзмерения = СтрТоварПоклажедателя[СтрДок.ordUom];
			КонецЕсли;
			
			СтруктураСтрокиДокумента = Новый Структура;
			
			СтруктураСтрокиДокумента.Вставить("Номенклатура", СтрТоварПоклажедателя.Ссылка);
				
			СтруктураСтрокиДокумента.Вставить("СерияНоменклатуры", СерияНоменклатуры);
			
			СтруктураСтрокиДокумента.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
				
			СтруктураСтрокиДокумента.Вставить("Коэффициент", СтруктураСтрокиДокумента.ЕдиницаИзмерения.Коэффициент);
			
			СтруктураСтрокиДокумента.Вставить("Количество", СтрДок.ordQty);
			
			СтруктураСтрокиДокумента.Вставить("Качество", КачествоЗапаса);
			
			СтруктураСтрокиДокумента.Вставить("ДоговорВладельца", СвойстваПартнера.ОсновнойДоговорПриемаНаХранение);
			
			СтруктураСтрокиДокумента.Вставить("МинСрокГодности", МинСрок);
			
			СтруктураСтрокиДокумента.Вставить("ИдСтрокиПоклажедателя", Формат(СтрДок.lineNum, "ЧГ=0"));
			
			СтруктураСтрокиДокумента.Вставить("СпособСписанияОстатка", Перечисления.СпособыСписанияОстаткаТоваров.Собственный);
			
			СтруктураСтрокиДокумента.Вставить("НомерПартииПоставщика", СтрДок.lot);
			
			НовСтр.Товары.Добавить(СтруктураСтрокиДокумента);
			
			Если ЕстьГазВПоставке И СвойстваПартнера.Свойство("Баллон") Тогда
				
				СтруктураСтрокиДокумента = Новый Структура;
				
				СтруктураСтрокиДокумента.Вставить("Номенклатура", СвойстваПартнера.Баллон);
				
				СтруктураСтрокиДокумента.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
				
				СтруктураСтрокиДокумента.Вставить("ЕдиницаИзмерения", СтруктураСтрокиДокумента.Номенклатура.ЕдиницаХраненияОстатков);
				
				СтруктураСтрокиДокумента.Вставить("Коэффициент", СтруктураСтрокиДокумента.ЕдиницаИзмерения.Коэффициент);
				
				СтруктураСтрокиДокумента.Вставить("Количество", СтрДок.ordQty);
				
				СтруктураСтрокиДокумента.Вставить("Качество", КачествоЗапаса);
				
				СтруктураСтрокиДокумента.Вставить("ДоговорВладельца", СвойстваПартнера.ОсновнойДоговорПриемаНаХранение);
				
				СтруктураСтрокиДокумента.Вставить("МинСрокГодности", "");
				
				СтруктураСтрокиДокумента.Вставить("ИдСтрокиПоклажедателя", Формат(СтрДок.lineNum + 10, "ЧГ=0"));
				
				СтруктураСтрокиДокумента.Вставить("СпособСписанияОстатка", Перечисления.СпособыСписанияОстаткаТоваров.Собственный);
				
				НовСтр.Товары.Добавить(СтруктураСтрокиДокумента);
				
				НовСтр.Склад = СвойстваПартнера.СкладБаллонов;
				
				НовСтр.ГруппаДоставки = СвойстваПартнера.ГруппаДоставкиБаллонов;
								
			КонецЕсли; 
			
		КонецЦикла; 
		
		///Антропов Е.П. от 27.11.2023 №000000116
		Если НовСтр.ТипДокумента = "T" И НовСтр.ВидОперации = "ZLR" Тогда
			ЕстьБаллоны = (ЕстьГазВПоставке Или ЕстьБаллоныВПоставке);
			
			Если ЕстьБаллоны Тогда 
				НовСтр.ДоговорВладельца = СвойстваПартнера.ОсновнойДоговорПриемаНаХранение;
				НовСтр.ГруппаДоставки   = Неопределено;
				НовСтр.ПричинаВозврата  = СвойстваПартнера.ПричинаВозвратаБаллонов;
				НовСтр.Склад            = СвойстваПартнера.СкладБаллонов;
			КонецЕсли;
		КонецЕсли;
		///Антропов Е.П. от 27.11.2023 №000000116
		
	КонецЦикла; 
	
	Возврат ТабЗнач
	
КонецФункции

Процедура СформироватьТаблицаТоваровПоклажедателя()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Артикул,
	|	Номенклатура.ЕдиницаЗакупок КАК EA,
	|	Номенклатура.ЕдиницаЗакупок2 КАК CS,
	|	Номенклатура.ЕдиницаЗакупок3 КАК PF
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В ИЕРАРХИИ (&ГруппаНоменклатуры)
	|	И Номенклатура.Артикул <> """"
	|	И НЕ Номенклатура.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", СвойстваПартнера.ГруппаНоменклатуры);
	
	ТаблицаТоваровПоклажедателя = Запрос.Выполнить().Выгрузить();
	
	ТаблицаТоваровПоклажедателя.Индексы.Добавить("Артикул, Ссылка");
	
КонецПроцедуры

Процедура ЗагрузитьПоставкиИзФайла(Данные, ТипыПоставок) экспорт
	
	СоздатьДокументы(ОпределитьТребуемыеДействияПоРаботеСДокументами(ПреобразоватьДанныеПоДокументамИзФайлаВТаблицуЗначений(Данные, ТипыПоставок)));
	
КонецПроцедуры

Функция ПреобразоватьДанныеПоДокументамИзФайлаВТаблицуЗначений(ДанныеДляЗагрузки, ТипыПоставок) Экспорт
	
	ТабЗнач = СформироватьТаблицуДляЗагрузкиДанныхПоДокументам();
	
	НомерПоставки = "";
	
	Если СвойстваПартнера.Свойство("ЗагрузитьПоставкуСНомером") И ЗначениеЗаполнено(СвойстваПартнера.ЗагрузитьПоставкуСНомером) Тогда		
		НомерПоставки = СвойстваПартнера.ЗагрузитьПоставкуСНомером;
		МассивНомеровПоставок = ОбщиеФункции.РазложитьСтрокуВМассив(НомерПоставки, ";");
		Сообщить("Получение поставки по номеру " + НомерПоставки);
	КонецЕсли;
	
	Если ТаблицаСкладовПоклажедателей = Неопределено Тогда
		СформироватьТаблицуСкладовПоклажедателей();
	КонецЕсли;
	
	Если ТаблицаТоваровПоклажедателя = Неопределено Тогда
		СформироватьТаблицаТоваровПоклажедателя();
	КонецЕсли; 
	
	Данные = ДанныеДляЗагрузки.Скопировать(, "Поставка, Д_ОтпускаМатериала, ПолучательМатериала, ИмяПолучателяМатериала, ГородПолучателяМатериала, УлицаПолучателяМатериала");
	Данные.Свернуть("Поставка, Д_ОтпускаМатериала, ПолучательМатериала, ИмяПолучателяМатериала, ГородПолучателяМатериала, УлицаПолучателяМатериала");
	
	Для каждого Элемент Из Данные Цикл
		
		Если ЗначениеЗаполнено(НомерПоставки) И МассивНомеровПоставок.Найти(Элемент.Поставка) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Элемент.Поставка = "" Тогда
			Продолжить;
		КонецЕсли; 
		
		ДлинаКодаПолучателя = 10;
		КодПолучателя = Элемент.ПолучательМатериала;
		
		Пока СтрДлина(КодПолучателя) < ДлинаКодаПолучателя Цикл
			КодПолучателя = "0"+КодПолучателя;
		КонецЦикла; 
		
		НовСтр = ТабЗнач.Добавить();
		НовСтр.НомерВходящегоДокумента         = Элемент.Поставка;
		НовСтр.ДатаВходящегоДокумента          = ТекущаяДатаСеанса();
		НовСтр.ДатаПоступления                 = Дата(Элемент.Д_ОтпускаМатериала + " 00:00:00");
		НовСтр.ТипДокумента                    = ТипыПоставок;
		НовСтр.ВидОперации                     = "";
		НовСтр.Организация                     = СвойстваПартнера.ОсновнаяОрганизация;
		НовСтр.Склад                           = СвойстваПартнера.Склад;
		НовСтр.СтруктурнаяЕдиницаКонтрагента   = ОбщиеФункции.ВернутьОбъектПоЗначениюСвойства(СвойстваПартнера.Свойство_КодГрузополучателя, КодПолучателя);
		НовСтр.Контрагент                      = ?(НовСтр.ТипДокумента = "7", СвойстваПартнера.ОсновнойПоставщик, НовСтр.СтруктурнаяЕдиницаКонтрагента.Владелец);
		НовСтр.ДоговорКонтрагента              = ?(НовСтр.ТипДокумента = "7", СвойстваПартнера.ОсновнойДоговорПриемаНаХранение, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		НовСтр.ТипЦен                          = ?(НовСтр.ТипДокумента = "7", СвойстваПартнера.ОсновнойТипЦенКонтрагента, СвойстваПартнера.ОсновнойТипЦенНоменклатуры);
		НовСтр.Подразделение                   = СвойстваПартнера.ОсновноеПодразделение;
		НовСтр.Автор                           = ПараметрыСеанса.ТекущийПользователь;
		НовСтр.Ответственный                   = ПолучитьОтветственного(НовСтр.Контрагент, НовСтр.СтруктурнаяЕдиницаКонтрагента, НовСтр.Подразделение, (НовСтр.ТипДокумента = "J"));
		НовСтр.ВидПоставки                     = СвойстваПартнера.ОсновнойВидПоставки;
		НовСтр.СпособРасчетов                  = СвойстваПартнера.ОсновнойСпособРасчетов;
		НовСтр.СрокКредитования                = СвойстваПартнера.ОсновнойСрокКредитования;
		НовСтр.ДатаПоставки                    = Дата(Элемент.Д_ОтпускаМатериала + " 00:00:00");
		НовСтр.ДатаОтгрузки                    = ОбщиеФункции.ДобавитьДень(НовСтр.ДатаПоставки, 1);
		НовСтр.НаименованиеДоговораОтветХранения = СвойстваПартнера.НаименованиеДоговораОтветХранения;
		НовСтр.НомерТранспортировки            = "";
		НовСтр.НеВыгружатьВТранзит             = Ложь;
		НовСтр.НомерЗаказаГрузополучателя      = "";
		
		Если ((НовСтр.ТипДокумента = "J") ИЛИ (НовСтр.ТипДокумента = "T" И НовСтр.ВидОперации <> "ZLOR")) 
			И НовСтр.СтруктурнаяЕдиницаКонтрагента.Пустая() Тогда
			НовСтр.ОшибкиВыполнения.Добавить(ОбщиеФункции._СтрШаблон_("Не удалось найти структурную единицу (%1 %2,%3) по коду: %4",
			Элемент.ИмяПолучателяМатериала, Элемент.ГородПолучателяМатериала, Элемент.УлицаПолучателяМатериала, Элемент.ПолучательМатериала));
		КонецЕсли;
		
		Если НовСтр.ТипДокумента = "T" И НовСтр.ВидОперации = "ZLR" Тогда
			
			НовСтр.МаршрутныйДокумент = ПолучитьМаршрутныйДокумент(НовСтр.НомерВходящегоДокумента, НовСтр.ДатаОтгрузки, Элемент.cusOrdNum, НовСтр.СтруктурнаяЕдиницаКонтрагента);
			
			Если НЕ ЗначениеЗаполнено(НовСтр.МаршрутныйДокумент) Тогда
				Сообщить(ОбщиеФункции._СтрШаблон_("К возврату от покупателя №%1 по адресу '%2 (%3)' не удалось подобрать маршрутный документ", 
				НовСтр.НомерВходящегоДокумента, НовСтр.СтруктурнаяЕдиницаКонтрагента.Владелец, НовСтр.СтруктурнаяЕдиницаКонтрагента), СтатусСообщения.Внимание);
			КонецЕсли; 
			
		КонецЕсли;
		
		//СтрокаСоСкладомПоклажедателя = ТаблицаСкладовПоклажедателей.Найти(Элемент.storLocH, "Код");
		
		//Если СтрокаСоСкладомПоклажедателя <> Неопределено Тогда
		//	КачествоЗапаса = СтрокаСоСкладомПоклажедателя.СсылкаНаОбъект;
		//Иначе
		КачествоЗапаса = Справочники.Качество.Стандарт;
		//КонецЕсли; 
		
		СоставДокумента = ДанныеДляЗагрузки.НайтиСтроки(Новый Структура("Поставка", Элемент.Поставка));
		
		ЕстьГазВПоставке = Ложь;
		
		Для каждого СтрДок Из СоставДокумента Цикл
			
			Если НовСтр.ТипДокумента = "7" И НЕ ЗначениеЗаполнено(НовСтр.НомерТранспортировки) Тогда
				
				НовСтр.НомерТранспортировки = СтрДок.ДокументЗакупки;
				
			КонецЕсли;
			
			Артикул = УдалитьЛидирущиеНулиИзКодаТовара(СтрДок.Материал);
			
			СтрТоварПоклажедателя = ТаблицаТоваровПоклажедателя.Найти(Артикул, "Артикул");
			
			Если СтрТоварПоклажедателя = Неопределено Тогда
				НовСтр.ОшибкиВыполнения.Добавить(ОбщиеФункции._СтрШаблон_("Не найден товар с кодом '%1'", УдалитьЛидирущиеНулиИзКодаТовара(СтрДок.Материал)));
				Продолжить;
			КонецЕсли;
			
			Если СвойстваПартнера.Свойство("Углекислота") Тогда
				ЕстьГазВПоставке = Найти(СвойстваПартнера.Углекислота, Артикул) > 0;
			КонецЕсли; 
			
			СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
			
			Если ДанныеДляЗагрузки.Колонки.Найти("lot") <> Неопределено И ДанныеДляЗагрузки.Колонки.Найти("prodDate") <> Неопределено И ЗначениеЗаполнено(СтрДок.lot) Тогда
				// жесткое резервирование по партии
				СерияНоменклатуры = ВыбратьСериюНоменклатуры(СтрТоварПоклажедателя.Ссылка, ПрочитатьДату(СтрДок.prodDate, "dd.MM.yyyy"), СтрДок.lot);
				
				Если СерияНоменклатуры.Пустая() Тогда
					
					Попытка
						_3PLСервер.СоздатьСериюНоменклатуры(Новый Структура("Владелец, ДатаПроизводства, СрокГодности, НомерПартииПоставщика, Комментарий, Используется",
						СтрТоварПоклажедателя.Ссылка, ПрочитатьДату(СтрДок.prodDate, "dd.MM.yyyy"), ПрочитатьДату(СтрДок.sled, "dd.MM.yyyy"), СтрДок.lot, ОбщиеФункции._СтрШаблон_("#%1. Создана обменом по договору 3PL", СвойстваПартнера.КодДистрибьютора), Истина), СерияНоменклатуры);
					Исключение
						НовСтр.ОшибкиВыполнения.Добавить(ОбщиеФункции._СтрШаблон_("Не удалось создать серию по товару '%1' (Номер партии: %2) по причине:%3", 
						СтрТоварПоклажедателя.Ссылка, СтрДок.lot, ОписаниеОшибки()));
					КонецПопытки;
					
				КонецЕсли; 
				
			КонецЕсли;
			
			МинСрок = 100;
			
			//Если ТаблицаТоваровПоклажедателя.Колонки.Найти(СтрДок.ordUom) = Неопределено Тогда
			//	ЕдиницаИзмерения = СтрТоварПоклажедателя.EA;
			//Иначе
				ЕдиницаИзмерения = СтрТоварПоклажедателя.CS;
			//КонецЕсли;
			
			СтруктураСтрокиДокумента = Новый Структура;
			
			СтруктураСтрокиДокумента.Вставить("Номенклатура", СтрТоварПоклажедателя.Ссылка);
			
			СтруктураСтрокиДокумента.Вставить("СерияНоменклатуры", СерияНоменклатуры);
			
			СтруктураСтрокиДокумента.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
			
			СтруктураСтрокиДокумента.Вставить("Коэффициент", СтруктураСтрокиДокумента.ЕдиницаИзмерения.Коэффициент);
			
			СтруктураСтрокиДокумента.Вставить("Количество", Число(СтрДок.ОбъемПоставки));
			
			СтруктураСтрокиДокумента.Вставить("Качество", КачествоЗапаса);
			
			СтруктураСтрокиДокумента.Вставить("ДоговорВладельца", СвойстваПартнера.ОсновнойДоговорПриемаНаХранение);
			
			СтруктураСтрокиДокумента.Вставить("МинСрокГодности", МинСрок);
			
			СтруктураСтрокиДокумента.Вставить("ИдСтрокиПоклажедателя", Формат(Число(СтрДок.Позиция), "ЧГ=0"));
			
			СтруктураСтрокиДокумента.Вставить("СпособСписанияОстатка", Перечисления.СпособыСписанияОстаткаТоваров.Собственный);
			
			СтруктураСтрокиДокумента.Вставить("НомерПартииПоставщика", СерияНоменклатуры.НомерПартииПоставщика);
			
			НовСтр.Товары.Добавить(СтруктураСтрокиДокумента);
			
			Если ЕстьГазВПоставке И СвойстваПартнера.Свойство("Баллон") И НовСтр.ТипДокумента <> "7" Тогда
				
				СтруктураСтрокиДокумента = Новый Структура;
				
				СтруктураСтрокиДокумента.Вставить("Номенклатура", СвойстваПартнера.Баллон);
				
				СтруктураСтрокиДокумента.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
				
				СтруктураСтрокиДокумента.Вставить("ЕдиницаИзмерения", СтруктураСтрокиДокумента.Номенклатура.ЕдиницаХраненияОстатков);
				
				СтруктураСтрокиДокумента.Вставить("Коэффициент", СтруктураСтрокиДокумента.ЕдиницаИзмерения.Коэффициент);
				
				СтруктураСтрокиДокумента.Вставить("Количество", СтрДок.ОбъемПоставки);
				
				СтруктураСтрокиДокумента.Вставить("Качество", КачествоЗапаса);
				
				СтруктураСтрокиДокумента.Вставить("ДоговорВладельца", СвойстваПартнера.ОсновнойДоговорПриемаНаХранение);
				
				СтруктураСтрокиДокумента.Вставить("МинСрокГодности", "");
				
				СтруктураСтрокиДокумента.Вставить("ИдСтрокиПоклажедателя", Формат(СтрДок.Позиция + 10, "ЧГ=0"));
				
				СтруктураСтрокиДокумента.Вставить("СпособСписанияОстатка", Перечисления.СпособыСписанияОстаткаТоваров.Собственный);
				
				НовСтр.Товары.Добавить(СтруктураСтрокиДокумента);
				
				НовСтр.Склад = СвойстваПартнера.СкладБаллонов;
				
				НовСтр.ГруппаДоставки = СвойстваПартнера.ГруппаДоставкиБаллонов;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЦикла; 	
	
	Возврат ТабЗнач;	
	
КонецФункции
 
#КонецОбласти 

#Область Номенклатура

Процедура ОпределитьПериодГодности(ПериодГодности, КоличествоПериодов, ПериодГодностиНоменклатуры, КоличествоПериодовГодностиНоменклатуры) Экспорт
	
	// Единица измерения срока годности. Значения:
	//	'D ' - День; 
	//	'W' - Неделя; 
	//	'M' - Месяц; 
	//	'Y' – Год.
	// Если переданная единица – неделя или год, СУСК заменяет их на день и месяц соответственно, с соответствующим пересчетом величины shelf life.
	// Поле должно быть выведено в интерфейс для просмотра и редактирования.
	// Значение по умолчанию – день.
	
	Если ПериодГодности = "D" Тогда
		ПериодГодностиНоменклатуры = Перечисления.Периодичность.День;
	ИначеЕсли ПериодГодности = "M" Тогда
		ПериодГодностиНоменклатуры = Перечисления.Периодичность.Месяц;
	ИначеЕсли ПериодГодности = "W" Тогда
		ПериодГодностиНоменклатуры = Перечисления.Периодичность.День;
		КоличествоПериодов = КоличествоПериодов * 7;
	ИначеЕсли ПериодГодности = "Y" Тогда
		ПериодГодностиНоменклатуры = Перечисления.Периодичность.Месяц;
		КоличествоПериодов = КоличествоПериодов * 12;
	КонецЕсли;
	
	КоличествоПериодовГодностиНоменклатуры = КоличествоПериодов;
	
КонецПроцедуры

Процедура ОпределитьБазовуюЕдиницу(БазоваяЕдиница, БазоваяЕдиницаИзмеренияНоменклатуры)
	
	//Тип упаковки. Значения:
	//	PF - паллета, 
	//	CS - коробка, 
	//	EA – штука,
	//Или обозначение базовой единицы измерения товара, интерпретируемое как штука.
	
	Если БазоваяЕдиница = "EA"
		ИЛИ НЕ (БазоваяЕдиница = "CS" ИЛИ БазоваяЕдиница = "PF") Тогда
		БазоваяЕдиницаИзмеренияНоменклатуры = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
	ИначеЕсли БазоваяЕдиница = "CS" Тогда
		БазоваяЕдиницаИзмеренияНоменклатуры = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778");
	ИначеЕсли БазоваяЕдиница = "PF" Тогда
		БазоваяЕдиницаИзмеренияНоменклатуры = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("пал");
	КонецЕсли; 
	
КонецПроцедуры

Функция ПересчитатьГабаритыВМетры(Размер, ЕдиницаИзмерения) Экспорт
	
	РазмерСУчетомПересчета = Размер;
	
	Если ЕдиницаИзмерения = "DM" Тогда
		РазмерСУчетомПересчета = Размер / 10;
	ИначеЕсли ЕдиницаИзмерения = "CM" Тогда
		РазмерСУчетомПересчета = Размер / 100;
	ИначеЕсли ЕдиницаИзмерения = "MM" Тогда
		РазмерСУчетомПересчета = Размер / 1000;
	КонецЕсли; 
	
	Возврат РазмерСУчетомПересчета;
	
КонецФункции

Функция ПреобразоватьДанныеПоТоварамВТаблицуЗначений(Данные)
		
	ТабЗнач = Новый ТаблицаЗначений;
	ТабЗнач.Колонки.Добавить("Родитель",                   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабЗнач.Колонки.Добавить("Артикул",                    Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25)));
	ТабЗнач.Колонки.Добавить("Наименование",               Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(120)));
	ТабЗнач.Колонки.Добавить("НаименованиеПолное",         Новый ОписаниеТипов("Строка"));
	ТабЗнач.Колонки.Добавить("Весовой",                    Новый ОписаниеТипов("Булево"));
	ТабЗнач.Колонки.Добавить("УчетПартий_в_ВМС",           Новый ОписаниеТипов("Булево"));
	ТабЗнач.Колонки.Добавить("ВидНоменклатуры",            Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"));
	ТабЗнач.Колонки.Добавить("ДистрибьюторскийКонтракт",   Новый ОписаниеТипов("СправочникСсылка.ДистрибьюторскиеКонтракты"));
	ТабЗнач.Колонки.Добавить("ОсновнойСкладОтгрузки",      Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТабЗнач.Колонки.Добавить("ГруппаМатериалов",           Новый ОписаниеТипов("СправочникСсылка.ГруппыМатериалов"));
	ТабЗнач.Колонки.Добавить("ГруппаХранения",             Новый ОписаниеТипов("СправочникСсылка.ГруппыХранения"));
	ТабЗнач.Колонки.Добавить("ГруппаПополнения",           Новый ОписаниеТипов("СправочникСсылка.ГруппыПополнения"));
	ТабЗнач.Колонки.Добавить("ГруппаПикинга",              Новый ОписаниеТипов("СправочникСсылка.ГруппыПикинга"));
	ТабЗнач.Колонки.Добавить("ФормФактор",                 Новый ОписаниеТипов("СправочникСсылка.ФормФакторы"));
	ТабЗнач.Колонки.Добавить("ОсновнойПоставщик",          Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТабЗнач.Колонки.Добавить("ПериодГодности",             Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	ТабЗнач.Колонки.Добавить("КоличествоПериодовГодности", Новый ОписаниеТипов("Число",  , , Новый КвалификаторыЧисла(5)));
	ТабЗнач.Колонки.Добавить("БазоваяЕдиницаИзмерения",    Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ТабЗнач.Колонки.Добавить("СтавкаНДС",                  Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТабЗнач.Колонки.Добавить("ЕдиницаЗакупок",             Новый ОписаниеТипов("Структура"));
	ТабЗнач.Колонки.Добавить("ЕдиницаЗакупок2",            Новый ОписаниеТипов("Структура"));
	ТабЗнач.Колонки.Добавить("ЕдиницаЗакупок3",            Новый ОписаниеТипов("Структура"));
	ТабЗнач.Колонки.Добавить("МодельСкладскогоУчета",      Новый ОписаниеТипов("СправочникСсылка.МоделиСкладскогоУчета"));
	
	МодельСкладскогоУчета_СоСроком   = Справочники.МоделиСкладскогоУчета.НайтиПоКоду("О00002"); // Со сроком годности
	МодельСкладскогоУчета_БезСрока   = Справочники.МоделиСкладскогоУчета.НайтиПоКоду("О00001"); // Без сроков
	
	Для каждого Элемент Из Данные Цикл
		
		СведенияОТоваре = Элемент.matMasItems.Получить(0);
		
		НовСтр = ТабЗнач.Добавить();
		НовСтр.ДистрибьюторскийКонтракт = СвойстваПартнера.Контракт;
		НовСтр.ОсновнойСкладОтгрузки    = СвойстваПартнера.Склад;
		НовСтр.ОсновнойПоставщик        = СвойстваПартнера.ОсновнойПоставщик;
		НовСтр.Родитель                 = СвойстваПартнера.ГруппаНоменклатуры;
		НовСтр.ГруппаМатериалов         = СвойстваПартнера.ГруппаМатериалов;
		НовСтр.ГруппаХранения           = СвойстваПартнера.ГруппаХранения;
		НовСтр.ГруппаПополнения         = СвойстваПартнера.ГруппаПополнения;
		НовСтр.ГруппаПикинга            = СвойстваПартнера.ГруппаПикинга;
		НовСтр.ФормФактор               = СвойстваПартнера.ФормФактор;
		НовСтр.Артикул                  = УдалитьЛидирущиеНулиИзКодаТовара(СведенияОТоваре.itemNum);
		НовСтр.Наименование             = СведенияОТоваре.descr;
		НовСтр.НаименованиеПолное       = СведенияОТоваре.descr;
		НовСтр.УчетПартий_в_ВМС         = Ложь;
		НовСтр.ВидНоменклатуры          = Справочники.ВидыНоменклатуры.НайтиПоКоду("О00001");
		НовСтр.СтавкаНДС                = Перечисления.СтавкиНДС.ПустаяСсылка();
		НовСтр.МодельСкладскогоУчета    = ?(СведенияОТоваре.lotCaptureReq = "X", МодельСкладскогоУчета_СоСроком, МодельСкладскогоУчета_БезСрока);
		
		ОпределитьПериодГодности(СведенияОТоваре.shelfLifeUom, СведенияОТоваре.shelfLife, НовСтр.ПериодГодности, НовСтр.КоличествоПериодовГодности);
		
		ОпределитьБазовуюЕдиницу(СведенияОТоваре.baseUom, НовСтр.БазоваяЕдиницаИзмерения);
		
		Для каждого Единица Из СведенияОТоваре.itemConfigUOMS Цикл
			
			Если (СведенияОТоваре.itemTypTxt = "ZFIN")
				ИЛИ (СведенияОТоваре.itemTypTxt = "ZEMT" И Единица.uomTypTxt = "EA" И НовСтр.ЕдиницаЗакупок.Количество() = 0) Тогда
				
				Если Единица.uomTypTxt = "EA" Тогда
					ИмяКолонки = "ЕдиницаЗакупок";
				ИначеЕсли Единица.uomTypTxt = "CS" Тогда
					ИмяКолонки = "ЕдиницаЗакупок2";
				ИначеЕсли Единица.uomTypTxt = "PF" Тогда
					ИмяКолонки = "ЕдиницаЗакупок3";
				Иначе
					Продолжить;
				КонецЕсли;  
				
				ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
				
				ОпределитьБазовуюЕдиницу(Единица.uomTypTxt, ЕдиницаПоКлассификатору);
				
				// Перепроверим единицу по классификатору, возможно это блок
				Если НРЕГ(ЕдиницаПоКлассификатору.Наименование) = "шт"
					И Единица.convFactor > 1 Тогда
					ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("704");
				КонецЕсли; 
				
				НовСтр[ИмяКолонки].Вставить("Наименование",            ЕдиницаПоКлассификатору.Наименование + ?(Единица.convFactor > 1, Строка(Единица.convFactor), ""));
				НовСтр[ИмяКолонки].Вставить("ЕдиницаПоКлассификатору", ЕдиницаПоКлассификатору);
				НовСтр[ИмяКолонки].Вставить("Вес",                     ?(Единица.wgtMu = "KG",Единица.wgt, Окр(Единица.wgt / 1000, 6)));
				НовСтр[ИмяКолонки].Вставить("ВесБрутто",               ?(Единица.wgtMu = "KG",Единица.wgt, Окр(Единица.wgt / 1000, 6)));
				НовСтр[ИмяКолонки].Вставить("Глубина",                 ПересчитатьГабаритыВМетры(Единица.lgth, Единица.lgthMu));
				НовСтр[ИмяКолонки].Вставить("Высота",                  ПересчитатьГабаритыВМетры(Единица.hgt,Единица.hgtMu));
				НовСтр[ИмяКолонки].Вставить("Ширина",                  ПересчитатьГабаритыВМетры(Единица.wid,Единица.widMu));
				НовСтр[ИмяКолонки].Вставить("КодовоеОбозначениеВКПК",  ЕдиницаПоКлассификатору.Наименование);
				НовСтр[ИмяКолонки].Вставить("Комплектация",            Истина);
				НовСтр[ИмяКолонки].Вставить("Коэффициент",             Единица.convFactor);
				НовСтр[ИмяКолонки].Вставить("Объем",                   Окр((НовСтр[ИмяКолонки].Глубина * НовСтр[ИмяКолонки].Ширина * НовСтр[ИмяКолонки].Высота) / 100, 6));
				НовСтр[ИмяКолонки].Вставить("ОбъемБрутто",             Окр((НовСтр[ИмяКолонки].Глубина * НовСтр[ИмяКолонки].Ширина * НовСтр[ИмяКолонки].Высота) / 100, 6));
				НовСтр[ИмяКолонки].Вставить("ТехнологическаяУпаковка", ?(ЕдиницаПоКлассификатору.Код = "778",
				Перечисления.ВидыТехнологическихУпаковок.PACK,         Перечисления.ВидыТехнологическихУпаковок.ST));
				НовСтр[ИмяКолонки].Вставить("Штрихкод",                Единица.barCode);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТабЗнач) Тогда
		Сообщить("Данные по товарам получены", СтатусСообщения.Информация);
	Иначе 
		Сообщить("Новые данные по товарам не найдены!!!", СтатусСообщения.Информация);
	КонецЕсли; 
		
	Возврат ТабЗнач;
	
КонецФункции

Функция ОпределитьТребуемыеДействияПоРаботеСНоменклатурой(ТаблицаДанных)
	
	ТаблицаДанных.Колонки.Добавить("ТребуемоеДействие", Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	т.Наименование,
	|	т.Артикул,
	|	т.ДистрибьюторскийКонтракт
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&ТаблицаДанных КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Наименование,
	|	Товары.Артикул,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.Ссылка ЕСТЬ NULL
	|			ТОГДА ""Добавление""
	|		ИНАЧЕ ""Обновление""
	|	КОНЕЦ КАК ТребуемоеДействие
	|ИЗ
	|	втТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Номенклатура.Ссылка КАК Ссылка,
	|			Номенклатура.Артикул КАК Артикул
	|		ИЗ
	|			Справочник.Номенклатура КАК Номенклатура
	|		ГДЕ
	|			Номенклатура.Ссылка В ИЕРАРХИИ(&ГруппаНоменклатуры)) КАК СпрНоменклатура
	|		ПО Товары.Артикул = СпрНоменклатура.Артикул";
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", СвойстваПартнера.ГруппаНоменклатуры); 
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрТаб Из ТаблицаДанных Цикл
		
		СтрокаРезультатаЗапроса = РезультатЗапроса.Найти(СтрТаб.Артикул, "Артикул");
		
		Если СтрокаРезультатаЗапроса <> Неопределено Тогда
			СтрТаб.ТребуемоеДействие = СтрокаРезультатаЗапроса.ТребуемоеДействие;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура ЗаполнитьСправочникНоменклатурыПоклажедателя(ТаблицаДанных)
	
	ТаблицаНоменклатураПоклажедателя = внИС_ОбменДанными.ПолучитьНастройкиВнешнейСистемы("НоменклатураПоклажедателя", Строка(Партнер));
	
	Если ТаблицаНоменклатураПоклажедателя = Неопределено Тогда
		
		внИС_ОбменДанными.УстановитьНастройкуВнешнейСистемы("НоменклатураПоклажедателя", Строка(Партнер), ТаблицаДанных);
		
	Иначе 
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НоменклатураПоклажедателя", ТаблицаНоменклатураПоклажедателя); 
		Запрос.УстановитьПараметр("ТаблицаНовыхДанных", ТаблицаДанных); 
		
		Запрос.Текст = "
		|ВЫБРАТЬ т.Артикул ПОМЕСТИТЬ втНоменклатураПоклажедателя ИЗ &НоменклатураПоклажедателя КАК т;
		|
		|ВЫБРАТЬ т.Артикул ПОМЕСТИТЬ втТаблицаНовыхДанных ИЗ &ТаблицаНовыхДанных КАК т;
		|
		|ВЫБРАТЬ
		|	ТаблицаНовыхДанных.Артикул
		|ИЗ
		|	втТаблицаНовыхДанных КАК ТаблицаНовыхДанных
		|	ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураПоклажедателя КАК НоменклатураПоклажедателя
		|	ПО ТаблицаНовыхДанных.Артикул = НоменклатураПоклажедателя.Артикул
		|ГДЕ
		|	НоменклатураПоклажедателя.Артикул ЕСТЬ NULL";
		
		ВыборкаЗаписей = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			СтрТабДанные = ТаблицаДанных.Найти(ВыборкаЗаписей.Артикул, "Артикул");
			
			Если СтрТабДанные <> Неопределено Тогда
				
				НовСтр = ТаблицаНоменклатураПоклажедателя.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, СтрТабДанные);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли;
		
КонецПроцедуры
 
#КонецОбласти

#Область ПАРТИИ

Функция ОпределитьТребуемыеДействияПоРаботеСПартиями(ТаблицаДанных)
	
	ТаблицаДанных.Колонки.Добавить("ТребуемоеДействие", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	т.НомерПартииПоставщика,
	|	т.Владелец,
	|   т.ДатаПроизводства
	|ПОМЕСТИТЬ втПартии
	|ИЗ
	|	&ТаблицаДанных КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Партии.Владелец,
	|	Партии.НомерПартииПоставщика,
	|	ВЫБОР
	|		КОГДА СпрСерии.Ссылка ЕСТЬ NULL
	|			ТОГДА ""Добавление""
	|		ИНАЧЕ ""Обновление""
	|	КОНЕЦ КАК ТребуемоеДействие,
	|   СпрСерии.Ссылка КАК СерияНоменклатуры
	|ИЗ
	|	втПартии КАК Партии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СпрСерии
	|		ПО Партии.Владелец= СпрСерии.Владелец
	|			И Партии.НомерПартииПоставщика = СпрСерии.НомерПартииПоставщика
	|  			И НАЧАЛОПЕРИОДА(Партии.ДатаПроизводства, ДЕНЬ) = СпрСерии.ДатаПроизводства";
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрТаб Из ТаблицаДанных Цикл
		
		СтрокаРезультатаЗапроса = РезультатЗапроса.Найти(СтрТаб.НомерПартииПоставщика, "НомерПартииПоставщика");
		
		Если СтрокаРезультатаЗапроса <> Неопределено Тогда
			СтрТаб.ТребуемоеДействие = СтрокаРезультатаЗапроса.ТребуемоеДействие;
			СтрТаб.СерияНоменклатуры = СтрокаРезультатаЗапроса.СерияНоменклатуры;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПреобразоватьДанныеПоПартиямВТаблицуЗначений(Данные)
	
	ТабЗнач = Новый ТаблицаЗначений;
	ТабЗнач.Колонки.Добавить("Владелец",                   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабЗнач.Колонки.Добавить("КоличествоПериодовГодности", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5)));
	ТабЗнач.Колонки.Добавить("Комментарий",                Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(500)));
	ТабЗнач.Колонки.Добавить("НомерПартииПоставщика",      Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25)));
	ТабЗнач.Колонки.Добавить("ПериодГодности",             Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	ТабЗнач.Колонки.Добавить("ДатаПроизводства",           Новый ОписаниеТипов("Дата"));
	ТабЗнач.Колонки.Добавить("СрокГодности",               Новый ОписаниеТипов("Дата"));
	ТабЗнач.Колонки.Добавить("Производитель",              Новый ОписаниеТипов("СправочникСсылка.Контрагенты,СправочникСсылка.Производители"));
	ТабЗнач.Колонки.Добавить("СтранаПроисхождения",        Новый ОписаниеТипов("СправочникСсылка.КлассификаторСтранМира"));
	ТабЗнач.Колонки.Добавить("Подразделение",              Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	ТабЗнач.Колонки.Добавить("ДатаСозданияСерии",          Новый ОписаниеТипов("Дата"));
	ТабЗнач.Колонки.Добавить("Используется",               Новый ОписаниеТипов("Булево"));
	ТабЗнач.Колонки.Добавить("ПомарочныйУчет",             Новый ОписаниеТипов("Булево"));
	ТабЗнач.Колонки.Добавить("ПометкаУдаления",            Новый ОписаниеТипов("Булево"));
	ТабЗнач.Колонки.Добавить("КодПартнера",                Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25)));
	
	Для каждого Элемент Из Данные Цикл
		
		Артикул = УдалитьЛидирущиеНулиИзКодаТовара(Элемент.itemNum);
		
		СтрТоварПоклажедателя = ТаблицаТоваровПоклажедателя.Найти(Артикул, "Артикул");
		
		Если НЕ ЗначениеЗаполнено(СтрТоварПоклажедателя) Тогда
			Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось загрузить партию '%1' по причине: владелец партии по коду '%2' не найден",
				Элемент.lot, Артикул), СтатусСообщения.Внимание);
			Продолжить;
		КонецЕсли;
		// партии, которые надо пропустить
		Если СтрНайти(ВРЕГ(Элемент.lot), СвойстваПартнера.НомерВиртуальнойПартии) > 0
			ИЛИ ПрочитатьДату(Элемент.prodDate, ФорматДатыJSON.ISO) = Дата(1,1,1)
			ИЛИ Элемент.cimAcc <> "2" Тогда
			Продолжить; 	
		КонецЕсли; 
		
		Владелец = СтрТоварПоклажедателя.Ссылка;
		
		НовСтр                            = ТабЗнач.Добавить();
		НовСтр.Владелец                   = Владелец;
		НовСтр.Комментарий                = ОбщиеФункции._СтрШаблон_("#%1. Создана обменом по договору 3PL", СвойстваПартнера.КодДистрибьютора);
		НовСтр.НомерПартииПоставщика      = Элемент.lot;
		НовСтр.ДатаПроизводства           = ПрочитатьДату(Элемент.prodDate, ФорматДатыJSON.ISO);
		НовСтр.СрокГодности               = ПрочитатьДату(Элемент.expDate, ФорматДатыJSON.ISO);
		НовСтр.ПериодГодности             = Перечисления.Периодичность.День;
		НовСтр.КоличествоПериодовГодности = (НовСтр.СрокГодности - НовСтр.ДатаПроизводства) / 86400;

		Производитель                     = ОбщиеФункции.ВернутьОбъектПоЗначениюСвойства(ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьСвойствоПоИмени("ИдентификаторЗаводаПепси"),
												Элемент.valType);

		Если НЕ ЗначениеЗаполнено(Производитель) Тогда
			Производитель                 = СвойстваПартнера.ОсновнойПоставщик;
		КонецЕсли;

		НовСтр.Производитель              = Производитель;
		НовСтр.СтранаПроисхождения        = Справочники.КлассификаторСтранМира.НайтиПоКоду("643");
		НовСтр.ДатаСозданияСерии          = ТекущаяДатаСеанса();
		НовСтр.Используется               = ?(Элемент.status = "X" ИЛИ ЗначениеЗаполнено(Элемент.del), Ложь, Истина);
		НовСтр.ПометкаУдаления            = ?(ЗначениеЗаполнено(Элемент.del), Истина, Ложь);
		НовСтр.КодПартнера                = УдалитьЛидирущиеНулиИзКодаТовара(Элемент.itemNum);
		НовСтр.ПомарочныйУчет			  = ?(Элемент.cimAcc = "2", Истина, Ложь);
		
		Если НовСтр.ПомарочныйУчет Тогда
			НовСтр.Комментарий = СтрШаблон("%1, CIM", НовСтр.Комментарий);	
		КонецЕсли; 
				
	КонецЦикла;
	
	Возврат ТабЗнач;
	
КонецФункции

#КонецОбласти

#Область Чекины

Функция ПолучитьЧекиныДляОтправки()
	
	Заявки = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьЗаявкиПоСтатусам("*", Справочники.СтатусыЗаявок.Новая, 
		"1С", Партнер, "Документ.ИнвентаризацияДоставкиСводная");
	
	Возврат Заявки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ТЕСТЫ

Процедура ТестированиеИнтерфейсов()
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать("D:\1С (Разное)\МОЗАЙКА\prints.json");
	
	РезультатЗапроса = Неопределено;
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Текст.ПолучитьТекст());
	РезультатЗапроса = ПрочитатьJSON(Чтение);
	Чтение.Закрыть();
	//
	ПрочитатьСвойстваПартнера();
	//
	ПроверкаЗаполнения();
	
	СвойстваПартнера.ТокенПечати = "sig=NL6OuThR%2F14ux7kR7guPeScTtjtJHUCXYDwscx0MIq0%3D&st=2021-09-07T08%3A00%3A18Z&se=2021-09-07T12%3A00%3A18Z&sv=2019-02-02&sp=rl&sr=c";
	
	ТаблицаПечФорм = СформироватьТаблицуПечФорм();
	
	ДобавитьСтрокиВТаблицуПечФорм(ТаблицаПечФорм, РезультатЗапроса);
	
	ЗагрузитьПечатныеФормы(ТаблицаПечФорм);
		
КонецПроцедуры

Процедура Тест_ПеревестиПартииНаВиртуальную()
	
	Партнер = Справочники.КонтурEDI_ДополнительныеСправочники.НайтиПоНаименованию("3PL_Pepsico_Омск", Истина);
	
	ПрочитатьСвойстваПартнера();
	
	ПроверкаЗаполнения();
	
	ЗаказПоставщика = Документы.ЗаказПоставщику.НайтиПоНомеру("ТШО0006875", ТекущаяДатаСеанса());
	
	ПеревестиЦифровыеПартииНаВиртуальнуюВСап(ЗаказПоставщика);
		
КонецПроцедуры
 
Процедура Тест_ПолучитьДокументы()
	
	Партнер = Справочники.КонтурEDI_ДополнительныеСправочники.НайтиПоНаименованию("3PL_Pepsico_Томск", Истина);
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать("D:\1С (Разное)\МОЗАЙКА\docs.json");
	
	РезультатЗапроса = Неопределено;
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Текст.ПолучитьТекст());
	Данные = ПрочитатьJSON(Чтение);
	Чтение.Закрыть();
	
	ПрочитатьСвойстваПартнера();
	
	ПроверкаЗаполнения();
	
	СформироватьТаблицаТоваровПоклажедателя();
	
	//СоздатьДокументы(ОпределитьТребуемыеДействияПоРаботеСДокументами(ПреобразоватьДанныеПоДокументамВТаблицуЗначений(Данные)));
	ОпределитьТребуемыеДействияПоРаботеСДокументами(ПреобразоватьДанныеПоДокументамВТаблицуЗначений(Данные));
	
КонецПроцедуры
 
Процедура УдалениеТестовыхДанных()
	
	ВыборкаДляУдаления = Справочники.Номенклатура.Выбрать(СвойстваПартнера.ГруппаНоменклатуры);
	
	КолУдаленных = 1;
	Пока ВыборкаДляУдаления.Следующий() Цикл
		
		Если ВыборкаДляУдаления.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли; 
		
		#Если Клиент Тогда
			Состояние("Удалено: "+КолУдаленных);
		#КонецЕсли
		
		ВыборкаЕдиницы = Справочники.ЕдиницыИзмерения.Выбрать(, ВыборкаДляУдаления.Ссылка);
		
		Пока ВыборкаЕдиницы.Следующий() Цикл
			
			Попытка
				ЕдиницаОбъект = ВыборкаЕдиницы.Ссылка.ПолучитьОбъект();
				ЕдиницаОбъект.Удалить();
			Исключение
				Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось удалить единицы измерения по товару '%1' по причине: %2", ВыборкаДляУдаления.Ссылка, ОписаниеОшибки()));
			КонецПопытки;
			
		КонецЦикла;
		
		Товар = ВыборкаДляУдаления.Ссылка.ПолучитьОбъект();
		Товар.Удалить();
		
		КолУдаленных = КолУдаленных+1;
		
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура Тест_СоздатьУведомление()
	
	Партнер = Справочники.КонтурEDI_ДополнительныеСправочники.НайтиПоНаименованию("3PL_Pepsico_Томск", Истина);
	
	ПрочитатьСвойстваПартнера();
	
	ПроверкаЗаполнения();
	
	СоздатьУведомление("Это тестовое сообщение. Создана новая 3PL карточка 'Товар 1' с артикулом '11-22'. Необходимо создать / проверить 3PD карточку");
	
КонецПроцедуры

Процедура Тест_ПризнакЗапускаОперации()
	
	СписокОпераций = Новый СписокЗначений;
	СписокОпераций.Добавить("ПолучитьДокументы");
	
	Партнер = Справочники.КонтурEDI_ДополнительныеСправочники.НайтиПоНаименованию("3PL_Pepsico_Томск", Истина);
	
	Для каждого Операция Из СписокОпераций Цикл
		
		Если ОперацияЗапущена("ПолучитьДокументы") Тогда
			Сообщить("Операция 'Получить документы' сейчас выполняется другим пользователем. Попробуйте выполнить операцию позже");
		Иначе
			УстановитьПризнакЗапускаОперации("ПолучитьДокументы", Истина);
		КонецЕсли; 	
		
		УстановитьПризнакЗапускаОперации("ПолучитьДокументы", Ложь);
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура Тест_СформироватьТелоЗапросаДляПодтвержденияПоставки_Исходящие()
	
	Партнер = Справочники.КонтурEDI_ДополнительныеСправочники.НайтиПоНаименованию("3PL_Pepsico_Барнаул", Истина);
	
	ПрочитатьСвойстваПартнера();
	
	ПроверкаЗаполнения();
	
	ОТУ = Документы.ОтгрузкаТоваровУслуг.НайтиПоНомеру("ТШО0018901", ТекущаяДатаСеанса()); 
	Отбор = Документы.ОтборЗапасовНаСкладе.НайтиПоНомеру("О000750788", ТекущаяДатаСеанса());
	
	ТелоЗапроса = СформироватьТелоЗапросаДляПодтвержденияПоставки(ОТУ, Отбор, "J");
	
	Сообщить(ТелоЗапроса);
	
КонецПроцедуры

Процедура Тест_СформироватьТелоЗапросаДляПодтвержденияПоставки_Входящие()
	
	Партнер = Справочники.КонтурEDI_ДополнительныеСправочники.НайтиПоНаименованию("3PL_Pepsico_Барнаул", Истина);
	
	ПрочитатьСвойстваПартнера();
	
	ПроверкаЗаполнения();
	
	Поставка = Документы.ЗаказПоставщику.НайтиПоНомеру("ТШО0018901", ТекущаяДатаСеанса());    
	ДокументПодтверждения = Документы.ПриходныйСкладскойОрдер.НайтиПоНомеру("ТШО0035967", ТекущаяДатаСеанса()); 
	
	ТелоЗапроса = СформироватьТелоЗапросаДляПодтвержденияПоставки(Поставка, ДокументПодтверждения, "T");
	
	Сообщить(ТелоЗапроса);
	
КонецПроцедуры

Процедура Тест_СформироватьТелоЗапросаПоРасхождениямПриПересчете()
	
	Партнер = Справочники.КонтурEDI_ДополнительныеСправочники.НайтиПоНаименованию("3PL_Pepsico_Барнаул", Истина);
	
	ПрочитатьСвойстваПартнера();
	
	ПроверкаЗаполнения();
	
	ВыборкаДанных = ПолучитьДанныеПоДвижениямКорректировкиОстатков();
	
	Пока ВыборкаДанных.Следующий() Цикл
		
		МассивПартийДляПереводаНаВиртуальную = Новый Массив;
		ТелоЗапроса = СформироватьТелоЗапросаПоРасхождениямПриПересчете(ВыборкаДанных, МассивПартийДляПереводаНаВиртуальную);
		
		Сообщить(ТелоЗапроса);
		Прервать;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура Тест_ЗаявкаНаПолучениеПечатныхФормСуществует()
	
	НомерПоставки = "0008508160";
	Партнер = Справочники.КонтурEDI_ДополнительныеСправочники.НайтиПоНаименованию("3PL_Pepsico_Барнаул", Истина);
	Сообщить(НомерПоставки+": "+ЗаявкаНаПолучениеПечатныхФормСуществует(НомерПоставки));	
	
КонецПроцедуры

Процедура Тест_ПолучитьТранспортировки()
	
	Партнер = Справочники.КонтурEDI_ДополнительныеСправочники.НайтиПоНаименованию("3PL_Pepsico_Барнаул", Истина);
	
	ПрочитатьСвойстваПартнера();
	
	СвойстваПартнера.ДатаПоследнегоОбмена = НачалоДня(ТекущаяДатаСеанса());
	
	ПолучитьТранспортировки();
	
КонецПроцедуры

#КонецОбласти    

#Область Доработки

///Антропов Е.П. от 15.02.2024 №000000191
Функция ПроверкаНаОбновлениеТокена(Данные)
	ТокенОбновлен = Ложь;
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена.
		
		ОбновитьТокен = Ложь;
		Если Данные.Свойство("error_msg") И СтрНайти(Данные.error_msg, "Invalid token") > 0 Тогда		
			ОбновитьТокен = Истина;
		ИначеЕсли Данные.Свойство("detail") И Данные.detail = "Full authentication is required to access this resource" Тогда
			ОбновитьТокен = Истина;
		КонецЕсли;
		
		Если ОбновитьТокен Тогда 
			СвойстваПартнера.Токен = "";
			ОбновитьТокенДоступа();
			ТокенОбновлен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТокенОбновлен;
КонецФункции
///Антропов Е.П. от 15.02.2024 №000000191

///Антропов Е.П. от 19.04.2024 №000000279
Процедура ИзменитьСтатусМаршрутовЭкспедиторовНаНовый(ТекТЗ_МЭ) Экспорт
	
	ТекСтатус_Новая = Справочники.СтатусыЗаявок.Новая;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗВнеш"   , ТекТЗ_МЭ);
	Запрос.УстановитьПараметр("Источник" , "1С");
	Запрос.УстановитьПараметр("Приемник" , Партнер.Наименование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗВнеш.ДокументСсылка КАК ДокументСсылка
	|ПОМЕСТИТЬ ВТ_ТЗВнеш
	|ИЗ
	|	&ТЗВнеш КАК ТЗВнеш
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЗВнеш.ДокументСсылка КАК ДокументСсылка,
	|	ЖРСЗНОО.Объект КАК Объект,
	|	ЖРСЗНОО.Источник КАК Источник,
	|	ЖРСЗНОО.Приемник КАК Приемник,
	|	ЖРСЗНОО.Идентификатор КАК Идентификатор,
	|	ЖРСЗНОО.ДатаВремяПолученияЗаявкиСервисом КАК ДатаВремяПолученияЗаявкиСервисом,
	|	ЖРСЗНОО.ДатаВремяПолученияРезультатаВыполненияЗаявки КАК ДатаВремяПолученияРезультатаВыполненияЗаявки,
	|	ЖРСЗНОО.Текст КАК Текст,
	|	ЖРСЗНОО.ОшибкиВыполнения КАК ОшибкиВыполнения,
	|	ЖРСЗНОО.ДатаЗаписи КАК ДатаЗаписи,
	|	ЕСТЬNULL(ЖРСЗНОО.ЕстьМаршрут, ЛОЖЬ) КАК ЕстьМаршрут
	|ИЗ
	|	ВТ_ТЗВнеш КАК ВТ_ТЗВнеш
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЖРСЗНОО.Объект КАК Объект,
	|			ЖРСЗНОО.Источник КАК Источник,
	|			ЖРСЗНОО.Приемник КАК Приемник,
	|			ЖРСЗНОО.Идентификатор КАК Идентификатор,
	|			ЖРСЗНОО.ДатаВремяПолученияЗаявкиСервисом КАК ДатаВремяПолученияЗаявкиСервисом,
	|			ЖРСЗНОО.ДатаВремяПолученияРезультатаВыполненияЗаявки КАК ДатаВремяПолученияРезультатаВыполненияЗаявки,
	|			ЖРСЗНОО.Текст КАК Текст,
	|			ЖРСЗНОО.ОшибкиВыполнения КАК ОшибкиВыполнения,
	|			ЖРСЗНОО.ДатаЗаписи КАК ДатаЗаписи,
	|			ИСТИНА КАК ЕстьМаршрут
	|		ИЗ
	|			РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖРСЗНОО
	|		ГДЕ
	|			ЖРСЗНОО.Источник = &Источник
	|			И ЖРСЗНОО.Приемник = &Приемник) КАК ЖРСЗНОО
	|		ПО ВТ_ТЗВнеш.ДокументСсылка = ЖРСЗНОО.Объект
	|ИТОГИ
	|	МАКСИМУМ(ЕстьМаршрут)
	|ПО
	|	ДокументСсылка";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЕстьМаршрут Тогда 
			СтруктураЗаписи = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ПолучитьСтруктуруЗаписи();
			
			ДетЗаписи = Выборка.Выбрать();
			Пока ДетЗаписи.Следующий() Цикл 
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, ДетЗаписи);
				Прервать;
			КонецЦикла;
			
			СтруктураЗаписи.Статус = ТекСтатус_Новая;
			
			РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДобавитьЗапись(СтруктураЗаписи);
		Иначе 
			Сообщить("Для маршрута <"+Выборка.ДокументСсылка+"> действие невозможно. Маршрут ещё не выгружался в Пепси.");
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры
///Антропов Е.П. от 19.04.2024 №000000279

#КонецОбласти


Свойство_УтилизацияПепси = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("001726"); ///Антропов Е.П. от 01.03.2023 №000000204

//Тест_ПеревестиПартииНаВиртуальную();