#Область ПЕРЕМЕННЫЕ

Перем Соединение;
Перем СвойстваПартнера;
Перем ТаблицаТоваровПоклажедателя;
Перем МетодыОбменаСПартнером;

#КонецОбласти 

#Область ПрограммныйИнтерфейс

Процедура ПолучитьПечатныеФормы() Экспорт
	
	Перем Запрос;
	
	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	ПолучитьТокенПечати();
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_ПолучитьПечФормы;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	ТаблицаЗаявок = ПолучитьЗаявкиНаЗагрузкуПечатныхФорм();
	
	ТаблицаПечФорм = СформироватьТаблицуПечФорм();
	
	Для каждого СтрТаб Из ТаблицаЗаявок Цикл
		
		Попытка
			
			СоздатьЗапросДляМетода(СтруктураМетода, Запрос, Новый Структура("Plant, shipmentNumber", СвойстваПартнера.КодДистрибьютора, СокрЛП(СтрТаб.НомерПоставки)));
			
			Ответ = Соединение.Получить(Запрос);
			
			Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
			
			Если Ответ.КодСостояния >= 200 И Ответ.КодСостояния < 300 Тогда
				ДобавитьСтрокиВТаблицуПечФорм(ТаблицаПечФорм, Данные);
				ЗагрузитьПечатныеФормы(ТаблицаПечФорм);
				_3PLСервер.ОперацияВыполненаУспешно(СтрТаб.Объект, Строка(Партнер), "1С", Ответ.ПолучитьТелоКакСтроку());
				ТаблицаПечФорм.Очистить();
			ИначеЕсли Ответ.КодСостояния = 401 тогда
				
				Если ТипЗнч(Данные) = Тип("Структура")
					И Данные.Свойство("detail")
					И Данные.detail = "Full authentication is required to access this resource" Тогда 
					// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
					СвойстваПартнера.Токен = "";
					
					ОбновитьТокенДоступа();
					
					ПолучитьПечатныеФормы();
					
				КонецЕсли;
				
			Иначе
				ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
			КонецЕсли;
			
		Исключение
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПоставки() Экспорт
	
	Перем Запрос;
	
	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_ОбновитьПоставки;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	СоздатьЗапросДляМетода(СтруктураМетода, Запрос);
	
	ТаблицаЗаявок = ПолучитьЗаявкиНаОбновлениеПоставок();
	
	Попытка
		
		Для каждого СтрТаб Из ТаблицаЗаявок Цикл
			
			ТелоЗапроса = СформироватьТелоЗапросаДляОбновленияПоставки(СтрТаб.Объект, СокрЛП(СтрТаб.НомерПоставки));
			
			Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.Системная);
			
			Ответ = Соединение.ОтправитьДляОбработки(Запрос);
			
			Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
			
			Если Ответ.КодСостояния > 200 И Ответ.КодСостояния < 300 Тогда
				_3PLСервер.ОперацияВыполненаУспешно(СтрТаб.Объект, "1С", Строка(Партнер), ТелоЗапроса);
				СоздатьЗаявкуНаПолучениеПечатныхФорм(СтрТаб.Объект, СокрЛП(СтрТаб.НомерПоставки));
			ИначеЕсли Ответ.КодСостояния = 401
				И ТипЗнч(Данные) = Тип("Структура")
				И Данные.Свойство("detail")
				И Данные.detail = "Full authentication is required to access this resource" Тогда 
				// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
				СвойстваПартнера.Токен = "";
				
				ОбновитьТокенДоступа();
				
				ОбновитьПоставки();
				
			Иначе
				ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
			КонецЕсли;
			
		КонецЦикла; 
		
	Исключение
		ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры
 
Процедура ОтправитьКорректировкиОстатков() Экспорт
	
	Перем Запрос;
	
	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_КорректировкаОстатков;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	СоздатьЗапросДляМетода(СтруктураМетода, Запрос);
	
	ВыборкаДанных = ПолучитьДанныеПоДвижениямКорректировкиОстатков();
	
	Пока ВыборкаДанных.Следующий() Цикл
		
		Попытка
			
			ТелоЗапроса = СформироватьТелоЗапросаПоРасхождениямПриПересчете(ВыборкаДанных);
			
			Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.Системная);
			
			Ответ = Соединение.ОтправитьДляОбработки(Запрос);
			
			Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
			
			Если Ответ.КодСостояния > 200 И Ответ.КодСостояния < 300 Тогда
				_3PLСервер.ДобавитьЗаписьПоДокументуВЖурналОпераций(ВыборкаДанных.Ссылка, "1С", Строка(Партнер), Справочники.СтатусыЗаявок.УспешноОбработана,
					"inventorymovement_"+Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddHHmmss"), ТекущаяДатаСеанса(), ТекущаяДатаСеанса(), ТелоЗапроса);
			ИначеЕсли Ответ.КодСостояния = 401
				И ТипЗнч(Данные) = Тип("Структура")
				И Данные.Свойство("detail")
				И Данные.detail = "Full authentication is required to access this resource" Тогда 
				// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
				СвойстваПартнера.Токен = "";
				
				ОбновитьТокенДоступа();
				
				ОтправитьКорректировкиОстатков();
				
			Иначе
				ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
			КонецЕсли;
			
		Исключение
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
		КонецПопытки
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьТекущиеОстатки() Экспорт
	
	Перем Запрос;
	
	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_ТекущиеОстатки;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	СоздатьЗапросДляМетода(СтруктураМетода, Запрос);
	
	Попытка
		
		ТелоЗапроса = СформироватьТелоЗапросаПоТекущимОстаткам();
		
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.Системная);
		
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		
		Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
		
		Если Ответ.КодСостояния > 200 И Ответ.КодСостояния < 300 Тогда
			_3PLСервер.ОперацияВыполненаУспешно("inventorysnapshot", "1С", Строка(Партнер), ТелоЗапроса);
		ИначеЕсли Ответ.КодСостояния = 401
			И ТипЗнч(Данные) = Тип("Структура")
			И Данные.Свойство("detail")
			И Данные.detail = "Full authentication is required to access this resource" Тогда 
			// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
			СвойстваПартнера.Токен = "";
			
			ОбновитьТокенДоступа();
			
			ОтправитьТекущиеОстатки();
			
		Иначе
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
		КонецЕсли;
		
	Исключение
		ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ПолучитьДокументы() Экспорт
	
	Перем Запрос, ДатаПоследнегоОбменаПоДокументам;
	
	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	Если СвойстваПартнера.Свойство("ДатаПоследнегоОбменаПоДокументам", ДатаПоследнегоОбменаПоДокументам) Тогда
		СвойстваПартнера.ДатаПоследнегоОбмена = ДатаПоследнегоОбменаПоДокументам;
	КонецЕсли;
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_Документы;
	
	СформироватьТаблицаТоваровПоклажедателя();
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	Попытка
		
		СоздатьЗапросДляМетода(СтруктураМетода, Запрос);
		
		Ответ = Соединение.Получить(Запрос);
		
		Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
		
		Если Ответ.КодСостояния = 200 Тогда
			СоздатьДокументы(ОпределитьТребуемыеДействияПоРаботеСДокументами(ПреобразоватьДанныеПоДокументамВТаблицуЗначений(Данные)));
		ИначеЕсли Ответ.КодСостояния = 401
			И ТипЗнч(Данные) = Тип("Структура")
			И Данные.Свойство("detail")
			И Данные.detail = "Full authentication is required to access this resource" Тогда 
			// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
			СвойстваПартнера.Токен = "";
			
			ОбновитьТокенДоступа();
			
			ПолучитьДокументы();
			
		Иначе
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
		КонецЕсли;
		
	Исключение
		ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
	КонецПопытки;
	
	СтруктураЗаписи = Новый Структура("Объект, Свойство, Значение", Партнер, "ДатаПоследнегоОбменаПоДокументам", ТекущаяДатаСеанса());
	
	РегистрыСведений.ДополнительныеРеквизиты_3PL.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

Процедура ПолучитьТранспортировки() Экспорт
	
	Перем Запрос;
	
	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_Транспортировки;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	НомерСтраницы = СтруктураМетода.Параметры.Получить("page");
	
	КоличествоОбъектовНаСтранице = СтруктураМетода.Параметры.Получить("size");
	
	Если КоличествоОбъектовНаСтранице = Неопределено Тогда
		КоличествоОбъектовНаСтранице = 50;
	КонецЕсли; 
	
	Пока Истина Цикл
		
		Попытка
			
			СоздатьЗапросДляМетода(СтруктураМетода, Запрос);
			
			Ответ = Соединение.Получить(Запрос);
			
			Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
			
			Если Ответ.КодСостояния = 200 Тогда
				ЗаполнитьНомераТранспортировок(ОпределитьДокументыДляТранспортировки(ПреобразоватьДанныеПоТранспортировкамВТаблицуЗначений(Данные)));
			ИначеЕсли Ответ.КодСостояния = 401
				И ТипЗнч(Данные) = Тип("Структура")
				И Данные.Свойство("detail")
				И Данные.detail = "Full authentication is required to access this resource" Тогда 
				// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
				СвойстваПартнера.Токен = "";
				
				ОбновитьТокенДоступа();
				
				ПолучитьТранспортировки();
				// Заглушка, чтобы завершить успешно предшествующие методы в рекурсии
				Данные = Новый Массив;
				
			Иначе
				ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
			КонецЕсли;
			
		Исключение
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
		КонецПопытки;
		
		Если Данные.Количество() < КоличествоОбъектовНаСтранице Тогда
			Прервать;
		КонецЕсли;
		// Изменим нумерацию страницы для получения данных
		Если НомерСтраницы <> Неопределено Тогда
			НомерСтраницы = НомерСтраницы + 1;
			СтруктураМетода.Параметры.Вставить("page", НомерСтраницы);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНомераТранспортировок(ТаблицаДанных)
	
	Для каждого СтрТаб Из ТаблицаДанных Цикл
		
		Если СтрТаб.ДокументСсылка = Неопределено Тогда
			
			Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось заполнить номер транспортировки '%1' по причине: не найден документ отгрузки по номеру %2",
				СтрТаб.НомерТранспортировки, СтрТаб.НомерВходящегоДокумента));
				
			Продолжить;
			
		КонецЕсли;
			
		ОбщиеФункции.УстановитьЗначениеСвойства(Новый Структура("Объект, Свойство, Значение",
			СтрТаб.ДокументСсылка, СвойстваПартнера.Свойство_НомерТранспортировки, СтрТаб.НомерТранспортировки));
		
	КонецЦикла; 
	
КонецПроцедуры
 
Процедура СоздатьДокументы(ТаблицаДанных)
	
	Для каждого СтрТаб Из ТаблицаДанных Цикл
		
		Если СтрТаб.ТребуемоеДействие = "Добавление" Тогда
			
			ДокументСсылка = Неопределено;
			
			Если СтрТаб.ТипДокумента = "7" Тогда
				Попытка
					_3PLСервер.СоздатьЗаказПоставщику(ПреобразоватьСтрокуТабЗначВСтруктуру(СтрТаб, ТаблицаДанных.Колонки), Строка(Партнер), ДокументСсылка);
				Исключение
					Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось создать заказ поставщику №'%1' по причине: 
					|%2", СтрТаб.НомерВходящегоДокумента, ОписаниеОшибки()));
				КонецПопытки;
			КонецЕсли;
			
			Если СтрТаб.ТипДокумента = "J" Тогда
				Попытка
					_3PLСервер.СоздатьДокументыОтгрузки(ПреобразоватьСтрокуТабЗначВСтруктуру(СтрТаб, ТаблицаДанных.Колонки), Строка(Партнер), ДокументСсылка);
				Исключение
					Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось создать документы отгрузки по заказу №'%1' по причине: 
					|%2", СтрТаб.НомерВходящегоДокумента, ОписаниеОшибки()));
				КонецПопытки;
			КонецЕсли;
			
			Если СтрТаб.ТипДокумента = "T" Тогда
				Попытка
					_3PLСервер.СоздатьВозвратОтПокупателя(ПреобразоватьСтрокуТабЗначВСтруктуру(СтрТаб, ТаблицаДанных.Колонки), Строка(Партнер), ДокументСсылка);
				Исключение
					Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось создать возврат от покупателя №'%1' по причине: 
					|%2", СтрТаб.НомерВходящегоДокумента, ОписаниеОшибки()));
				КонецПопытки;
			КонецЕсли;
			
			Если ДокументСсылка <> Неопределено Тогда
				ОбщиеФункции.УстановитьЗначениеСвойства(Новый Структура("Объект, Свойство, Значение",
					ДокументСсылка, СвойстваПартнера.Свойство_НомерВходящегоДокумента, СтрТаб.НомерВходящегоДокумента));
			КонецЕсли; 
			
		КонецЕсли;
		
		Если СтрТаб.ТребуемоеДействие = "Обновление" Тогда
			
			Если СтрТаб.ТипДокумента = "7" Тогда
				Попытка
					_3PLСервер.ОбновитьЗаказПоставщику(ПреобразоватьСтрокуТабЗначВСтруктуру(СтрТаб, ТаблицаДанных.Колонки), СвойстваПартнера.Свойство_НомерВходящегоДокумента);
				Исключение
					Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось обновить заказ поставщику №'%1' по причине: 
					|%2", СтрТаб.НомерВходящегоДокумента, ОписаниеОшибки()));
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьНоменклатуру() Экспорт
	
	Перем Запрос, ДатаПоследнегоОбменаПоМатериалам;
	
	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	Если СвойстваПартнера.Свойство("ДатаПоследнегоОбменаПоМатериалам", ДатаПоследнегоОбменаПоМатериалам) Тогда
		СвойстваПартнера.ДатаПоследнегоОбмена = ДатаПоследнегоОбменаПоМатериалам;
	КонецЕсли; 
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_Материалы;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	НомерСтраницы = СтруктураМетода.Параметры.Получить("page");
	
	КоличествоОбъектовНаСтранице = СтруктураМетода.Параметры.Получить("size");
	
	Если КоличествоОбъектовНаСтранице = Неопределено Тогда
		КоличествоОбъектовНаСтранице = 50;
	КонецЕсли; 
	
	Пока Истина Цикл
		
		Попытка
			
			СоздатьЗапросДляМетода(СтруктураМетода, Запрос);
			
			Ответ = Соединение.Получить(Запрос);
			
			Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
			
			Если Ответ.КодСостояния = 200 Тогда
				ОбновитьНоменклатуру(ОпределитьТребуемыеДействияПоРаботеСНоменклатурой(ПреобразоватьДанныеПоТоварамВТаблицуЗначений(Данные)));
			ИначеЕсли Ответ.КодСостояния = 401
				И ТипЗнч(Данные) = Тип("Структура")
				И Данные.Свойство("detail")
				И Данные.detail = "Full authentication is required to access this resource" Тогда 
				// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
				СвойстваПартнера.Токен = "";
				
				ОбновитьТокенДоступа();
				
				ПолучитьНоменклатуру();
				// Заглушка, чтобы завершить успешно предшествующие методы в рекурсии
				Данные = Новый Массив;
				
			Иначе
				ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
			КонецЕсли;
			
		Исключение
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
		КонецПопытки;
		
		Если Данные.Количество() < КоличествоОбъектовНаСтранице Тогда
			Прервать;
		КонецЕсли;
		// Изменим нумерацию страницы для получения данных
		Если НомерСтраницы <> Неопределено Тогда
			НомерСтраницы = НомерСтраницы + 1;
			СтруктураМетода.Параметры.Вставить("page", НомерСтраницы);
		КонецЕсли; 
		
	КонецЦикла;
	
	СтруктураЗаписи = Новый Структура("Объект, Свойство, Значение", Партнер, "ДатаПоследнегоОбменаПоМатериалам", ТекущаяДатаСеанса());
	
	РегистрыСведений.ДополнительныеРеквизиты_3PL.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

Процедура ОбновитьНоменклатуру(ТаблицаДанных)
	
	Для каждого СтрТаб Из ТаблицаДанных Цикл
		
		Если СтрТаб.ТребуемоеДействие = "Добавление" Тогда
			Попытка
				_3PLСервер.СоздатьНоменклатуру(ПреобразоватьСтрокуТабЗначВСтруктуру(СтрТаб, ТаблицаДанных.Колонки));
			Исключение
				Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось создать номенклатуру '%1' по причине:
				|%2", СтрТаб.Наименование, ОписаниеОшибки()));
			КонецПопытки;
		КонецЕсли; 
		
	КонецЦикла;  
	
КонецПроцедуры

Процедура ПолучитьПартии() Экспорт
	// ВНИМАНИЕ. Под партией подразумивается серия номенклатуры
	Перем Запрос, ДатаПоследнегоОбменаПоПартиям;
	
	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	Если СвойстваПартнера.Свойство("ДатаПоследнегоОбменаПоПартиям", ДатаПоследнегоОбменаПоПартиям) Тогда
		СвойстваПартнера.ДатаПоследнегоОбмена = ДатаПоследнегоОбменаПоПартиям;
	КонецЕсли; 
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_Партии;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	Попытка
		
		СоздатьЗапросДляМетода(СтруктураМетода, Запрос);
		
		Ответ = Соединение.Получить(Запрос);
		
		Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
		
		Если Ответ.КодСостояния = 200 Тогда
			ОбновитьПартии(ОпределитьТребуемыеДействияПоРаботеСПартиями(ПреобразоватьДанныеПоПартиямВТаблицуЗначений(Данные)));
		ИначеЕсли Ответ.КодСостояния = 401
			И ТипЗнч(Данные) = Тип("Структура")
			И Данные.Свойство("detail")
			И Данные.detail = "Full authentication is required to access this resource" Тогда 
			// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
			СвойстваПартнера.Токен = "";
			
			ОбновитьТокенДоступа();
			
			ПолучитьПартии();
			
		Иначе
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
		КонецЕсли;
		
	Исключение
		ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
	КонецПопытки;
	
	СтруктураЗаписи = Новый Структура("Объект, Свойство, Значение", Партнер, "ДатаПоследнегоОбменаПоПартиям", ТекущаяДатаСеанса());
	
	РегистрыСведений.ДополнительныеРеквизиты_3PL.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

Процедура ОбновитьПартии(ТаблицаДанных) 
	
	Для каждого СтрТаб Из ТаблицаДанных Цикл
		
		Если СтрТаб.ТребуемоеДействие = "Добавление" Тогда
			Попытка
				_3PLСервер.СоздатьСериюНоменклатуры(ПреобразоватьСтрокуТабЗначВСтруктуру(СтрТаб, ТаблицаДанных.Колонки));
			Исключение
				Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось создать серию по товару '%1' (Номер партии: %2) по причине:
				|%3", ?(ЗначениеЗаполнено(СтрТаб.Владелец), СтрТаб.Владелец, СтрТаб.КодПартнера), СтрТаб.НомерПартииПоставщика, ОписаниеОшибки()));
			КонецПопытки;
		КонецЕсли;
		
		Если СтрТаб.ТребуемоеДействие = "Обновление" Тогда
			Попытка
				_3PLСервер.ОбновитьСериюНоменклатуры(ПреобразоватьСтрокуТабЗначВСтруктуру(СтрТаб, ТаблицаДанных.Колонки), СтрТаб.СерияНоменклатуры);
			Исключение
				Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось обновить серию по товару '%1' (Номер партии: %2) по причине:
				|%3", ?(ЗначениеЗаполнено(СтрТаб.Владелец), СтрТаб.Владелец, СтрТаб.КодПартнера), СтрТаб.НомерПартииПоставщика, ОписаниеОшибки()));
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПодтвердитьПоставки() Экспорт
	
	Перем Запрос;

	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_ПодтвердитьПоставки;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	ТаблицаДокументов = _3PLСервер.ПолучитьНеподтвержденныеПоставки(Строка(Партнер));
	
	СоздатьЗапросДляМетода(СтруктураМетода, Запрос);
	
	Для каждого СтрТаб Из ТаблицаДокументов Цикл
		
		Если СтрТаб.ДокументПодтверждения = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Попытка
			
			МассивРасхождений = Новый Массив;
			
			ТелоЗапроса = СформироватьТелоЗапросаДляПодтвержденияПоставки(СтрТаб.Объект, СтрТаб.ДокументПодтверждения, СтрТаб.Идентификатор, МассивРасхождений);
			
			Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.Системная);
			
			Ответ = Соединение.ОтправитьДляОбработки(Запрос);
			
			Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
			
			Если Ответ.КодСостояния > 200 И Ответ.КодСостояния < 300 Тогда
				_3PLСервер.ОперацияВыполненаУспешно(СтрТаб.Объект, Строка(Партнер), "1С", ТелоЗапроса);
				Если ТипЗнч(СтрТаб.Объект) = Тип("ДокументСсылка.ОтгрузкаТоваровУслуг") Тогда
					СоздатьЗаявкуНаОперациюОбновленияПоставок(СтрТаб.Объект);
				КонецЕсли; 
			ИначеЕсли Ответ.КодСостояния = 401
				И ТипЗнч(Данные) = Тип("Структура")
				И Данные.Свойство("detail")
				И Данные.detail = "Full authentication is required to access this resource" Тогда 
				// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
				СвойстваПартнера.Токен = "";
				
				ОбновитьТокенДоступа();
				
				ПодтвердитьПоставки();
				
				Прервать;
				
			Иначе
				ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
			КонецЕсли;
			
		Исключение
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьМаршрутыЭкспедиторов() Экспорт
	
	Перем Запрос;

	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_ВыгрузитьМаршруты;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	ТаблицаДокументов = _3PLСервер.ПолучитьМаршрутыЭкспедиторовДляОтправки(Строка(Партнер));
	
	СоздатьЗапросДляМетода(СтруктураМетода, Запрос);
	
	Для каждого СтрТаб Из ТаблицаДокументов Цикл
		
		Попытка
			
			МассивРасхождений = Новый Массив;
			
			ТелоЗапроса = СформироватьТелоЗапросаДляОтправкиМаршрута(СтрТаб.МаршрутЭкспедитора);
			
			Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8);
			
			Ответ = Соединение.ОтправитьДляОбработки(Запрос);
			
			Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
			
			Если Ответ.КодСостояния > 200 И Ответ.КодСостояния < 300 Тогда
				_3PLСервер.ОперацияВыполненаУспешно(СтрТаб.МаршрутЭкспедитора, "1С", Строка(Партнер), ТелоЗапроса);
			ИначеЕсли Ответ.КодСостояния = 401
				И ТипЗнч(Данные) = Тип("Структура")
				И Данные.Свойство("detail")
				И Данные.detail = "Full authentication is required to access this resource" Тогда 
				// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
				СвойстваПартнера.Токен = "";
				
				ОбновитьТокенДоступа();
				
				ВыгрузитьМаршрутыЭкспедиторов();
				
				Прервать;
				
			Иначе
				ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
			КонецЕсли;
			
		Исключение
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры
 
Процедура ОбновитьТокенДоступа() Экспорт
	
	Если СвойстваПартнера = Неопределено Тогда
		ПрочитатьСвойстваПартнера();
	КонецЕсли;
	
	Если СвойстваПартнера.Свойство("Токен")
		И ЗначениеЗаполнено(СвойстваПартнера.Токен) Тогда
		Возврат;
	КонецЕсли; 
	
	Защита = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);

	Попытка
		СоединениеДляАвторизации = Новый HTTPСоединение(СвойстваПартнера.АдресСервисаАвторизации,, СвойстваПартнера.Пользователь, СвойстваПартнера.Пароль,,300, Защита);
	Исключение
		ВызватьИсключение ОбщиеФункции._СтрШаблон_("Не удалось подключиться к сервису '%1' по причине: %2", СвойстваПартнера.АдресСервисаАвторизации, ОписаниеОшибки());
	КонецПопытки;
	
	ТелоЗапроса =  СокрЛП("grant_type=client_credentials&scope="+СвойстваПартнера.ОбластьВидимостиДистрибьютораВИнтерфейсе);
	
	Запрос = Новый HTTPЗапрос;
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.Системная);
	Запрос.АдресРесурса = СвойстваПартнера.АдресРесурсаАвторизации;
	Запрос.Заголовки.Вставить("Accept", "*/*");
	Запрос.Заголовки.Вставить("Connection", "keep-alive");
	Запрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Запрос.Заголовки.Вставить("Host", СвойстваПартнера.АдресСервисаАвторизации);
	Запрос.Заголовки.Вставить("Content-Length", СтрДлина(ТелоЗапроса));
	
	Ответ = СоединениеДляАвторизации.ОтправитьДляОбработки(Запрос);
	
	Если Ответ.КодСостояния = 200 Тогда
		
		Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
		
		СтруктураЗаписи = РегистрыСведений.ДополнительныеРеквизиты_3PL.ПолучитьСтруктуруЗаписи();
		СтруктураЗаписи.Объект = Партнер;
		СтруктураЗаписи.Свойство = "Токен";
		СтруктураЗаписи.ЗначениеСтрока = ОбщиеФункции._СтрШаблон_("%1 %2", Данные.token_type, Данные.access_token);
		
		РегистрыСведений.ДополнительныеРеквизиты_3PL.ДобавитьЗапись(СтруктураЗаписи);
		
		СвойстваПартнера.Вставить(СтруктураЗаписи.Свойство, СтруктураЗаписи.ЗначениеСтрока);
		
	Иначе
		
		ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
		
	КонецЕсли;
	
	Соединение = Неопределено;
	
КонецПроцедуры

Процедура ПолучитьТокенПечати()
	
	Перем Запрос;
	
	Если Соединение = Неопределено Тогда
		УстановитьСоединение();
	КонецЕсли;
	
	ОписаниеМетода = МетодыОбменаСПартнером.МетодОбмена_ПолучитьТокенПечати;
	
	СтруктураМетода = СформироватьСтруктуруМетода(ОписаниеМетода);
	
	СоздатьЗапросДляМетода(СтруктураМетода, Запрос, Новый Структура());
	
	Попытка
		
		Ответ = Соединение.Получить(Запрос);
		
		Если Ответ.КодСостояния >= 200 И Ответ.КодСостояния < 300 Тогда
			СвойстваПартнера.ТокенПечати = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		ИначеЕсли Ответ.КодСостояния = 401 тогда
			
			Данные = ПолучитьДанныеИзОтвета(Ответ, Запрос.АдресРесурса);
			
			Если ТипЗнч(Данные) = Тип("Структура")
				И Данные.Свойство("detail")
				И Данные.detail = "Full authentication is required to access this resource" Тогда 
				// Время действия токена истекло. Обновим его и ещё раз вызовем метод обмена
				СвойстваПартнера.Токен = "";
				
				ОбновитьТокенДоступа();
				
				ПолучитьТокенПечати();
				
			КонецЕсли;
			
		Иначе
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, Ответ.ПолучитьТелоКакСтроку());
		КонецЕсли;
		
	Исключение
		ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПроверкаЗаполнения()
	
	ТекстСообщения = "";
	
	Если Партнер.Пустая() Тогда
		ТекстСообщения = ТекстСообщения + "Не удалось получить настройки партнера по причине: не заполнен 'Партнер'";
	КонецЕсли;
	
	Если НЕ Партнер.Пустая() И СвойстваПартнера = Неопределено Тогда
		ТекстСообщения = ТекстСообщения + ОбщиеФункции._СтрШаблон_("Не найдены свойства партнера ", Партнер);
	КонецЕсли;
	
	МассивПроверяемыхСвойств = ОбщиеФункции.РазложитьСтрокуВМассив("АдресСервиса;АдресСервисаАвторизации;АдресРесурсаАвторизации;КодДистрибьютора;ОбластьВидимостиДистрибьютораВИнтерфейсе;Пароль;Пользователь;ИспользоватьЗащищенноеСоединение
	|Контракт;Склад;ГруппаНоменклатуры;ОсновнойПоставщик;ОсновнаяОрганизация;ОсновнойДоговорПриемаНаХранение;
	|ОсновнойТипЦенКонтрагента;КачествоДляБлокировки;ОсновноеПодразделение;ОсновнойСпособРасчетов;ОсновнойВидПоставки;ВидПоставки_Самовывоз;
	|НаименованиеДоговораОтветХранения;Свойство_КодГрузополучателя;Свойство_НомерВходящегоДокумента;Свойство_НомерТранспортировки;Свойство_КодПричиныНеполнойКомплектацииПепси;
	|ОсновнойКодПричиныНеполнойКомплектации;ОсновнойСклад;КачествоПретензия;КостЦентр;СобственныеАрендодатели;Свойство_КодСотрудникаСАП;Свойство_КодТранспортаСАП;
	|ТехническоеИмяМестаОтгрузки;КаталогХраненияПечатныхФорм;НомерВиртуальнойПартии", ";");
	
	Для каждого ИмяСвойства Из МассивПроверяемыхСвойств Цикл
		
		Если ПустаяСтрока(ИмяСвойства) Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НЕ СвойстваПартнера.Свойство(ИмяСвойства) Тогда
			ТекстСообщения = ТекстСообщения + ОбщиеФункции._СтрШаблон_("В настройках обмена не найдено свойство '%1'", ИмяСвойства);
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ТекстСообщения <> "" Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОБЩИЕ

Функция ОпределитьЕдиницуИзмеренияПепси(ЕдиницаИзмерения)
	
	ЕдиницаИзмеренияПепси = "";
	
	Если ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код = "796" Тогда
		ЕдиницаИзмеренияПепси = "EA";
	ИначеЕсли ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код = "166" Тогда
		ЕдиницаИзмеренияПепси = "KG";
	Иначе
		ЕдиницаИзмеренияПепси = "CS";
	КонецЕсли;
	
	Возврат ЕдиницаИзмеренияПепси;
	
КонецФункции

Процедура ЗаписатьСвойствоИЗначениеJSON(Запись, ИмяСвойства, пЗначение = Неопределено) Экспорт
	
	Запись.ЗаписатьИмяСвойства(ИмяСвойства);
	Если пЗначение <> Неопределено Тогда
		Если ТипЗнч(пЗначение) = Тип("Дата") Тогда
			Запись.ЗаписатьЗначение(ЗаписатьДатуJSON(пЗначение, ФорматДатыJSON.ISO));
		ИначеЕсли ТипЗнч(пЗначение) = Тип("Число") Тогда
			Запись.ЗаписатьЗначение(Формат(пЗначение, "ЧРД=.; ЧН=0; ЧГ=0"));
		Иначе
			Запись.ЗаписатьЗначение(Строка(пЗначение));
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьДату(ДатаВСтроке, Формат)
	
	ПустаяДата = Дата(1,1,1);
	
	Если НЕ ЗначениеЗаполнено(ДатаВСтроке) Тогда
		Возврат ПустаяДата;
	КонецЕсли;

	// В интерфейсах дата приходит в разных форматах.
	Если Формат = ФорматДатыJSON.ISO Тогда
		Возврат ПрочитатьДатуJSON(ДатаВСтроке, Формат)
	ИначеЕсли Формат = "yyyyMMdd" Тогда
		Возврат Дата(ДатаВСтроке);
	ИначеЕсли Формат = "dd.MM.yyyy" Тогда	
		Возврат Дата(ДатаВСтроке+" 00:00:00");
	Иначе
		Возврат ПустаяДата;
	КонецЕсли; 
	
КонецФункции

Функция ПреобразоватьСтрокуТабЗначВСтруктуру(СтрокаТабЗнач, КолонкиТабЗнач)
	
	СписокСвойств = "";
	
	Для каждого Колонка Из КолонкиТабЗнач Цикл
		СписокСвойств = СписокСвойств + ?(СписокСвойств = "", "", ",") + Колонка.Имя;
	КонецЦикла;
	
	МассивСвойств = ОбщиеФункции.РазложитьСтрокуВМассив(СписокСвойств, ",");
	
	СтруктураСтроки = Новый Структура;
	
	Для каждого Свойство Из МассивСвойств Цикл
		СтруктураСтроки.Вставить(Свойство, СтрокаТабЗнач[Свойство]);
	КонецЦикла; 
	
	Возврат СтруктураСтроки;
	
КонецФункции

Функция СформироватьСтруктуруМетода(ОписаниеМетода)
	
	СтруктураМетода = Новый Структура;
	СоответствиеПараметров = Новый Соответствие;
	СоответствиеЗаголовков = Новый Соответствие;
	
	Для каждого Реквизит Из ОписаниеМетода.ДополнительныеРеквизиты Цикл
		
		Если Найти(ВРЕГ(Реквизит.ИмяРеквизита), "ПАРАМЕТР") > 0 Тогда
			
			СоответствиеПараметров.Вставить(Реквизит.ЗначениеСтрока, Реквизит.Значение);
			
			Продолжить;
			
		ИначеЕсли Найти(ВРЕГ(Реквизит.ИмяРеквизита), "ЗАГОЛОВОК") > 0 Тогда
			
			СоответствиеЗаголовков.Вставить(Реквизит.ЗначениеСтрока, Реквизит.Значение);
			
			Продолжить;
			
		КонецЕсли;
				
		СтруктураМетода.Вставить(Реквизит.ИмяРеквизита, ?(ЗначениеЗаполнено(Реквизит.Значение), Реквизит.Значение, Реквизит.ЗначениеСтрока));
		
	КонецЦикла;
	
	СтруктураМетода.Вставить("Параметры", СоответствиеПараметров);
	СтруктураМетода.Вставить("Заголовки", СоответствиеЗаголовков);
	
	Возврат СтруктураМетода;
	
КонецФункции

Функция СформироватьТекстИсключения(АдресРесурса, ОписаниеОшибки)
	
	ПолныйПутьКРесурсу = ОбщиеФункции._СтрШаблон_("https://%1%2", Соединение.Сервер, АдресРесурса);
	
	Возврат ОбщиеФункции._СтрШаблон_("Ошибка при выполнении запроса к ресурсу '%1':%2", ПолныйПутьКРесурсу, ОписаниеОшибки);
	
КонецФункции

Процедура СоздатьЗапросДляМетода(СтруктураМетода, Запрос, ДопПараметрыЗапроса = Неопределено)
	// Укажаем обязательные параметры
	ПараметрыЗапроса = ОбщиеФункции._СтрШаблон_("?requiredTimeStamp.greaterThan=%1", Формат(СвойстваПартнера.ДатаПоследнегоОбмена - 10800, "ДФ='yyyy-MM-dd HH:mm:ss'"));
	// Укажаем обязательные заголовки
	Заголовки = Новый Соответствие;
	СтруктураМетода.Заголовки.Вставить("Plant", СвойстваПартнера.КодДистрибьютора);
	СтруктураМетода.Заголовки.Вставить("Host", СвойстваПартнера.АдресСервиса);
	СтруктураМетода.Заголовки.Вставить("Authorization", СвойстваПартнера.Токен);
	
	Если СтруктураМетода.ТипМетода = "GET" Тогда
		
		Для каждого КлючИЗначение Из СтруктураМетода.Параметры Цикл
			ПараметрыЗапроса = ПараметрыЗапроса + ОбщиеФункции._СтрШаблон_("%1%2=%3",
				?(ПараметрыЗапроса = "?", "", "&"), КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		// Замена обязательных параметров
		Если ДопПараметрыЗапроса <> Неопределено 
			И ТипЗнч(ДопПараметрыЗапроса) = Тип("Структура") Тогда
			
			ПараметрыЗапроса = "?";
			
			Для каждого КлючИЗначение Из ДопПараметрыЗапроса Цикл
				ПараметрыЗапроса = ПараметрыЗапроса + ОбщиеФункции._СтрШаблон_("%1%2=%3",
					?(ПараметрыЗапроса = "?", "", "&"), КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
			
		КонецЕсли; 
			
	Иначе
		ПараметрыЗапроса = "";
	КонецЕсли; 

	Запрос = Новый HTTPЗапрос;
	Запрос.АдресРесурса = СтруктураМетода.АдресРесурса + ПараметрыЗапроса;
	Запрос.Заголовки = СтруктураМетода.Заголовки;
	
КонецПроцедуры
 
Функция ПолучитьДанныеИзОтвета(Ответ, АдресРесурса)
	
	Перем РезультатЗапроса;
	
	Если НЕ ЗначениеЗаполнено(Ответ.ПолучитьТелоКакСтроку()) Тогда
		Возврат Новый Структура;
	КонецЕсли; 
	
	Попытка
		
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		РезультатЗапроса = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		
	Исключение
		ВызватьИсключение ОбщиеФункции._СтрШаблон_("При обработке ответа по ресурсу '%1' произошла ошибка: %2",
			АдресРесурса, ОписаниеОшибки());
	КонецПопытки;
	
	Возврат РезультатЗапроса
	
КонецФункции
 
Процедура ПрочитатьСвойстваПартнера()
	
	Если СвойстваПартнера <> Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СвойстваПартнера = РегистрыСведений.ДополнительныеРеквизиты_3PL.ПолучитьСвойстваОбъекта(Партнер);
	
	Если СвойстваПартнера.Количество() = 0 Тогда
		СвойстваПартнера = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПрочитатьМетодыОбменаСПартнером()
	
	Если МетодыОбменаСПартнером <> Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	МетодыОбменаСПартнером = РегистрыСведений.ДополнительныеРеквизиты_3PL.ПолучитьМетодыОбмена(Партнер);
	
	Если МетодыОбменаСПартнером.Количество() = 0 Тогда
		МетодыОбменаСПартнером = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьСоединение()
	
	ПрочитатьСвойстваПартнера();
	
	ПрочитатьМетодыОбменаСПартнером();
	
	ПроверкаЗаполнения();
	
	ОбновитьТокенДоступа();
	
	Защита = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);

	Попытка
		Соединение = Новый HTTPСоединение(СвойстваПартнера.АдресСервиса,, СвойстваПартнера.Пользователь, СвойстваПартнера.Пароль,,60, Защита);
	Исключение
		ВызватьИсключение ОбщиеФункции._СтрШаблон_("Не удалось подключиться к сервису '%1' по причине: %2", СвойстваПартнера.АдресСервиса, ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция ДобавитьЛидирующиеНулиВКодТовара(Знач Код)
	// Почему-то у ПепсиКо одни интерфейсы работают с кодами без 0, а другие их требуют
	ДлинаКода = 18;
	
	ТекДлинаКода = СтрДлина(Код);
	
	Для Сч = 1 По ДлинаКода - ТекДлинаКода Цикл
		Код = "0" + Код;
	КонецЦикла;
	
	Возврат Код
	
КонецФункции

Функция УдалитьЛидирущиеНулиИзКодаТовара(Знач Код)
	
	Возврат Формат(Число(Код), "ЧГ=0");
	
КонецФункции

Процедура ТестированиеИнтерфейсов()
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать("D:\1С (Разное)\МОЗАЙКА\prints.json");
	
	РезультатЗапроса = Неопределено;
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Текст.ПолучитьТекст());
	РезультатЗапроса = ПрочитатьJSON(Чтение);
	Чтение.Закрыть();
	//
	ПрочитатьСвойстваПартнера();
	//
	ПроверкаЗаполнения();
	
	СвойстваПартнера.ТокенПечати = "sig=NL6OuThR%2F14ux7kR7guPeScTtjtJHUCXYDwscx0MIq0%3D&st=2021-09-07T08%3A00%3A18Z&se=2021-09-07T12%3A00%3A18Z&sv=2019-02-02&sp=rl&sr=c";
	
	ТаблицаПечФорм = СформироватьТаблицуПечФорм();
	
	ДобавитьСтрокиВТаблицуПечФорм(ТаблицаПечФорм, РезультатЗапроса);
	
	ЗагрузитьПечатныеФормы(ТаблицаПечФорм);
		
КонецПроцедуры

Процедура УдалениеТестовыхДанных()
	
	ВыборкаДляУдаления = Справочники.Номенклатура.Выбрать(СвойстваПартнера.ГруппаНоменклатуры);
	
	КолУдаленных = 1;
	Пока ВыборкаДляУдаления.Следующий() Цикл
		
		Если ВыборкаДляУдаления.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли; 
		
		#Если Клиент Тогда
			Состояние("Удалено: "+КолУдаленных);
		#КонецЕсли
		
		ВыборкаЕдиницы = Справочники.ЕдиницыИзмерения.Выбрать(, ВыборкаДляУдаления.Ссылка);
		
		Пока ВыборкаЕдиницы.Следующий() Цикл
			
			Попытка
				ЕдиницаОбъект = ВыборкаЕдиницы.Ссылка.ПолучитьОбъект();
				ЕдиницаОбъект.Удалить();
			Исключение
				Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось удалить единицы измерения по товару '%1' по причине: %2", ВыборкаДляУдаления.Ссылка, ОписаниеОшибки()));
			КонецПопытки;
			
		КонецЦикла;
		
		Товар = ВыборкаДляУдаления.Ссылка.ПолучитьОбъект();
		Товар.Удалить();
		
		КолУдаленных = КолУдаленных+1;
		
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти 

#Область ПЕЧАТНЫЕ_ФОРМЫ

Процедура ЗагрузитьПечатныеФормы(ТаблицаПечФорм)
	
	Защита = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);
	
	Попытка
		Соединение = Новый HTTPСоединение(СвойстваПартнера.АдресСервисаПечати,, , ,,600, Защита);
	Исключение
		ВызватьИсключение ОбщиеФункции._СтрШаблон_("Не удалось подключиться к сервису '%1' по причине: %2", СвойстваПартнера.АдресСервиса, ОписаниеОшибки());
	КонецПопытки;
	
	Запрос = Новый HTTPЗапрос;
	Запрос.Заголовки = Новый Соответствие;
	
	Для каждого СтрТаб Из ТаблицаПечФорм Цикл
		
		ПечФорма = Новый Файл(СтрТаб.ПутьКФайлу);
		
		Если ПечФорма.Существует() Тогда
			Продолжить;
		КонецЕсли; 
		
		КаталогПоставки = Новый Файл(ОбщиеФункции._СтрШаблон_("%1\%2", СвойстваПартнера.КаталогХраненияПечатныхФорм, СтрТаб.НомерПоставки));
		
		Если НЕ КаталогПоставки.Существует() Тогда
			СоздатьКаталог(КаталогПоставки.ПолноеИмя);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СтрТаб.НомерВходящегоДокумента) Тогда
			
			КаталогЗаказа = Новый Файл(ОбщиеФункции._СтрШаблон_("%1\%2\%3", СвойстваПартнера.КаталогХраненияПечатныхФорм, СтрТаб.НомерПоставки, СтрТаб.НомерВходящегоДокумента));
			
			Если НЕ КаталогЗаказа.Существует() Тогда
				СоздатьКаталог(КаталогЗаказа.ПолноеИмя);
			КонецЕсли; 
			
		КонецЕсли;  
		
		Попытка
			
			Запрос.АдресРесурса = СтрТаб.Ссылка + "?" +СвойстваПартнера.ТокенПечати;
		
			Ответ = Соединение.Получить(Запрос);
			
			Если Ответ.КодСостояния >= 200 И Ответ.КодСостояния < 300 Тогда
				
				ДвоичныеДанные = Ответ.ПолучитьТелоКакДвоичныеДанные();
				ДвоичныеДанные.Записать(СтрТаб.ПутьКФайлу);
				
			Иначе
				
				ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
				
			КонецЕсли;
			
		Исключение
			ВызватьИсключение СформироватьТекстИсключения(Запрос.АдресРесурса, ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДобавитьСтрокиВТаблицуПечФорм(ТаблицаПечФорм, Данные)
	
	КоличествоЭлементов = Данные.Количество();
	
	КаталогХранения = СвойстваПартнера.КаталогХраненияПечатныхФорм;
	
	Для Сч = 0 По КоличествоЭлементов-1 цикл
		
		Элемент = Данные.Получить(Сч);
		
		НомерПоставки = Элемент.shipmentNumber;
		
		НомерВходящегоДокумента = ?(Элемент.deliveryNumber = "none", "", Элемент.deliveryNumber);
		
		Состав = Элемент.printDetails;
		
		Для каждого ДетальнаяЗапись Из Состав Цикл
			
			НовСтр = ТаблицаПечФорм.Добавить();
			НовСтр.НомерПоставки 			= НомерПоставки;
			НовСтр.НомерВходящегоДокумента 	= НомерВходящегоДокумента;
			НовСтр.Ссылка 					= СтрЗаменить(ДетальнаяЗапись.fileDownloadUri, "https://"+СвойстваПартнера.АдресСервисаПечати, "");
			НовСтр.ПутьКФайлу 				= ОбщиеФункции._СтрШаблон_("%1\%2\%3\%4_%5.pdf", КаталогХранения, НомерПоставки, НомерВходящегоДокумента, 
				ДетальнаяЗапись.printOrder, ДетальнаяЗапись.fileName);
			НовСтр.Токен 					= СвойстваПартнера.ТокенПечати;
			
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры
 
Функция СформироватьТаблицуПечФорм()
	
	ТабЗнач = Новый ТаблицаЗначений;
	ТабЗнач.Колонки.Добавить("НомерПоставки", 			Новый ОписаниеТипов("Строка"));
	ТабЗнач.Колонки.Добавить("НомерВходящегоДокумента", Новый ОписаниеТипов("Строка"));
	ТабЗнач.Колонки.Добавить("Ссылка", 					Новый ОписаниеТипов("Строка"));
	ТабЗнач.Колонки.Добавить("ПутьКФайлу", 				Новый ОписаниеТипов("Строка"));
	ТабЗнач.Колонки.Добавить("Токен", 					Новый ОписаниеТипов("Строка"));
	
	Возврат ТабЗнач;
	
КонецФункции
 
Функция ПолучитьЗаявкиНаЗагрузкуПечатныхФорм()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Объект,
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Текст КАК НомерПоставки
	|ИЗ
	|	РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций
	|ГДЕ
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Источник = &Приемник
	|	И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Приемник = ""1С""
	|	И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Статус = &Статус
	|   И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Идентификатор = ""prints""";
	
	Запрос.УстановитьПараметр("Приемник", Строка(Партнер));
	Запрос.УстановитьПараметр("Статус", Справочники.СтатусыЗаявок.Новая); 
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СоздатьЗаявкуНаПолучениеПечатныхФорм(Объект, НомерПоставки)
	
	РегистраторЗаписи = Документы.РегистраторЗаписи.СоздатьНовыйДокумент("" + Объект);
	
	_3PLСервер.ДобавитьЗаписьПоДокументуВЖурналОпераций(РегистраторЗаписи, Строка(Партнер), "1С",
		Справочники.СтатусыЗаявок.Новая, "prints", ТекущаяДатаСеанса(),, НомерПоставки);
	
КонецПроцедуры

#КонецОбласти 

#Область МАРШРУТЫ

Функция ПолучитьДанныеПоМаршрутуДляЗаполнения(ДокументСсылка)
	
	МассивКодовСобственныхАрендодателей = ОбщиеФункции.РазложитьСтрокуВМассив(СвойстваПартнера.СобственныеАрендодатели, ";");
	
	Список_СобственныеАрендодатели = Новый СписокЗначений;
	
	Для каждого Элемент Из МассивКодовСобственныхАрендодателей Цикл
		Список_СобственныеАрендодатели.Добавить(Справочники.Контрагенты.НайтиПоКоду(Элемент));
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокМаршрут.Ссылка КАК МаршрутЭкспедитора,
		|	ВЫБОР
		|		КОГДА ДокМаршрут.Транспорт.Арендодатель В (&СобственныеАрендодатели)
		|			ТОГДА ""I""
		|		ИНАЧЕ ""E""
		|	КОНЕЦ КАК ВидАрендныхОтношений,
		|	""3PLOCH"" КАК ТехническоеИмяМаршрута,
		|	ЕСТЬNULL(СвойстваТранспорта.Значение, ""-"") КАК КодТранспортногоСредства,
		|	СпрТранспорт.Госномер КАК НаименованиеТранспорта,
		|	ЕСТЬNULL(СвойстваФизЛица.Значение, ""-"") КАК КодСотрудникаСАП,
		|	ДокМаршрут.Экспедитор КАК ИмяСотрудника,
		|	ДокМаршрут.ДлинаМаршрута КАК ДлинаМаршрута,
		|	"""" КАК КодКассира,
		|	ДокМаршрут.НачалоМаршрута КАК ВремяНачалоМаршрута,
		|	ДокМаршрут.ОкончаниеМаршрута КАК ВремяОкончанияМаршрута,
		|	КОЛИЧЕСТВО(МаршрутДокументыОснования.ДокументОснование) КАК КоличествоДокументовМаршрута,
		|	МаршрутДокументыОснования.ДокументОснование КАК ДокументОснование,
		|	МаршрутДокументыОснования.НомерТочкиРазгрузки КАК НомерТочкиРазгрузки,
		|	""SIT"" КАК ТипОстановки,
		|	ЕСТЬNULL(СвойстваТорговыхТочек.Значение, ""-"") КАК КодГрузополучателя,
		|	ЕСТЬNULL(СвойстваЗаявокПоклажедателя.Значение, ""-"") КАК НомерВходящегоДокумента
		|ИЗ
		|	Документ.МаршрутЭкспедитора КАК ДокМаршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутЭкспедитора.ДокументыОснования КАК МаршрутДокументыОснования
		|		ПО ДокМаршрут.Ссылка = МаршрутДокументыОснования.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТранспортДоставки КАК СпрТранспорт
		|		ПО ДокМаршрут.Транспорт = СпрТранспорт.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваТранспорта
		|		ПО (СпрТранспорт.Ссылка = СвойстваТранспорта.Объект)
		|			И (СвойстваТранспорта.Свойство = &КодТранспортаСАП)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваФизЛица
		|		ПО ДокМаршрут.Экспедитор = СвойстваФизЛица.Объект
		|			И (СвойстваФизЛица.Свойство = &КодСотрудникаСАП)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваТорговыхТочек
		|		ПО (МаршрутДокументыОснования.ПунктРазгрузки = СвойстваТорговыхТочек.Объект)
		|			И (СвойстваТорговыхТочек.Свойство = &КодТорговойТочки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваЗаявокПоклажедателя
		|		ПО (МаршрутДокументыОснования.ДокументОснование = СвойстваЗаявокПоклажедателя.Объект)
		|			И (СвойстваЗаявокПоклажедателя.Свойство = &НомерВходящегоДокумента)
		|ГДЕ
		|	ДокМаршрут.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокМаршрут.Ссылка,
		|	СпрТранспорт.Госномер,
		|	ДокМаршрут.Экспедитор,
		|	ДокМаршрут.ДлинаМаршрута,
		|	ДокМаршрут.НачалоМаршрута,
		|	ДокМаршрут.ОкончаниеМаршрута,
		|	МаршрутДокументыОснования.ДокументОснование,
		|	МаршрутДокументыОснования.НомерТочкиРазгрузки,
		|	ЕСТЬNULL(СвойстваЗаявокПоклажедателя.Значение, ""-""),
		|	ВЫБОР
		|		КОГДА ДокМаршрут.Транспорт.Арендодатель В (&СобственныеАрендодатели)
		|			ТОГДА ""I""
		|		ИНАЧЕ ""E""
		|	КОНЕЦ,
		|	ЕСТЬNULL(СвойстваТранспорта.Значение, ""-""),
		|	ЕСТЬNULL(СвойстваФизЛица.Значение, ""-""),
		|	ЕСТЬNULL(СвойстваТорговыхТочек.Значение, ""-"")
		|
		|УПОРЯДОЧИТЬ ПО
		|	МаршрутЭкспедитора,
		|	МаршрутДокументыОснования.НомерТочкиРазгрузки
		|ИТОГИ
		|	МАКСИМУМ(ВидАрендныхОтношений),
		|	МАКСИМУМ(ТехническоеИмяМаршрута),
		|	МАКСИМУМ(КодТранспортногоСредства),
		|	МАКСИМУМ(НаименованиеТранспорта),
		|	МАКСИМУМ(КодСотрудникаСАП),
		|	МАКСИМУМ(ИмяСотрудника),
		|	МАКСИМУМ(ДлинаМаршрута),
		|	МАКСИМУМ(КодКассира),
		|	МАКСИМУМ(ВремяНачалоМаршрута),
		|	МАКСИМУМ(ВремяОкончанияМаршрута),
		|	СУММА(КоличествоДокументовМаршрута),
		|	МАКСИМУМ(ДокументОснование),
		|	МАКСИМУМ(ТипОстановки),
		|	МАКСИМУМ(КодГрузополучателя)
		|ПО
		|	МаршрутЭкспедитора,
		|	НомерТочкиРазгрузки";
	
	Запрос.УстановитьПараметр("КодСотрудникаСАП", 			СвойстваПартнера.Свойство_КодСотрудникаСАП);
	Запрос.УстановитьПараметр("КодТорговойТочки", 			СвойстваПартнера.Свойство_КодГрузополучателя);
	Запрос.УстановитьПараметр("КодТранспортаСАП", 			СвойстваПартнера.Свойство_КодТранспортаСАП);
	Запрос.УстановитьПараметр("НомерВходящегоДокумента", 	СвойстваПартнера.Свойство_НомерВходящегоДокумента);
	Запрос.УстановитьПараметр("СобственныеАрендодатели", 	Список_СобственныеАрендодатели);
	Запрос.УстановитьПараметр("Ссылка", 					ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаМаршрутЭкспедитора = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ВыборкаМаршрутЭкспедитора;
		
КонецФункции

Функция СформироватьТелоЗапросаДляОтправкиМаршрута(ДокументСсылка)
	
	 ТелоЗапроса = "";
	 
	 ВыборкаПоМаршруту = ПолучитьДанныеПоМаршрутуДляЗаполнения(ДокументСсылка);
	 ВыборкаПоМаршруту.Следующий();
	 
	 ВремяНачалаМаршрута =		ДокументСсылка.ДатаЭкспедиции + (ВыборкаПоМаршруту.ВремяНачалоМаршрута - Дата(1,1,1));
	 ВремяОкончанияМаршрута = 	ДокументСсылка.ДатаЭкспедиции + (ВыборкаПоМаршруту.ВремяОкончанияМаршрута - Дата(1,1,1));
	 
	 Запись = Новый ЗаписьJSON;
	 Запись.УстановитьСтроку();
	 Запись.ЗаписатьНачалоОбъекта();
	 
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "locationID", 	СвойстваПартнера.ТехническоеИмяМестаОтгрузки);
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "plantNumber", 	СвойстваПартнера.КодДистрибьютора);
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "interfaceName", "DeliveryRouting");
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "shipmentType", 	ВыборкаПоМаршруту.ВидАрендныхОтношений);
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "routeCode", 	ВыборкаПоМаршруту.ТехническоеИмяМаршрута);
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "equipmentID", 	ВыборкаПоМаршруту.КодТранспортногоСредства);
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "equipmentName", СтрЗаменить(ВыборкаПоМаршруту.НаименованиеТранспорта, " ", ""));
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "employeeID", 	ВыборкаПоМаршруту.КодСотрудникаСАП);
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "employeeName", 	ВыборкаПоМаршруту.ИмяСотрудника);
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "employee2ID", 	ВыборкаПоМаршруту.КодКассира);
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "distance", 		ВыборкаПоМаршруту.ДлинаМаршрута);
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "startTime", 	ЗаписатьДатуJSON(ВремяНачалаМаршрута, ФорматДатыJSON.ISO));
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "endTime", 		ЗаписатьДатуJSON(ВремяОкончанияМаршрута, ФорматДатыJSON.ISO));
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "exti2", 		ОбщиеФункции._СтрШаблон_("%1_%2", ДокументСсылка.Номер, Формат(ДокументСсылка.Дата, "ДФ=yyyyMMdd")));
		 
		 ВыборкаПоНомерамРазгрузки = ВыборкаПоМаршруту.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		 
		 ЗаписатьСвойствоИЗначениеJSON(Запись, "stops");
		 СреднееВремяПосещения = 1200;
		 Если ЗначениеЗаполнено(ВремяНачалаМаршрута) И ЗначениеЗаполнено(ВремяОкончанияМаршрута) Тогда
		 	 СреднееВремяПосещения = (ВремяОкончанияМаршрута - ВремяНачалаМаршрута - СреднееВремяПосещения) / ВыборкаПоМаршруту.КоличествоДокументовМаршрута;
		 КонецЕсли;
		 
		 ДатаПосещения = ВремяНачалаМаршрута + СреднееВремяПосещения;
		 Запись.ЗаписатьНачалоМассива();
		 Пока ВыборкаПоНомерамРазгрузки.Следующий() Цикл
			 
			     Запись.ЗаписатьНачалоОбъекта();
				 
				 	ЗаписатьСвойствоИЗначениеJSON(Запись, "stopIx", 		ВыборкаПоНомерамРазгрузки.НомерТочкиРазгрузки);
					ЗаписатьСвойствоИЗначениеJSON(Запись, "arrivalTime", 	ЗаписатьДатуJSON(ДатаПосещения, ФорматДатыJSON.ISO));
					ЗаписатьСвойствоИЗначениеJSON(Запись, "departureTime", 	ЗаписатьДатуJSON(ДатаПосещения, ФорматДатыJSON.ISO));
					ЗаписатьСвойствоИЗначениеJSON(Запись, "locationType", 	ВыборкаПоНомерамРазгрузки.ТипОстановки);
					ЗаписатьСвойствоИЗначениеJSON(Запись, "locationID", 	ВыборкаПоНомерамРазгрузки.КодГрузополучателя);
					
					ЗаписатьСвойствоИЗначениеJSON(Запись, "orders");
					
					ВыборкаПоДокументам = ВыборкаПоНомерамРазгрузки.Выбрать();
					
					Запись.ЗаписатьНачалоМассива();
					Пока ВыборкаПоДокументам.Следующий() Цикл
						
						Запись.ЗаписатьНачалоОбъекта();
							ЗаписатьСвойствоИЗначениеJSON(Запись, "orderNumber", ВыборкаПоДокументам.НомерВходящегоДокумента);
						Запись.ЗаписатьКонецОбъекта();
						
					КонецЦикла; 
					Запись.ЗаписатьКонецМассива();
				 
				 Запись.ЗаписатьКонецОбъекта();
				 
			     ДатаПосещения = ДатаПосещения + СреднееВремяПосещения;
				 
		 КонецЦикла; 
		 Запись.ЗаписатьКонецМассива();
	Запись.ЗаписатьКонецОбъекта();
		 
	ТелоЗапроса = Запись.Закрыть();
		 
	Возврат ТелоЗапроса;
	
КонецФункции
 
#КонецОбласти 

#Область ОСТАТКИ

Функция СформироватьТелоЗапросаПоТекущимОстаткам()
	
	ТелоЗапроса = "";
	
	Версия = "000";
	ЛогическийСклад = СокрЛП(СвойстваПартнера.ОсновнойСклад.Код);
	Завод = СвойстваПартнера.КодДистрибьютора;
	ЛогическийСкладБлокировки = СокрЛП(СвойстваПартнера.СкладБлокировки.Код);
	КачествоДляБлокировки = СвойстваПартнера.КачествоДляБлокировки;
	
	ТаблицаОстатков = _3PLСервер.ПолучитьТекущиеОстатки(, СвойстваПартнера.Склад, СвойстваПартнера.Контракт);
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	
	Запись.ЗаписатьНачалоОбъекта();
	
	Запись.ЗаписатьИмяСвойства("inventorySnapshotHeader");
	
	Запись.ЗаписатьНачалоОбъекта();
	
	ЗаписатьСвойствоИЗначениеJSON(Запись, "interfaceName", "inventorysnapshot");
	
	Запись.ЗаписатьИмяСвойства("invSnap");
	
	Запись.ЗаписатьНачалоМассива();
	
	Для каждого СтрТаб Из ТаблицаОстатков Цикл
		
		Запись.ЗаписатьНачалоОбъекта();
		
		ЗаписатьСвойствоИЗначениеJSON(Запись, "skuid",         ДобавитьЛидирующиеНулиВКодТовара(СтрТаб.Номенклатура.Артикул));
		
		ЗаписатьСвойствоИЗначениеJSON(Запись, "plant",         Завод);
		
		ЗаписатьСвойствоИЗначениеJSON(Запись, "storloc",       ?(СтрТаб.СерияНоменклатуры.Используется, ЛогическийСклад, ЛогическийСкладБлокировки));
		
		ЗаписатьСвойствоИЗначениеJSON(Запись, "lot",           СтрТаб.СерияНоменклатуры.НомерПартииПоставщика);
		
		ЗаписатьСвойствоИЗначениеJSON(Запись, "version",       Версия);
		
		ЗаписатьСвойствоИЗначениеJSON(Запись, "baseuom",       ОпределитьЕдиницуИзмеренияПепси(СтрТаб.ЕдиницаИзмерения));
		
		ЗаписатьСвойствоИЗначениеJSON(Запись, "availableqty",  ?(СтрТаб.Качество = Справочники.Качество.Стандарт И СтрТаб.СерияНоменклатуры.Используется, Формат(СтрТаб.КоличествоОстаток, "ЧРД=.; ЧГ=0"), "0"));
		
		ЗаписатьСвойствоИЗначениеJSON(Запись, "blockedqty",    ?(СтрТаб.Качество <> Справочники.Качество.Стандарт И СтрТаб.СерияНоменклатуры.Используется, Формат(СтрТаб.КоличествоОстаток, "ЧРД=.; ЧГ=0"), "0"));
		
		ЗаписатьСвойствоИЗначениеJSON(Запись, "qiqty",         ?(НЕ СтрТаб.СерияНоменклатуры.Используется, Формат(СтрТаб.КоличествоОстаток, "ЧРД=.; ЧГ=0"), "0"));
		
		ЗаписатьСвойствоИЗначениеJSON(Запись, "wbstext",       null);
		
		Запись.ЗаписатьКонецОбъекта();
		
	КонецЦикла;
	
	Запись.ЗаписатьКонецМассива(); 
	
	Запись.ЗаписатьКонецОбъекта();
	
	Запись.ЗаписатьКонецОбъекта(); // inventorySnapshotHeader
	
	ТелоЗапроса = Запись.Закрыть();
	
	Возврат ТелоЗапроса;
	
КонецФункции

Функция СформироватьТелоЗапросаПоРасхождениямПриПересчете(ВыборкаПоТипуОперации)
	
	ВыборкаДетальныхЗаписей = ВыборкаПоТипуОперации.Выбрать();
	
	ТекстОперации = "";
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	
	Запись.ЗаписатьНачалоОбъекта();
	ЗаписатьСвойствоИЗначениеJSON(Запись, "inventoryMove");
	
	Запись.ЗаписатьНачалоОбъекта();
	ЗаписатьСвойствоИЗначениеJSON(Запись, "interfaceName", "inventorymovement");
	
	ЗаписатьСвойствоИЗначениеJSON(Запись, "invmovhead");
	Запись.ЗаписатьНачалоОбъекта();
	ЗаписатьСвойствоИЗначениеJSON(Запись, "postdate", Формат(ТекущаяДатаСеанса(), "ДФ='yyyy-MM-dd HH:mm:ss'"));
	ЗаписатьСвойствоИЗначениеJSON(Запись, "docdate", Формат(ТекущаяДатаСеанса(), "ДФ='yyyy-MM-dd HH:mm:ss'"));
	Если ВыборкаПоТипуОперации.ТипДвижения = "311" Тогда
		ЗаписатьСвойствоИЗначениеJSON(Запись, "htxt", ОбщиеФункции.ВернутьЗначениеСвойстваОбъекта(ВыборкаПоТипуОперации.Ссылка.ДокументОснование,
			СвойстваПартнера.Свойство_НомерВходящегоДокумента));
	КонецЕсли; 
	Запись.ЗаписатьКонецОбъекта();
	
	ЗаписатьСвойствоИЗначениеJSON(Запись, "invmovcode");
	Запись.ЗаписатьНачалоОбъекта();
	ЗаписатьСвойствоИЗначениеJSON(Запись, "trcode", ВыборкаПоТипуОперации.ТипОперации);
	Запись.ЗаписатьКонецОбъекта();
	
	ЗаписатьСвойствоИЗначениеJSON(Запись, "invmovdetail");
	Запись.ЗаписатьНачалоОбъекта();
	
	ЗаписатьСвойствоИЗначениеJSON(Запись, "inventorymovementsdet");
	Запись.ЗаписатьНачалоМассива();
	Пока ВыборкаДетальныхЗаписей.Следующий() цикл
		
		Склад = 			_3PLСервер.ОпределитьСкладПоклажедателя(Партнер, ВыборкаДетальныхЗаписей.Склад);
		СкладПолучатель = 	_3PLСервер.ОпределитьСкладПоклажедателя(Партнер, ВыборкаДетальныхЗаписей.СкладПолучатель);
		
		Запись.ЗаписатьНачалоОбъекта();
			ЗаписатьСвойствоИЗначениеJSON(Запись, "itemnum", 	ДобавитьЛидирующиеНулиВКодТовара(ВыборкаДетальныхЗаписей.Номенклатура.Артикул));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "lot", 		ВыборкаДетальныхЗаписей.СерияНоменклатуры.НомерПартииПоставщика);
			ЗаписатьСвойствоИЗначениеJSON(Запись, "qty", 		?(ВыборкаДетальныхЗаписей.Количество < 0, -ВыборкаДетальныхЗаписей.Количество, ВыборкаДетальныхЗаписей.Количество));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "baseuom", 	ОпределитьЕдиницуИзмеренияПепси(ВыборкаДетальныхЗаписей.ЕдиницаИзмерения));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "movtype", 	ВыборкаДетальныхЗаписей.ТипДвижения);
			ЗаписатьСвойствоИЗначениеJSON(Запись, "storloc", 	Склад.Код);
			ЗаписатьСвойствоИЗначениеJSON(Запись, "newstorloc", СкладПолучатель.Код);
			ЗаписатьСвойствоИЗначениеJSON(Запись, "plant", 		СвойстваПартнера.КодДистрибьютора);
			ЗаписатьСвойствоИЗначениеJSON(Запись, "costcenter", СвойстваПартнера.КостЦентр);
		Запись.ЗаписатьКонецОбъекта();
		
	КонецЦикла;
	Запись.ЗаписатьКонецМассива();

	Запись.ЗаписатьКонецОбъекта();
	
	Запись.ЗаписатьКонецОбъекта();
	
	Запись.ЗаписатьКонецОбъекта();
	
	ТекстОперации = Запись.Закрыть();
	
	Возврат ТекстОперации;
	
КонецФункции

Функция ПолучитьДанныеПоДвижениямКорректировкиОстатков()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Док.Дата КАК Дата,
	               |	Состав.Ссылка КАК Ссылка,
	               |	Состав.Номенклатура,
	               |	Состав.СерияНоменклатуры,
	               |	&ОсновнойСклад КАК Склад,
	               |	&КачествоПретензия КАК СкладПолучатель,
	               |	Состав.ЕдиницаИзмерения,
	               |	ЗаказПоставщику.Количество - Состав.Количество КАК Количество,
	               |	""04"" КАК ТипОперации,
	               |	""311"" КАК ТипДвижения
	               |ИЗ
	               |	Документ.ПриходныйСкладскойОрдер.Товары КАК Состав
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйСкладскойОрдер КАК Док
	               |		ПО Состав.Ссылка = Док.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщику
	               |		ПО (Док.ДокументОснование = ЗаказПоставщику.Ссылка)
	               |			И Состав.Номенклатура = ЗаказПоставщику.Номенклатура
	               |			И Состав.СерияНоменклатуры = ЗаказПоставщику.СерияНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналОпераций
	               |		ПО (Док.Ссылка = ЖурналОпераций.Объект)
	               |			И (ЖурналОпераций.Источник = ""1С"")
	               |			И (ЖурналОпераций.Приемник = &Партнер)
	               |ГДЕ
	               |	Состав.Номенклатура.ДистрибьюторскийКонтракт = &Контракт
	               |	И ЗаказПоставщику.Количество > Состав.Количество
	               |	И Док.Проведен
	               |	И ЖурналОпераций.Объект ЕСТЬ NULL
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Док.Дата,
	               |	Состав.Ссылка,
	               |	Состав.Номенклатура,
	               |	Состав.СерияНоменклатуры,
	               |	Состав.Качество,
	               |	Состав.Качество,
	               |	Состав.ЕдиницаИзмерения,
	               |	Состав.Количество,
	               |	""03"",
	               |	ВЫБОР
	               |		КОГДА Состав.СерияНоменклатуры <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	               |				И НЕ Состав.СерияНоменклатуры.Используется
	               |			ТОГДА ""Z94""
	               |		ИНАЧЕ ""ZI4""
	               |	КОНЕЦ
	               |ИЗ
	               |	Документ.СписаниеТоваров.Товары КАК Состав
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеТоваров КАК Док
	               |		ПО Состав.Ссылка = Док.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналОпераций
	               |		ПО (Док.Ссылка = ЖурналОпераций.Объект)
	               |			И (ЖурналОпераций.Источник = ""1С"")
	               |			И (ЖурналОпераций.Приемник = &Партнер)
	               |ГДЕ
	               |	Состав.Номенклатура.ДистрибьюторскийКонтракт = &Контракт
	               |	И Док.Проведен
	               |	И ЖурналОпераций.Объект ЕСТЬ NULL
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Док.Дата,
	               |	Состав.Ссылка,
	               |	Состав.Номенклатура,
	               |	Состав.СерияНоменклатуры,
	               |	&ОсновнойСклад,
	               |	Состав.Качество,
	               |	Состав.ЕдиницаИзмерения,
	               |	Состав.Количество,
	               |	""03"",
	               |	ВЫБОР
	               |		КОГДА Состав.СерияНоменклатуры <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	               |				И НЕ Состав.СерияНоменклатуры.Используется
	               |			ТОГДА ""Z93""
	               |		ИНАЧЕ ""ZI3""
	               |	КОНЕЦ
	               |ИЗ
	               |	Документ.ОприходованиеТоваров.Товары КАК Состав
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров КАК Док
	               |		ПО Состав.Ссылка = Док.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналОпераций
	               |		ПО (Док.Ссылка = ЖурналОпераций.Объект)
	               |			И (ЖурналОпераций.Источник = ""1С"")
	               |			И (ЖурналОпераций.Приемник = &Партнер)
	               |ГДЕ
	               |	Состав.Номенклатура.ДистрибьюторскийКонтракт = &Контракт
	               |	И Док.Проведен
	               |	И ЖурналОпераций.Объект ЕСТЬ NULL
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Док.Дата,
	               |	Состав.Ссылка,
	               |	Состав.Номенклатура,
	               |	Состав.СерияНоменклатуры,
				   |	Состав.КачествоНовое,
	               |	Состав.КачествоСтарое,
	               |	Состав.ЕдиницаИзмерения,
	               |	Состав.Количество,
	               |	""04"",
	               |	ВЫБОР
	               |		КОГДА Состав.КачествоНовое = ЗНАЧЕНИЕ(Справочник.Качество.Брак)
	               |			ТОГДА ""344""
	               |		ИНАЧЕ ""343""
	               |	КОНЕЦ
	               |ИЗ
	               |	Документ.КорректировкаКачестваЗапасов.Товары КАК Состав
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаКачестваЗапасов КАК Док
	               |		ПО Состав.Ссылка = Док.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналОпераций
	               |		ПО (Док.Ссылка = ЖурналОпераций.Объект)
	               |			И (ЖурналОпераций.Источник = ""1С"")
	               |			И (ЖурналОпераций.Приемник = &Партнер)
	               |ГДЕ
	               |	Состав.Номенклатура.ДистрибьюторскийКонтракт = &Контракт
	               |	И Док.Проведен
	               |	И ЖурналОпераций.Объект ЕСТЬ NULL
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата
	               |ИТОГИ
	               |	МАКСИМУМ(ТипОперации),
	               |	МАКСИМУМ(ТипДвижения)
	               |ПО
	               |	Ссылка";
	
	Запрос.УстановитьПараметр("Контракт", СвойстваПартнера.Контракт); 
	Запрос.УстановитьПараметр("ОсновнойСклад", СвойстваПартнера.Склад); 
	Запрос.УстановитьПараметр("Партнер", Строка(Партнер)); 
	Запрос.УстановитьПараметр("КачествоПретензия", СвойстваПартнера.КачествоПретензия);
	
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

#КонецОбласти 

#Область ПОДТВЕРЖДЕНИЯ

Функция ПолучитьЗаявкиНаОбновлениеПоставок()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Объект,
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Текст КАК НомерПоставки
	|ИЗ
	|	РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций
	|ГДЕ
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Источник = ""1С""
	|	И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Приемник = &Приемник
	|	И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Статус = &Статус
	|   И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Идентификатор = ""shipmentupdate""";
	
	Запрос.УстановитьПараметр("Приемник", Строка(Партнер));
	Запрос.УстановитьПараметр("Статус", Справочники.СтатусыЗаявок.Новая); 
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СоздатьЗаявкуНаОперациюОбновленияПоставок(Объект)
	
	РегистраторЗаписи = Документы.РегистраторЗаписи.СоздатьНовыйДокумент("" + Объект);
	
	_3PLСервер.ДобавитьЗаписьПоДокументуВЖурналОпераций(РегистраторЗаписи, "1С", Строка(Партнер), 
		Справочники.СтатусыЗаявок.Новая, "shipmentupdate", ТекущаяДатаСеанса(),, ОбщиеФункции.ВернутьЗначениеСвойстваОбъекта(Объект, СвойстваПартнера.Свойство_НомерТранспортировки));
	
КонецПроцедуры
 
Функция СформироватьТелоЗапросаДляОбновленияПоставки(Объект, НомерПоставки)
	
	ЧасовойПояс = "RUS03";
	СмещениеВСекундах = 10; // для разницы в 10 сек
	СмещениеВМинутах = 600; // для разницы в 10 мин
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	
	Запись.ЗаписатьНачалоОбъекта();
	
		ЗаписатьСвойствоИЗначениеJSON(Запись, "interfaceName", "shipmentupdate");
		ЗаписатьСвойствоИЗначениеJSON(Запись, "plant", СвойстваПартнера.КодДистрибьютора);
		ЗаписатьСвойствоИЗначениеJSON(Запись, "shpnum", НомерПоставки);
		
		ЗаписатьСвойствоИЗначениеJSON(Запись, "event");
		Запись.ЗаписатьНачалоМассива();
		
			Запись.ЗаписатьНачалоОбъекта();
				ЗаписатьСвойствоИЗначениеJSON(Запись, "activityCode", 		"001");
				ЗаписатьСвойствоИЗначениеJSON(Запись, "endDate", 			Формат(Объект.Дата, "ДФ=yyyyMMdd"));
				ЗаписатьСвойствоИЗначениеJSON(Запись, "endTime", 			Формат(Объект.Дата, "ДФ=HHMMss"));
				ЗаписатьСвойствоИЗначениеJSON(Запись, "endTimeZone", 		ЧасовойПояс);
			Запись.ЗаписатьКонецОбъекта();
			
			Запись.ЗаписатьНачалоОбъекта();
				ЗаписатьСвойствоИЗначениеJSON(Запись, "activityCode", 		"002");
				ЗаписатьСвойствоИЗначениеJSON(Запись, "endDate", 			Формат(Объект.Дата, "ДФ=yyyyMMdd"));
				ЗаписатьСвойствоИЗначениеJSON(Запись, "endTime", 			Формат(Объект.Дата + СмещениеВСекундах, "ДФ=HHMMss"));
				ЗаписатьСвойствоИЗначениеJSON(Запись, "endTimeZone", 		ЧасовойПояс);
			Запись.ЗаписатьКонецОбъекта();
			
			Запись.ЗаписатьНачалоОбъекта();
				ЗаписатьСвойствоИЗначениеJSON(Запись, "activityCode", 		"003");
				ЗаписатьСвойствоИЗначениеJSON(Запись, "startDate", 			Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd"));
				ЗаписатьСвойствоИЗначениеJSON(Запись, "startTime", 			Формат(ТекущаяДатаСеанса(), "ДФ=HHMMss"));
				ЗаписатьСвойствоИЗначениеJSON(Запись, "startTimeZone", 		ЧасовойПояс);
			Запись.ЗаписатьКонецОбъекта();
			
			Запись.ЗаписатьНачалоОбъекта();
				ЗаписатьСвойствоИЗначениеJSON(Запись, "activityCode", 		"003");
				ЗаписатьСвойствоИЗначениеJSON(Запись, "endDate", 			Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd"));
				ЗаписатьСвойствоИЗначениеJSON(Запись, "endTime", 			Формат(ТекущаяДатаСеанса() + СмещениеВМинутах, "ДФ=HHMMss"));
				ЗаписатьСвойствоИЗначениеJSON(Запись, "endTimeZone", 		ЧасовойПояс);
			Запись.ЗаписатьКонецОбъекта();
			
			Запись.ЗаписатьНачалоОбъекта();
				ЗаписатьСвойствоИЗначениеJSON(Запись, "activityCode", 		"004");
				ЗаписатьСвойствоИЗначениеJSON(Запись, "endDate", 			Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd"));
				ЗаписатьСвойствоИЗначениеJSON(Запись, "endTime", 			Формат(ТекущаяДатаСеанса() + (2 * СмещениеВМинутах), "ДФ=HHMMss"));
				ЗаписатьСвойствоИЗначениеJSON(Запись, "endTimeZone", 		ЧасовойПояс);
			Запись.ЗаписатьКонецОбъекта();
			
			//Запись.ЗаписатьНачалоОбъекта();
			//	ЗаписатьСвойствоИЗначениеJSON(Запись, "activityCode", 		"005");
			//	ЗаписатьСвойствоИЗначениеJSON(Запись, "startDate", 			Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd"));
			//	ЗаписатьСвойствоИЗначениеJSON(Запись, "startTime", 			Формат(ТекущаяДатаСеанса(), "ДФ=HHMMss"));
			//	ЗаписатьСвойствоИЗначениеJSON(Запись, "startTimeZone", 		ЧасовойПояс);
			//	ЗаписатьСвойствоИЗначениеJSON(Запись, "endDate", 			Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd"));
			//	ЗаписатьСвойствоИЗначениеJSON(Запись, "endTime", 			Формат(ТекущаяДатаСеанса() + (3 * СмещениеВМинутах), "ДФ=HHMMss"));
			//	ЗаписатьСвойствоИЗначениеJSON(Запись, "endTimeZone", 		ЧасовойПояс);
			//Запись.ЗаписатьКонецОбъекта();
		
		Запись.ЗаписатьКонецМассива();
	
	Запись.ЗаписатьКонецОбъекта();
	
	Возврат Запись.Закрыть();
	
КонецФункции
 
Функция СформироватьТелоЗапросаДляПодтвержденияПоставки(ДокументСсылка, ДокументПодтверждения, ТипОперации, МассивРасхождений)
	
	Если ТипОперации = "Входящая" Тогда
		ТипПоставки = ?(ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказПоставщику"), "7", "T");
	Иначе
		ТипПоставки = "J";
	КонецЕсли;
	
	Если ТипПоставки = "J" Тогда
		ТипДействия = "PIC";
	Иначе
		ТипДействия = "POS";
	КонецЕсли;
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	
	Запись.ЗаписатьНачалоОбъекта();
	
	ЗаписатьСвойствоИЗначениеJSON(Запись, "plant",         СвойстваПартнера.КодДистрибьютора);
	ЗаписатьСвойствоИЗначениеJSON(Запись, "ordnum",        ОбщиеФункции.ВернутьЗначениеСвойстваОбъекта(ДокументСсылка, СвойстваПартнера.Свойство_НомерВходящегоДокумента));
	ЗаписатьСвойствоИЗначениеJSON(Запись, "action",        ТипДействия);
	ЗаписатьСвойствоИЗначениеJSON(Запись, "orddtpick",     Формат(ДокументПодтверждения.Дата, "ДФ=yyyyMMdd"));
	ЗаписатьСвойствоИЗначениеJSON(Запись, "ordtyptxt",     ТипПоставки);
	ЗаписатьСвойствоИЗначениеJSON(Запись, "interfaceName", "pickingconfirmation");
	
	Запись.ЗаписатьИмяСвойства("shipOrderDetails");
	
	Запись.ЗаписатьНачалоМассива();
	
	Если ТипПоставки <> "J" Тогда
		
		ДокументПодтвержденияТовары = ДокументПодтверждения.Товары;
		
		Для каждого СтрТабЧасть Из ДокументСсылка.Товары Цикл
		
			Запись.ЗаписатьНачалоОбъекта();
			
			ЗаписатьСвойствоИЗначениеJSON(Запись, "linenum",    СтрТабЧасть.ИдСтрокиПоклажедателя);
			ЗаписатьСвойствоИЗначениеJSON(Запись, "itemnum",    СтрТабЧасть.Номенклатура.Артикул);
			
				Запись.ЗаписатьИмяСвойства("shipOrderStock");
				Запись.ЗаписатьНачалоОбъекта();
					ЗаписатьСвойствоИЗначениеJSON(Запись, "ordqty",     Формат(СтрТабЧасть.Количество, "ЧРД=.; ЧГ=0"));
					ЗаписатьСвойствоИЗначениеJSON(Запись, "orduom",     ОпределитьЕдиницуИзмеренияПепси(СтрТабЧасть.ЕдиницаИзмерения));
					ЗаписатьСвойствоИЗначениеJSON(Запись, "lot",        СвойстваПартнера.НомерВиртуальнойПартии); 
				Запись.ЗаписатьКонецОбъекта();
			
			Запись.ЗаписатьКонецОбъекта();
			
			СтрокиПодтверждения = ДокументПодтвержденияТовары.НайтиСтроки(Новый Структура("Номенклатура", СтрТабЧасть.Номенклатура));
			
			КоличествоФакт = 0;
			
			Для каждого СтрПодтверждение Из СтрокиПодтверждения Цикл
				КоличествоФакт = КоличествоФакт + (СтрПодтверждение.Количество * СтрПодтверждение.Коэффициент / СтрТабЧасть.Коэффициент);
			КонецЦикла;
			
			Если СтрТабЧасть.Количество > КоличествоФакт Тогда
				СтруктураРасхождения = Новый Структура("Склад, СкладПолучатель, ТипДвижения, Номенклатура, СерияНоменклатуры, ЕдиницаИзмерения, Качество, КачествоНовое, Количество");
				ЗаполнитьЗначенияСвойств(СтруктураРасхождения, СтрТабЧасть);
				СтруктураРасхождения.Количество = СтрТабЧасть.Количество - КоличествоФакт;
				СтруктураРасхождения.Склад = ДокументСсылка.Склад;
				СтруктураРасхождения.СкладПолучатель = Справочники.Качество.НайтиПоНаименованию("Претензия", Истина);
				СтруктураРасхождения.ТипДвижения = ?(СтруктураРасхождения.Количество < 0, "ZF3", "ZF4");
				
				МассивРасхождений.Добавить(СтруктураРасхождения);
			КонецЕсли; 
			
		КонецЦикла;
		
	Иначе
		
		СделкаТовары = ДокументСсылка.Сделка.Товары;
		
		Для каждого СтрТабЧасть Из ДокументПодтверждения.СерииОтбора Цикл
			
			СтрТабОснование = СделкаТовары.Найти(СтрТабЧасть.Номенклатура, "Номенклатура");
			
			Если СтрТабОснование = Неопределено Тогда
				Сообщить(ОбщиеФункции._СтрШаблон_("В документе '%1' не удалось найти товар '%2', который есть в отборе '%3'. Строка будет пропущена",
					ДокументСсылка, СтрТабЧасть.Номенклатура, ДокументПодтверждения));
				Продолжить;
			КонецЕсли; 
		
			Запись.ЗаписатьНачалоОбъекта();
			
			ЗаписатьСвойствоИЗначениеJSON(Запись, "linenum",    ОбщиеФункции._СтрШаблон_("%10", СтрТабОснование.НомерСтроки));
			ЗаписатьСвойствоИЗначениеJSON(Запись, "itemnum",    СтрТабЧасть.Номенклатура.Артикул);
			
			Если СтрТабЧасть.КоличествоПлан <> СтрТабЧасть.КоличествоФакт Тогда
				СтрокаЛистОтбора = ДокументПодтверждения.ЛистОтбора.Найти(СтрТабЧасть.Номенклатура, "Номенклатура");
				КодПричиныНеполнойКомплектации = СвойстваПартнера.ОсновнойКодПричиныНеполнойКомплектации;
				Если СтрокаЛистОтбора <> Неопределено И ЗначениеЗаполнено(СтрокаЛистОтбора.ПричинаНедобора) Тогда
					КодПричиныНеполнойКомплектации = ОбщиеФункции.ВернутьЗначениеСвойстваОбъекта(СтрокаЛистОтбора.ПричинаНедобора,
					СвойстваПартнера.Свойство_КодПричиныНеполнойКомплектацииПепси);
				КонецЕсли;
				ЗаписатьСвойствоИЗначениеJSON(Запись, "udreason", КодПричиныНеполнойКомплектации);
			КонецЕсли;
			
				Запись.ЗаписатьИмяСвойства("shipOrderStock");
				Запись.ЗаписатьНачалоОбъекта();
					ЗаписатьСвойствоИЗначениеJSON(Запись, "ordqty",     Формат(СтрТабЧасть.КоличествоФакт, "ЧРД=.; ЧГ=0"));
					ЗаписатьСвойствоИЗначениеJSON(Запись, "orduom",     ОпределитьЕдиницуИзмеренияПепси(СтрТабЧасть.Номенклатура.ЕдиницаХраненияОстатков));
					ЗаписатьСвойствоИЗначениеJSON(Запись, "lot",        СтрТабЧасть.СерияНоменклатурыОтбора.НомерПартииПоставщика); 
				Запись.ЗаписатьКонецОбъекта();
			
			Запись.ЗаписатьКонецОбъекта();
		
		КонецЦикла;
	
	КонецЕсли;  
	
	Запись.ЗаписатьКонецМассива();
	
	Запись.ЗаписатьКонецОбъекта();

	Возврат Запись.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ТРАНСПОРТИРОВКИ

Функция ОпределитьДокументыДляТранспортировки(ТаблицаДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	т.ДокументСсылка,
	|	т.НомерТранспортировки,
	|	т.НомерВходящегоДокумента
	|ПОМЕСТИТЬ втДокументыДляТранспортировки
	|ИЗ
	|	&ТаблицаДанных КАК т;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СвойстваДокументов.Объект, НЕОПРЕДЕЛЕНО) КАК ДокументСсылка,
	|	ДокументыДляТранспортировки.НомерТранспортировки,
	|	ДокументыДляТранспортировки.НомерВходящегоДокумента
	|ИЗ
	|	втДокументыДляТранспортировки КАК ДокументыДляТранспортировки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваДокументов
	|	ПО ДокументыДляТранспортировки.НомерВходящегоДокумента = СвойстваДокументов.Значение
	|		И СвойстваДокументов.Свойство = &Свойство_НомерВходящегоДокумента";
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	Запрос.УстановитьПараметр("Свойство_НомерВходящегоДокумента", СвойстваПартнера.Свойство_НомерВходящегоДокумента);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПреобразоватьДанныеПоТранспортировкамВТаблицуЗначений(Данные)
	
	ТабЗнач = Новый ТаблицаЗначений;
	ТабЗнач.Колонки.Добавить("ДокументСсылка",          Новый ОписаниеТипов("ДокументСсылка.ОтгрузкаТоваровУслуг"));
	ТабЗнач.Колонки.Добавить("НомерТранспортировки",    Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36)));
	ТабЗнач.Колонки.Добавить("НомерВходящегоДокумента", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36)));
	
	Для каждого Элемент Из Данные Цикл
		
		НомерТранспортировки = Элемент.internalLoadNum;
		
		СоставТранспортировки = Элемент.shipmentDetails;
		
		Для каждого СтрТранспортировки Из СоставТранспортировки Цикл
			
			НовСтр = ТабЗнач.Добавить();
			НовСтр.НомерТранспортировки = НомерТранспортировки;
			НовСтр.НомерВходящегоДокумента = УдалитьЛидирущиеНулиИзКодаТовара(СтрТранспортировки.shipmentId);
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	Возврат ТабЗнач;
	
КонецФункции

#КонецОбласти 

#Область ДОКУМЕНТЫ

Функция ВыбратьСериюНоменклатуры(Владелец, ДатаПроизводства, НомерПартии)
		
	Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(ДатаПроизводства) Тогда
		Возврат Серия; 
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|		СерииНоменклатуры.Ссылка
	|	ИЗ
	|		Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|	ГДЕ
	|		СерииНоменклатуры.Владелец = &Владелец
	|		И СерииНоменклатуры.ДатаПроизводства = &ДатаПроизводства
	|		И СерииНоменклатуры.НомерПартииПоставщика = &НомерПартии";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("ДатаПроизводства", ДатаПроизводства);
	Запрос.УстановитьПараметр("НомерПартии", НомерПартии);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Серия = Выборка.Ссылка;
	КонецЕсли; 
	
	Возврат Серия;
	
КонецФункции

Функция ОпределитьТребуемыеДействияПоРаботеСДокументами(ТаблицаДанных)
	
	ТаблицаДанных.Колонки.Добавить("ТребуемоеДействие", Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	т.НомерВходящегоДокумента
	|ПОМЕСТИТЬ втДокументы
	|ИЗ
	|	&ТаблицаДанных КАК т;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.НомерВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА СвойстваДокументов.Объект ЕСТЬ NULL
	|			ТОГДА ""Добавление""
	|		ИНАЧЕ ""Обновление""
	|	КОНЕЦ КАК ТребуемоеДействие
	|ИЗ
	|	втДокументы КАК Документы
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваДокументов
	|	ПО Документы.НомерВходящегоДокумента = СвойстваДокументов.Значение
	|		И СвойстваДокументов.Свойство = &Свойство_НомерВходящегоДокумента";
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	Запрос.УстановитьПараметр("Свойство_НомерВходящегоДокумента", СвойстваПартнера.Свойство_НомерВходящегоДокумента);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрТаб Из ТаблицаДанных Цикл
		
		СтрокаРезультатаЗапроса = РезультатЗапроса.Найти(СтрТаб.НомерВходящегоДокумента, "НомерВходящегоДокумента");
		
		Если СтрокаРезультатаЗапроса <> Неопределено Тогда
			СтрТаб.ТребуемоеДействие = СтрокаРезультатаЗапроса.ТребуемоеДействие;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПреобразоватьДанныеПоДокументамВТаблицуЗначений(Данные)
	
	ТабЗнач = Новый ТаблицаЗначений;
	ТабЗнач.Колонки.Добавить("НомерВходящегоДокумента", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТабЗнач.Колонки.Добавить("ДатаВходящегоДокумента", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТабЗнач.Колонки.Добавить("ДатаПоступления", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТабЗнач.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(1)));
	ТабЗнач.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТабЗнач.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТабЗнач.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТабЗнач.Колонки.Добавить("СтруктурнаяЕдиницаКонтрагента", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницыКонтрагентов"));
	ТабЗнач.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТабЗнач.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	ТабЗнач.Колонки.Добавить("ТипЦен", Новый ОписаниеТипов("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов"));
	ТабЗнач.Колонки.Добавить("Автор", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТабЗнач.Колонки.Добавить("Ответственный", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТабЗнач.Колонки.Добавить("ВидПоставки", Новый ОписаниеТипов("СправочникСсылка.ВидыПоставки"));
	ТабЗнач.Колонки.Добавить("СрокКредитования", Новый ОписаниеТипов("СправочникСсылка.СрокиКредитования"));
	ТабЗнач.Колонки.Добавить("СпособРасчетов", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРасчетов"));
	ТабЗнач.Колонки.Добавить("ДатаПоставки", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТабЗнач.Колонки.Добавить("ДатаОтгрузки", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТабЗнач.Колонки.Добавить("Товары", Новый ОписаниеТипов("Массив"));
	ТабЗнач.Колонки.Добавить("ВозвратнаяТара", Новый ОписаниеТипов("Массив"));
	ТабЗнач.Колонки.Добавить("ОшибкиВыполнения", Новый ОписаниеТипов("Массив"));
	ТабЗнач.Колонки.Добавить("НаименованиеДоговораОтветХранения", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(150)));
	
	Для каждого Элемент Из Данные Цикл
		
		Если Элемент.ordTypTxt = "T" И (Элемент.ordTyp2Txt = "ZLOR" ИЛИ Элемент.ordTyp2Txt = "ZLR") Тогда
			Продолжить; 
		КонецЕсли; 
		
		НовСтр = ТабЗнач.Добавить();
		НовСтр.НомерВходящегоДокумента         = Элемент.ordNum;
		НовСтр.ДатаВходящегоДокумента          = ПрочитатьДату(Элемент.timestamp, ФорматДатыJSON.ISO);
		НовСтр.ДатаПоступления                 = ПрочитатьДату(Элемент.ordDtDelv, "yyyyMMdd");
		НовСтр.ТипДокумента                    = Элемент.ordTypTxt;
		НовСтр.Организация                     = СвойстваПартнера.ОсновнаяОрганизация;
		НовСтр.Склад                           = СвойстваПартнера.Склад;
		НовСтр.СтруктурнаяЕдиницаКонтрагента   = ОбщиеФункции.ВернутьОбъектПоЗначениюСвойства(СвойстваПартнера.Свойство_КодГрузополучателя, Элемент.cusId);
		НовСтр.Контрагент                      = ?(Элемент.ordTypTxt = "7", СвойстваПартнера.ОсновнойПоставщик, НовСтр.СтруктурнаяЕдиницаКонтрагента.Владелец);
		НовСтр.ДоговорКонтрагента              = ?(Элемент.ordTypTxt = "7", СвойстваПартнера.ОсновнойДоговорПриемаНаХранение, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		НовСтр.ТипЦен                          = СвойстваПартнера.ОсновнойТипЦенКонтрагента;
		НовСтр.Подразделение                   = СвойстваПартнера.ОсновноеПодразделение;
		НовСтр.Автор                           = ПараметрыСеанса.ТекущийПользователь;
		НовСтр.Ответственный                   = ПараметрыСеанса.ТекущийПользователь;
		НовСтр.ВидПоставки                     = ?(Элемент.shipSeq = "RD", СвойстваПартнера.ВидПоставки_Самовывоз, СвойстваПартнера.ОсновнойВидПоставки);
		НовСтр.СпособРасчетов                  = СвойстваПартнера.ОсновнойСпособРасчетов;
		НовСтр.СрокКредитования                = СвойстваПартнера.ОсновнойСрокКредитования;
		НовСтр.ДатаПоставки                    = ПрочитатьДату(Элемент.ordDtDisp, "yyyyMMdd");
		НовСтр.ДатаОтгрузки                    = НовСтр.ДатаПоставки;
		НовСтр.НаименованиеДоговораОтветХранения = СвойстваПартнера.НаименованиеДоговораОтветХранения;
		
		Если Элемент.ordTypTxt <> "7" И НовСтр.СтруктурнаяЕдиницаКонтрагента.Пустая() Тогда
			НовСтр.ОшибкиВыполнения.Добавить(ОбщиеФункции._СтрШаблон_("Не удалось найти структурную единицу (%1 %2,%3) по коду: %4",
				Элемент.cusNam, Элемент.city, Элемент.street, Элемент.cusId));
		КонецЕсли; 
		
		СоставДокумента = Элемент.orderDetails;
		
		Для каждого СтрДок Из СоставДокумента Цикл
			
			СтрТоварПоклажедателя = ТаблицаТоваровПоклажедателя.Найти(УдалитьЛидирущиеНулиИзКодаТовара(СтрДок.itemNum), "Артикул");
			
			Если СтрТоварПоклажедателя = Неопределено Тогда
				НовСтр.ОшибкиВыполнения.Добавить(ОбщиеФункции._СтрШаблон_("Не найден товар с кодом '%1'", УдалитьЛидирущиеНулиИзКодаТовара(СтрДок.itemNum)));
				Продолжить;
			КонецЕсли;
			
			СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
			
			Если ЗначениеЗаполнено(СтрДок.prodDate) Тогда
			// жесткое резервирование по партии
				СерияНоменклатуры = ВыбратьСериюНоменклатуры(СтрТоварПоклажедателя.Ссылка, ПрочитатьДату(СтрДок.prodDate, "dd.MM.yyyy"), СтрДок.lot);
				
				Если СерияНоменклатуры.Пустая() Тогда
					
					Попытка
						_3PLСервер.СоздатьСериюНоменклатуры(Новый Структура("Владелец, ДатаПроизводства, СрокГодности, НомерПартииПоставщика, Комментарий, Используется",
							СтрТоварПоклажедателя.Ссылка, ПрочитатьДату(СтрДок.prodDate, "dd.MM.yyyy"), ПрочитатьДату(СтрДок.sled, "dd.MM.yyyy"), СтрДок.lot, ОбщиеФункции._СтрШаблон_("#%1. Создана обменом по договору 3PL", СвойстваПартнера.КодДистрибьютора), Истина), СерияНоменклатуры);
					Исключение
						 НовСтр.ОшибкиВыполнения.Добавить(ОбщиеФункции._СтрШаблон_("Не удалось создать серию по товару '%1' (Номер партии: %2) по причине:%3", 
						 	СтрТоварПоклажедателя.Ссылка, СтрДок.lot, ОписаниеОшибки()));
					КонецПопытки;
						
				КонецЕсли; 
				
			КонецЕсли;
			
			МинСрок = СтрЗаменить(СтрДок.fresMin, "%", "");
			МаксСрок = СтрЗаменить(СтрДок.fresMax, "%", "");
			
			СтруктураСтрокиДокумента = Новый Структура;
			
			СтруктураСтрокиДокумента.Вставить("Номенклатура", СтрТоварПоклажедателя.Ссылка);
				
			СтруктураСтрокиДокумента.Вставить("СерияНоменклатуры", СерияНоменклатуры);
			
			СтруктураСтрокиДокумента.Вставить("ЕдиницаИзмерения", СтрТоварПоклажедателя[СтрДок.ordUom]);
				
			СтруктураСтрокиДокумента.Вставить("Коэффициент", СтруктураСтрокиДокумента.ЕдиницаИзмерения.Коэффициент);
			
			СтруктураСтрокиДокумента.Вставить("Количество", СтрДок.ordQty);
			
			СтруктураСтрокиДокумента.Вставить("Качество", ?(СтрДок.stockTyp = "S", СвойстваПартнера.КачествоДляБлокировки, Справочники.Качество.Стандарт));
			
			СтруктураСтрокиДокумента.Вставить("ДоговорВладельца", СвойстваПартнера.ОсновнойДоговорПриемаНаХранение);
			
			СтруктураСтрокиДокумента.Вставить("МинимальныйСрок", МинСрок);
			
			СтруктураСтрокиДокумента.Вставить("МаксимальныйСрок", МаксСрок);
			
			СтруктураСтрокиДокумента.Вставить("ИдСтрокиПоклажедателя", Формат(СтрДок.lineNum, "ЧГ=0"));
			
			НовСтр.Товары.Добавить(СтруктураСтрокиДокумента);
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	Возврат ТабЗнач
	
КонецФункции

Процедура СформироватьТаблицаТоваровПоклажедателя()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Артикул,
	|	Номенклатура.ЕдиницаЗакупок КАК EA,
	|	Номенклатура.ЕдиницаЗакупок2 КАК CS,
	|	Номенклатура.ЕдиницаЗакупок3 КАК PF
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ДистрибьюторскийКонтракт = &ДистрибьюторскийКонтракт
	|	И Номенклатура.Артикул <> """"
	|	И НЕ Номенклатура.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("ДистрибьюторскийКонтракт", СвойстваПартнера.Контракт);
	
	ТаблицаТоваровПоклажедателя = Запрос.Выполнить().Выгрузить();
	
	ТаблицаТоваровПоклажедателя.Индексы.Добавить("Артикул, Ссылка");
	
КонецПроцедуры

#КонецОбласти 

#Область Номенклатура

Процедура ОпределитьПериодГодности(ПериодГодности, КоличествоПериодов, ПериодГодностиНоменклатуры, КоличествоПериодовГодностиНоменклатуры)
	
	// Единица измерения срока годности. Значения:
	//	'D ' - День; 
	//	'W' - Неделя; 
	//	'M' - Месяц; 
	//	'Y' – Год.
	// Если переданная единица – неделя или год, СУСК заменяет их на день и месяц соответственно, с соответствующим пересчетом величины shelf life.
	// Поле должно быть выведено в интерфейс для просмотра и редактирования.
	// Значение по умолчанию – день.
	
	Если ПериодГодности = "D" Тогда
		ПериодГодностиНоменклатуры = Перечисления.Периодичность.День;
	ИначеЕсли ПериодГодности = "M" Тогда
		ПериодГодностиНоменклатуры = Перечисления.Периодичность.Месяц;
	ИначеЕсли ПериодГодности = "W" Тогда
		ПериодГодностиНоменклатуры = Перечисления.Периодичность.День;
		КоличествоПериодов = КоличествоПериодов * 7;
	ИначеЕсли ПериодГодности = "Y" Тогда
		ПериодГодностиНоменклатуры = Перечисления.Периодичность.Месяц;
		КоличествоПериодов = КоличествоПериодов * 12;
	КонецЕсли;
	
	КоличествоПериодовГодностиНоменклатуры = КоличествоПериодов;
	
КонецПроцедуры

Процедура ОпределитьБазовуюЕдиницу(БазоваяЕдиница, БазоваяЕдиницаИзмеренияНоменклатуры)
	
	//Тип упаковки. Значения:
	//	PF - паллета, 
	//	CS - коробка, 
	//	EA – штука,
	//Или обозначение базовой единицы измерения товара, интерпретируемое как штука.
	
	Если БазоваяЕдиница = "EA"
		ИЛИ НЕ (БазоваяЕдиница = "CS" ИЛИ БазоваяЕдиница = "PF") Тогда
		БазоваяЕдиницаИзмеренияНоменклатуры = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
	ИначеЕсли БазоваяЕдиница = "CS" Тогда
		БазоваяЕдиницаИзмеренияНоменклатуры = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778");
	ИначеЕсли БазоваяЕдиница = "PF" Тогда
		БазоваяЕдиницаИзмеренияНоменклатуры = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("пал");
	КонецЕсли; 
	
КонецПроцедуры

Функция ПересчитатьГабаритыВМетры(Размер, ЕдиницаИзмерения)
	
	РазмерСУчетомПересчета = Размер;
	
	Если ЕдиницаИзмерения = "CM" Тогда
		РазмерСУчетомПересчета = Размер / 100;
	ИначеЕсли ЕдиницаИзмерения = "MM" Тогда
		РазмерСУчетомПересчета = Размер / 1000;
	КонецЕсли; 
	
	Возврат РазмерСУчетомПересчета;
	
КонецФункции

Функция ПреобразоватьДанныеПоТоварамВТаблицуЗначений(Данные)
	
	ТабЗнач = Новый ТаблицаЗначений;
	ТабЗнач.Колонки.Добавить("Родитель",                   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабЗнач.Колонки.Добавить("Артикул",                    Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25)));
	ТабЗнач.Колонки.Добавить("Наименование",               Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(120)));
	ТабЗнач.Колонки.Добавить("НаименованиеПолное",         Новый ОписаниеТипов("Строка"));
	ТабЗнач.Колонки.Добавить("Весовой",                    Новый ОписаниеТипов("Булево"));
	ТабЗнач.Колонки.Добавить("УчетПартий_в_ВМС",           Новый ОписаниеТипов("Булево"));
	ТабЗнач.Колонки.Добавить("ВидНоменклатуры",            Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"));
	ТабЗнач.Колонки.Добавить("ДистрибьюторскийКонтракт",   Новый ОписаниеТипов("СправочникСсылка.ДистрибьюторскиеКонтракты"));
	ТабЗнач.Колонки.Добавить("ОсновнойСкладОтгрузки",      Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТабЗнач.Колонки.Добавить("ГруппаМатериалов",           Новый ОписаниеТипов("СправочникСсылка.ГруппыМатериалов"));
	ТабЗнач.Колонки.Добавить("ГруппаХранения",             Новый ОписаниеТипов("СправочникСсылка.ГруппыХранения"));
	ТабЗнач.Колонки.Добавить("ГруппаПополнения",           Новый ОписаниеТипов("СправочникСсылка.ГруппыПополнения"));
	ТабЗнач.Колонки.Добавить("ГруппаПикинга",              Новый ОписаниеТипов("СправочникСсылка.ГруппыПикинга"));
	ТабЗнач.Колонки.Добавить("ФормФактор",                 Новый ОписаниеТипов("СправочникСсылка.ФормФакторы"));
	ТабЗнач.Колонки.Добавить("ОсновнойПоставщик",          Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТабЗнач.Колонки.Добавить("ПериодГодности",             Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	ТабЗнач.Колонки.Добавить("КоличествоПериодовГодности", Новый ОписаниеТипов("Число",  , , Новый КвалификаторыЧисла(5)));
	ТабЗнач.Колонки.Добавить("БазоваяЕдиницаИзмерения",    Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ТабЗнач.Колонки.Добавить("СтавкаНДС",                  Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТабЗнач.Колонки.Добавить("ЕдиницаЗакупок",             Новый ОписаниеТипов("Структура"));
	ТабЗнач.Колонки.Добавить("ЕдиницаЗакупок2",            Новый ОписаниеТипов("Структура"));
	ТабЗнач.Колонки.Добавить("ЕдиницаЗакупок3",            Новый ОписаниеТипов("Структура"));
	
	Для каждого Элемент Из Данные Цикл
		
		СведенияОТоваре = Элемент.matMasItems.Получить(0);
		
		НовСтр = ТабЗнач.Добавить();
		НовСтр.ДистрибьюторскийКонтракт = СвойстваПартнера.Контракт;
		НовСтр.ОсновнойСкладОтгрузки    = СвойстваПартнера.Склад;
		НовСтр.ОсновнойПоставщик        = СвойстваПартнера.ОсновнойПоставщик;
		НовСтр.Родитель                 = СвойстваПартнера.ГруппаНоменклатуры;
		НовСтр.ГруппаМатериалов         = СвойстваПартнера.ГруппаМатериалов;
		НовСтр.ГруппаХранения           = СвойстваПартнера.ГруппаХранения;
		НовСтр.ГруппаПополнения         = СвойстваПартнера.ГруппаПополнения;
		НовСтр.ГруппаПикинга            = СвойстваПартнера.ГруппаПикинга;
		НовСтр.ФормФактор               = СвойстваПартнера.ФормФактор;
		НовСтр.Артикул                  = УдалитьЛидирущиеНулиИзКодаТовара(СведенияОТоваре.itemNum);
		НовСтр.Наименование             = СведенияОТоваре.descr;
		НовСтр.НаименованиеПолное       = СведенияОТоваре.descr;
		НовСтр.УчетПартий_в_ВМС         = ?(СведенияОТоваре.lotCaptureReq = "X", Истина, Ложь);
		НовСтр.ВидНоменклатуры          = Справочники.ВидыНоменклатуры.НайтиПоКоду("О00001");
		НовСтр.СтавкаНДС                = Перечисления.СтавкиНДС.НДС20;
		
		ОпределитьПериодГодности(СведенияОТоваре.shelfLifeUom, СведенияОТоваре.shelfLife, НовСтр.ПериодГодности, НовСтр.КоличествоПериодовГодности);
		
		ОпределитьБазовуюЕдиницу(СведенияОТоваре.baseUom, НовСтр.БазоваяЕдиницаИзмерения);
		
		Для каждого Единица Из СведенияОТоваре.itemConfigUOMS Цикл
			
			Если (СведенияОТоваре.itemTypTxt = "ZFIN" И ЗначениеЗаполнено(Единица.barCode))
				ИЛИ (СведенияОТоваре.itemTypTxt = "ZEMT" И Единица.uomTypTxt = "EA" И НовСтр.ЕдиницаЗакупок.Количество() = 0) Тогда
				
				Если Единица.uomTypTxt = "EA" Тогда
					ИмяКолонки = "ЕдиницаЗакупок";
				ИначеЕсли Единица.uomTypTxt = "CS" Тогда
					ИмяКолонки = "ЕдиницаЗакупок2";
				ИначеЕсли Единица.uomTypTxt = "PF" Тогда
					ИмяКолонки = "ЕдиницаЗакупок3";
				Иначе
					Продолжить;
				КонецЕсли;  
				
				ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
				
				ОпределитьБазовуюЕдиницу(Единица.uomTypTxt, ЕдиницаПоКлассификатору);
				
				// Перепроверим единицу по классификатору, возможно это блок
				Если НРЕГ(ЕдиницаПоКлассификатору.Наименование) = "шт"
					И Единица.convFactor > 1 Тогда
					ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("704");
				КонецЕсли; 
				
				НовСтр[ИмяКолонки].Вставить("Наименование",            ЕдиницаПоКлассификатору.Наименование);
				НовСтр[ИмяКолонки].Вставить("ЕдиницаПоКлассификатору", ЕдиницаПоКлассификатору);
				НовСтр[ИмяКолонки].Вставить("Вес",                     ?(Единица.wgtMu = "KG",Единица.wgt, Окр(Единица.wgt / 1000, 6)));
				НовСтр[ИмяКолонки].Вставить("ВесБрутто",               ?(Единица.wgtMu = "KG",Единица.wgt, Окр(Единица.wgt / 1000, 6)));
				НовСтр[ИмяКолонки].Вставить("Глубина",                 ПересчитатьГабаритыВМетры(Единица.lgth, Единица.lgthMu));
				НовСтр[ИмяКолонки].Вставить("Высота",                  ПересчитатьГабаритыВМетры(Единица.hgt,Единица.hgtMu));
				НовСтр[ИмяКолонки].Вставить("Ширина",                  ПересчитатьГабаритыВМетры(Единица.wid,Единица.widMu));
				НовСтр[ИмяКолонки].Вставить("КодовоеОбозначениеВКПК",  ЕдиницаПоКлассификатору.Наименование);
				НовСтр[ИмяКолонки].Вставить("Комплектация",            Истина);
				НовСтр[ИмяКолонки].Вставить("Коэффициент",             Единица.convFactor);
				НовСтр[ИмяКолонки].Вставить("Объем",                   Окр((НовСтр[ИмяКолонки].Глубина * НовСтр[ИмяКолонки].Ширина * НовСтр[ИмяКолонки].Высота) / 100, 6));
				НовСтр[ИмяКолонки].Вставить("ОбъемБрутто",             Окр((НовСтр[ИмяКолонки].Глубина * НовСтр[ИмяКолонки].Ширина * НовСтр[ИмяКолонки].Высота) / 100, 6));
				НовСтр[ИмяКолонки].Вставить("ТехнологическаяУпаковка", ?(ЕдиницаПоКлассификатору.Код = "778",
				Перечисления.ВидыТехнологическихУпаковок.PACK,         Перечисления.ВидыТехнологическихУпаковок.ST));
				НовСтр[ИмяКолонки].Вставить("Штрихкод",                Единица.barCode);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЦикла;
	
	Возврат ТабЗнач;
	
КонецФункции

Функция ОпределитьТребуемыеДействияПоРаботеСНоменклатурой(ТаблицаДанных)
	
	ТаблицаДанных.Колонки.Добавить("ТребуемоеДействие", Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	т.Наименование,
	|	т.Артикул,
	|	т.ДистрибьюторскийКонтракт
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&ТаблицаДанных КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Наименование,
	|	Товары.Артикул,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.Ссылка ЕСТЬ NULL
	|			ТОГДА ""Добавление""
	|		ИНАЧЕ ""Обновление""
	|	КОНЕЦ КАК ТребуемоеДействие
	|ИЗ
	|	втТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Товары.ДистрибьюторскийКонтракт = СпрНоменклатура.ДистрибьюторскийКонтракт
	|			И Товары.Артикул = СпрНоменклатура.Артикул";
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрТаб Из ТаблицаДанных Цикл
		
		СтрокаРезультатаЗапроса = РезультатЗапроса.Найти(СтрТаб.Артикул, "Артикул");
		
		Если СтрокаРезультатаЗапроса <> Неопределено Тогда
			СтрТаб.ТребуемоеДействие = СтрокаРезультатаЗапроса.ТребуемоеДействие;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

#КонецОбласти

#Область ПАРТИИ

Функция ОпределитьТребуемыеДействияПоРаботеСПартиями(ТаблицаДанных)
	
	ТаблицаДанных.Колонки.Добавить("ТребуемоеДействие", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	т.НомерПартииПоставщика,
	|	т.Владелец,
	|   т.ДатаПроизводства
	|ПОМЕСТИТЬ втПартии
	|ИЗ
	|	&ТаблицаДанных КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Партии.Владелец,
	|	Партии.НомерПартииПоставщика,
	|	ВЫБОР
	|		КОГДА СпрСерии.Ссылка ЕСТЬ NULL
	|			ТОГДА ""Добавление""
	|		ИНАЧЕ ""Обновление""
	|	КОНЕЦ КАК ТребуемоеДействие,
	|   СпрСерии.Ссылка КАК СерияНоменклатуры
	|ИЗ
	|	втПартии КАК Партии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СпрСерии
	|		ПО Партии.Владелец= СпрСерии.Владелец
	|			И Партии.НомерПартииПоставщика = СпрСерии.НомерПартииПоставщика
	|  			И НАЧАЛОПЕРИОДА(Партии.ДатаПроизводства, ДЕНЬ) = СпрСерии.ДатаПроизводства";
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрТаб Из ТаблицаДанных Цикл
		
		СтрокаРезультатаЗапроса = РезультатЗапроса.Найти(СтрТаб.НомерПартииПоставщика, "НомерПартииПоставщика");
		
		Если СтрокаРезультатаЗапроса <> Неопределено Тогда
			СтрТаб.ТребуемоеДействие = СтрокаРезультатаЗапроса.ТребуемоеДействие;
			СтрТаб.СерияНоменклатуры = СтрокаРезультатаЗапроса.СерияНоменклатуры;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПреобразоватьДанныеПоПартиямВТаблицуЗначений(Данные)
	
	ТабЗнач = Новый ТаблицаЗначений;
	ТабЗнач.Колонки.Добавить("Владелец",                   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабЗнач.Колонки.Добавить("КоличествоПериодовГодности", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5)));
	ТабЗнач.Колонки.Добавить("Комментарий",                Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(500)));
	ТабЗнач.Колонки.Добавить("НомерПартииПоставщика",      Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25)));
	ТабЗнач.Колонки.Добавить("ПериодГодности",             Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	ТабЗнач.Колонки.Добавить("ДатаПроизводства",           Новый ОписаниеТипов("Дата"));
	ТабЗнач.Колонки.Добавить("СрокГодности",               Новый ОписаниеТипов("Дата"));
	ТабЗнач.Колонки.Добавить("Производитель",              Новый ОписаниеТипов("СправочникСсылка.Контрагенты,СправочникСсылка.Производители"));
	ТабЗнач.Колонки.Добавить("СтранаПроисхождения",        Новый ОписаниеТипов("СправочникСсылка.КлассификаторСтранМира"));
	ТабЗнач.Колонки.Добавить("Подразделение",              Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	ТабЗнач.Колонки.Добавить("ДатаСозданияСерии",          Новый ОписаниеТипов("Дата"));
	ТабЗнач.Колонки.Добавить("Используется",               Новый ОписаниеТипов("Булево"));
	ТабЗнач.Колонки.Добавить("ПометкаУдаления",            Новый ОписаниеТипов("Булево"));
	ТабЗнач.Колонки.Добавить("КодПартнера",                Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25)));
	
	Для каждого Элемент Из Данные Цикл
		
		Владелец = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", УдалитьЛидирущиеНулиИзКодаТовара(Элемент.itemNum), СвойстваПартнера.ГруппаНоменклатуры);
		
		НовСтр                            = ТабЗнач.Добавить();
		НовСтр.Владелец                   = Владелец;
		НовСтр.Комментарий                = ОбщиеФункции._СтрШаблон_("#%1. Создана обменом по договору 3PL", СвойстваПартнера.КодДистрибьютора);
		НовСтр.НомерПартииПоставщика      = Элемент.lot;
		НовСтр.ДатаПроизводства           = ПрочитатьДату(Элемент.prodDate, ФорматДатыJSON.ISO);
		НовСтр.СрокГодности               = ПрочитатьДату(Элемент.expDate, ФорматДатыJSON.ISO);
		НовСтр.ПериодГодности             = Перечисления.Периодичность.День;
		НовСтр.КоличествоПериодовГодности = (НовСтр.СрокГодности - НовСтр.ДатаПроизводства) / 86400;

		Производитель                     = ОбщиеФункции.ВернутьОбъектПоЗначениюСвойства(ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьСвойствоПоИмени("ИдентификаторЗаводаПепси"),
												Элемент.valType);

		Если НЕ ЗначениеЗаполнено(Производитель) Тогда
			Производитель                 = СвойстваПартнера.ОсновнойПоставщик;
		КонецЕсли;

		НовСтр.Производитель              = Производитель;
		НовСтр.СтранаПроисхождения        = Справочники.КлассификаторСтранМира.НайтиПоКоду("643");
		НовСтр.ДатаСозданияСерии          = ТекущаяДатаСеанса();
		НовСтр.Используется               = ?(Элемент.status = "X" ИЛИ ЗначениеЗаполнено(Элемент.del), Ложь, Истина);
		НовСтр.ПометкаУдаления            = ?(ЗначениеЗаполнено(Элемент.del), Истина, Ложь);
		НовСтр.КодПартнера                = УдалитьЛидирущиеНулиИзКодаТовара(Элемент.itemNum);
				
	КонецЦикла;
	
	Возврат ТабЗнач;
	
КонецФункции

#КонецОбласти 

#КонецОбласти

