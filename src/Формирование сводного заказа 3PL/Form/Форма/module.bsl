
Перем КоличествоСтрокЗаказано;
Перем id_ФоновогоЗаданияПроведенияОТУ;
Перем ПараметрыПроведенияДокументовПослеВыкупаВФоне;
Перем ТаблицаДокументовДляОбработки;

Функция ПолучитьПутьКФайлуСводногоЗаказа()
	
	МассивФайлов = НайтиФайлы(ПутьКПапкеТекущийБланкЗаказ, МаскаИмениФайлаБланкЗаказ, Ложь);
	
	Если МассивФайлов.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат МассивФайлов.Получить(0).ПолноеИмя;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИмяФайлаВыкупа(ПутьКИсходномуФайлу)
	
	ИсходныйФайл = Новый Файл(ПутьКИсходномуФайлу);
	ДатаФормированияФайлаВыкупа = Формат(ТекущаяДата(), "ДФ=""ддММгггг_ЧЧмм""");
	пПутьКФайлуВыкупа = ПутьКПапкеВыкуп + "Выкуп_" + ИсходныйФайл.ИмяБезРасширения + "_" + ДатаФормированияФайлаВыкупа + ИсходныйФайл.Расширение;
	
	Возврат пПутьКФайлуВыкупа;
	
КонецФункции

Процедура ВыгрузитьДанныеОЗаказываемомКоличествеВФайлСводногоЗаказа(СводнаяТаблица)
	
	// Скопируем первоначальный файл бланк-заказа в итоговый файл с данными для выкупа.
	ПутьКФайлу = ПолучитьПутьКФайлуСводногоЗаказа();
	ПутьКФайлуВыкупа = ПолучитьИмяФайлаВыкупа(ПутьКФайлу);
	КопироватьФайл(ПутьКФайлу, ПутьКФайлуВыкупа);
	
	// Запишем полученные данные с заказанным количеством в итоговый файл.
	Попытка
		Ехсел = Новый COMObject("Excel.Application");
		Книга = Ехсел.Workbooks.Open(ПутьКФайлуВыкупа);
	Исключение
		Сообщить("Произошла ошибка при обращение к Excel:" + Символы.ПС + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
    Страница = Книга.Application.Sheets(3);
	НомерСтроки = 8;
	
	Для каждого СтрокаТаблицыЗаказано Из СводнаяТаблица Цикл
		
		//Сообщить("Запись данных в файл Excel. Всего строк: " + МаксНомерСтроки + "; Обработано строк: " + НомерСтроки + ".");
		
		Страница.Cells(НомерСтроки, 34).Value = СтрокаТаблицыЗаказано.Артикул;
		Страница.Cells(НомерСтроки, 35).Value = СтрокаТаблицыЗаказано.Наименование;
		Страница.Cells(НомерСтроки, 36).Value = СтрокаТаблицыЗаказано.Потребность;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	// Попытка записать файл.
	Попытка
		Ехсел.DisplayAlerts = 0; 
		Книга.SaveAs(ПутьКФайлуВыкупа);
		Книга.Close();
		Ехсел.Quit();
		Ехсел.DisplayAlerts = 1;
	Исключение
		
		Сообщить("Не удалось записать файл """ + ПутьКФайлуВыкупа + """." + Символы.ПС + ОписаниеОшибки());
		
		Ехсел.DisplayAlerts = 0; 
		Ехсел.Quit();
		Ехсел.DisplayAlerts = 1;
	КонецПопытки;
	
КонецПроцедуры

Функция ПодготовитьТаблицуДляВыкупа()
	
	ТабЗнач = БланкЗаказ.Выгрузить();
	ТабЗнач.Очистить();
	
	Для каждого СтрТаб Из БланкЗаказ Цикл
		
		Если СтрТаб.Потребность > 0 Тогда
			НовСтр = ТабЗнач.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрТаб);
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат ТабЗнач;
	
КонецФункции
 
Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	Если пвВнешСистема.Пустая() Тогда
		Сообщить("Не заполнены настройки для выкупа. На вкладе 'Настройка' выберите 'Внеш. систему'", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли; 
	
	ТребуемоеДействие = СписокТребуемыхДействий.НайтиПоЗначению(Кнопка.Имя);
	
	Если ТребуемоеДействие <> Неопределено Тогда
		ТребуемоеДействие.Пометка = Ложь;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПроверитьОчередностьВыполнения(ТребуемоеДействие, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СводнаяТаблица = ПодготовитьТаблицуДляВыкупа();
	
	СоздатьДокументВыкупТовараСХранения(СводнаяТаблица);
	
	ВыгрузитьДанныеОЗаказываемомКоличествеВФайлСводногоЗаказа(СводнаяТаблица);
	
	Предупреждение("Обработка файла сводного заказа завершена!");
	
	Если ТребуемоеДействие <> Неопределено Тогда
		ТребуемоеДействие.Пометка = Истина;
	КонецЕсли;
	
	СледующееДействие(ТребуемоеДействие);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыДействиеОстаткиПоТоварамОтсутствующимВБланке(Кнопка)
	
	ТабДок = ПолучитьТабличныйДокументОстаткиПоТоварамОтсутсвующимВБланкеЗаказа();
	ТабДок.Показать();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	// Прочитаем настройки.
	//ПрочитатьНастройкиДляОбработки_ФормированиеСводногоЗаказа3PL();
		
	ДатаНачала = ТекущаяДатаСеанса();
	ДатаОкончания = ТекущаяДатаСеанса();
	
	СписокТребуемыхДействий.Добавить("ОбновитьБланкЗаказ", "Обновить бланк заказ", Ложь);
	СписокТребуемыхДействий.Добавить("КонсолидацияЗаказов", "Консолидация заказов", Ложь);
	СписокТребуемыхДействий.Добавить("ОсновныеДействияФормыВыполнить", "Создать файл выкупа", Ложь);
	СписокТребуемыхДействий.Добавить("ПровестиДокументыПослеВыкупа", "Провести документы ОТУ", Ложь);
	флСоздатьБЗПриНаличииОшибок = СоздатьБЗПриНаличииОшибок;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыДействиеСохранитьФайлыИзПочты(Кнопка)
	
	СохранитьФайлыИзПочтыПепсиВПапкуТекущийБланкЗаказ();
	
КонецПроцедуры

Процедура ДействияФормыОтправитьБланкЗаказНаВыкуп(Кнопка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл";
	Диалог.ПолноеИмяФайла = ""; 
	Фильтр = "EXCEL (*.xlsx)|*.xlsx"; 
	Диалог.Фильтр = Фильтр; 
    Диалог.МножественныйВыбор = Ложь;
	Диалог.Каталог = ПутьКПапкеТекущийБланкЗаказ;
	Если Диалог.Выбрать() Тогда
		пПутьКФайлуВыкупа = Диалог.ПолноеИмяФайла;
	Иначе
		Предупреждение("Файл не выбран! Действие не выполнено.");
		Возврат;
	КонецЕсли;
	
	ОтправитьПисьмоСБланкЗаказомНаВыкуп(пПутьКФайлуВыкупа);
	
КонецПроцедуры

Процедура КоманднаяПанель2ОбновитьБланкЗаказ(Кнопка)
		
	ТребуемоеДействие = СписокТребуемыхДействий.НайтиПоЗначению(Кнопка.Имя);
	
	Если ТребуемоеДействие <> Неопределено Тогда
		ТребуемоеДействие.Пометка = Ложь;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПроверитьОчередностьВыполнения(ТребуемоеДействие, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ПрочитатьДанныеСводногоЗаказаИзФайлаВТаблицуЗначений();
	
	Если ТребуемоеДействие <> Неопределено Тогда
		ТребуемоеДействие.Пометка = Истина;
	КонецЕсли;
	
	СледующееДействие(ТребуемоеДействие); 
	
КонецПроцедуры

Процедура КоманднаяПанель2КонсолидацияЗаказов(Кнопка)
	
	ТребуемоеДействие = СписокТребуемыхДействий.НайтиПоЗначению(Кнопка.Имя);
	
	Если ТребуемоеДействие <> Неопределено Тогда
		ТребуемоеДействие.Пометка = Ложь;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПроверитьОчередностьВыполнения(ТребуемоеДействие, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	КонсолидацияЗаказовНаВыкуп();
	
	ТребуемоеДействие = СписокТребуемыхДействий.НайтиПоЗначению(Кнопка.Имя);
	
	Если ТребуемоеДействие <> Неопределено Тогда
		ТребуемоеДействие.Пометка = Истина;
	КонецЕсли;
	
	СледующееДействие(ТребуемоеДействие);
	
КонецПроцедуры

Процедура КоманднаяПанель2ОтобразитьЗаказНаВыкуп(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	ЭлементыФормы.БланкЗаказ.ОтборСтрок.Заказано.ВидСравнения = ВидСравнения.Больше;
	ЭлементыФормы.БланкЗаказ.ОтборСтрок.Заказано.Использование = Кнопка.Пометка;
	
КонецПроцедуры

Процедура БланкЗаказПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЗначениеЗаполнено(ДанныеСтроки) Тогда
		
		Если ДанныеСтроки.АвтоПодборПоШК Тогда
			ОформлениеСтроки.Ячейки.Штрихкод.ЦветФона = WebЦвета.БледноЗеленый;
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанель2ОтобразитьСтрокиСАвтоподборомПоШК(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	ЭлементыФормы.БланкЗаказ.ОтборСтрок.АвтоПодборПоШК.Использование = Кнопка.Пометка;
	ЭлементыФормы.БланкЗаказ.ОтборСтрок.АвтоПодборПоШК.Значение = Кнопка.Пометка;
	
КонецПроцедуры

Процедура КоманднаяПанель2ЗаменитьНоменклатуруВДокументеПослеВыкупа(Кнопка)
	
	ТребуемоеДействие = СписокТребуемыхДействий.НайтиПоЗначению(Кнопка.Имя);
	
	Если ТребуемоеДействие <> Неопределено Тогда
		ТребуемоеДействие.Пометка = Ложь;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПроверитьОчередностьВыполнения(ТребуемоеДействие, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	внЭлемент = Справочники.ВнешниеОбработки.НайтиПоКоду("000001053");	
	
	Если ЗначениеЗаполнено(внЭлемент) Тогда
		
		внОбработка = ОбщиеФункции.ПодключитьВнешнююОбработку(внЭлемент);
		
		ФормаОбработки = внОбработка.ПолучитьФорму();
		ФормаОбработки.Открыть();
		
	КонецЕсли;
	
	Если ТребуемоеДействие <> Неопределено Тогда
		ТребуемоеДействие.Пометка = Истина;
	КонецЕсли;
	
	СледующееДействие(ТребуемоеДействие);
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(id_ФоновогоЗаданияПроведенияОТУ) Тогда
		
		Отказ = Истина;
		
		ТекстПредупреждения = "Невозможно закрыть форму по причине:" +"
			|выполняется действие: ""Действия после выкупа - Провести документы"" в фоновом режиме" + "
			|с идентификатором задания: " + id_ФоновогоЗаданияПроведенияОТУ + "
			|Дождитесь завершения текущего действия!";
		
		Предупреждение(ТекстПредупреждения, 20 ,"Внимание");
	КонецЕсли;

	МассивНевыполненныхДействий = Новый Массив;
	
	Для каждого Элемент Из СписокТребуемыхДействий Цикл
		
		Если Элемент.Пометка = Ложь Тогда
			МассивНевыполненныхДействий.Добавить(Элемент.Представление);
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МассивНевыполненныхДействий) Тогда
		
		#Если Клиент Тогда
			
			ОчиститьСообщения();
			
			ОтветНаВопрос =  Вопрос("Остались невыполненные действия. Закрыть обработку?", РежимДиалогаВопрос.ДаНет);
			
			Отказ = (ОтветНаВопрос = КодВозвратаДиалога.Нет);
			
			Если Отказ Тогда
				
				Для каждого Элемент Из МассивНевыполненныхДействий Цикл
					Сообщить("Не выполнено действие: "+Элемент, СтатусСообщения.Важное);
				КонецЦикла; 
				
			КонецЕсли; 
			
		#КонецЕсли 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанель2ПровестиДокументыПослеВыкупа(Кнопка)
	
	ТребуемоеДействие = СписокТребуемыхДействий.НайтиПоЗначению(Кнопка.Имя);
	
	Если ТребуемоеДействие <> Неопределено Тогда
		ТребуемоеДействие.Пометка = Ложь;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПроверитьОчередностьВыполнения(ТребуемоеДействие, Отказ);
	
	Сообщить("Действие 'Провести документы' пока не работает");
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТребуемоеДействие <> Неопределено Тогда
		ТребуемоеДействие.Пометка = Истина;
	КонецЕсли;
	
	//++УсачевАА 12.21
	ЗапуститьПроведениеДокументовПослеВыкупаВФоне();
	//--УсачевАА 12.21
	
КонецПроцедуры

Процедура ПроверитьОчередностьВыполнения(ТребуемоеДействие, ЕстьПропущенныеДействия)
	
	ИндексТребуемоеДействие = СписокТребуемыхДействий.Индекс(ТребуемоеДействие);
	
	ЕстьПропущенныеДействия = Ложь;
	
	Возврат;
	
	// Проверка на выполнение прошлых действий
	Для Сч = 0 По ИндексТребуемоеДействие - 1 Цикл
		
		ТребДействие = СписокТребуемыхДействий.Получить(Сч);
		
		Если ТребДействие.Пометка = Ложь Тогда
			
			Сообщить("Пропущено действие: " + ТребДействие.Представление);
			
			ЕстьПропущенныеДействия = Истина;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры 

Процедура СледующееДействие(ТребуемоеДействие)
	
	ИндексТребуемоеДействие = СписокТребуемыхДействий.Индекс(ТребуемоеДействие);
		
	Если ИндексТребуемоеДействие + 1 < СписокТребуемыхДействий.Количество() Тогда
		Сообщить("Следующее действие: " + СписокТребуемыхДействий.Получить(ИндексТребуемоеДействие + 1));
	КонецЕсли;
	
КонецПроцедуры

//++УсачевАА 12.21
Процедура ЗапуститьПроведениеДокументовПослеВыкупаВФоне()

	Если ЗначениеЗаполнено(id_ФоновогоЗаданияПроведенияОТУ) Тогда
		Сообщить("Внимание: проведение документов после выкупа уже запущено в фоновом режиме с идентификатором задания: " + id_ФоновогоЗаданияПроведенияОТУ + ". Дождитесь завершения текущего задания!", СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведенияДокументовПослеВыкупаВФоне = Новый Структура;
	ПараметрыПроведенияДокументовПослеВыкупаВФоне.Вставить("Период", НачалоДня(ДатаОкончания));
	ПараметрыПроведенияДокументовПослеВыкупаВФоне.Вставить("ВнешняяОбработка", Истина);
	
	внОбработка = Справочники.ВнешниеОбработки.НайтиПоКоду("000001063");
	внОбработкаОбъект = ОбщиеФункции.ПодключитьВнешнююОбработку(внОбработка);
	внОбработкаОбъект.ЗаполнитьНастройкиПартнера(Партнер);
	внОбработкаОбъект.Период = ПараметрыПроведенияДокументовПослеВыкупаВФоне.Период;
	
	МетаданныеОбъекта = внОбработкаОбъект.Метаданные();
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты цикл
		ПараметрыПроведенияДокументовПослеВыкупаВФоне.Вставить(Реквизит.Имя, Неопределено);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ПараметрыПроведенияДокументовПослеВыкупаВФоне, внОбработкаОбъект);
	
	ДанныеМенеджерВТ = внОбработкаОбъект.ДокуметыОтгрузкиПепсиВремТаблицы();
	
	ТаблицаДокументовДляОбработки = ДанныеМенеджерВТ.Таблицы["втИтог"].ПолучитьДанные().Выгрузить();
	
	ДанныеМенеджерВТ.Закрыть(); внОбработкаОбъект = Неопределено;
			
	СтатусОбработки = "**Формирование сводного заказа 3PL**  Действие: Проведение документов после выкупа в фоновом режиме! Статус: НАЧАЛО! Количество документов для проведения: " + ТаблицаДокументовДляОбработки.Количество() + " (" + ТекущаяДата() + ")";
	Сообщить(СтатусОбработки, СтатусСообщения.Информация);
	
	ЗапуститьОбработкуПроведениеДокументовПослеВыкупаВФоне(id_ФоновогоЗаданияПроведенияОТУ, ПараметрыПроведенияДокументовПослеВыкупаВФоне, внОбработка);
	ПодключитьОбработчикОжидания("ОбновлениеИнфоПроведенияДокументовВФоне", 8, Истина);
	
КонецПроцедуры

Процедура ОбновлениеИнфоПроведенияДокументовВФоне()

	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(id_ФоновогоЗаданияПроведенияОТУ);	
	
	Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно тогда
		
		ПодключитьОбработчикОжидания("ОбновлениеИнфоПроведенияДокументовВФоне", 30, Истина);
		ТаблицаОТУ = ТаблицаДокументовДляПроведенияПослеВыкупа();
		СтатусОбработки = "**Формирование сводного заказа 3PL**  Действие: Проведение документов после выкупа в фоновом режиме! Статус: ВЫПОЛНЯЕТСЯ.... Осталось провести ОТУ: " + ТаблицаОТУ.Количество() + " (" + ТекущаяДата() + ")";
		Сообщить(СтатусОбработки, СтатусСообщения.Информация);
		
	ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		
		МассивСообщений = ФоновоеЗадание.ПолучитьСообщенияПользователю();
		
		Если МассивСообщений <> Неопределено Тогда
			СообщенияПроведенияДокументовВФонеВЛогФайл(МассивСообщений);
		КонецЕсли;
		
		id_ФоновогоЗаданияПроведенияОТУ = "";
		
		ТаблицаОТУ = ТаблицаДокументовДляПроведенияПослеВыкупа();
		
		Для Каждого СтрокаОТУ Из ТаблицаОТУ Цикл
			Сообщить("**Формирование сводного заказа 3PL**  Действие: Проведение документов после выкупа в фоновом режиме! Статус: НЕ удалось провести " + СтрокаОТУ.Ссылка + "!", СтатусСообщения.Важное);
		КонецЦикла;
		
		СтатусОбработки = "**Формирование сводного заказа 3PL**  Действие: Проведение документов после выкупа в фоновом режиме! Статус: ЗАВЕРШЕНО!  Осталось провести ОТУ: " + ТаблицаОТУ.Количество() + " (" + ТекущаяДата() + ")";
		
		Сообщить(СтатусОбработки, СтатусСообщения.Информация);
		
		СтатусОбработки = "**Формирование сводного заказа 3PL**  Действие: Отправка электронных писем по Акциям пепси после выкупа в фоновом режиме!";
		Сообщить(СтатусОбработки, СтатусСообщения.Информация);
		
		ОтправитьНеотправленыеЭлПисьмаТорговымАгентам();
		
		СтатусОбработки = "**Формирование сводного заказа 3PL**  Действие: Отправка электронных писем по Акциям пепси после выкупа в фоновом режиме! Статус: ЗАВЕРШЕНО!";
		Сообщить(СтатусОбработки, СтатусСообщения.Информация);

	ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		ИнформацияОбОшибке = ФоновоеЗадание.ИнформацияОбОшибке;
		Сообщить(ИнформацияОбОшибке.Описание);
		id_ФоновогоЗаданияПроведенияОТУ = "";
		Сообщить("**Формирование сводного заказа 3PL**  Действие: Проведение документов после выкупа в фоновом режиме! Статус: Завершено с ОШИБКАМИ!", СтатусСообщения.Важное);
	КонецЕсли;	

КонецПроцедуры

Процедура СообщенияПроведенияДокументовВФонеВЛогФайл(МассивСообщений)
	
	текСтрПоиска = "#Ц_П_З_Н_Р|"; ///Антропов Е.П.от 18.09.2023 000000010

	ИмяФайла = ОбщиеФункции._СтрШаблон_("КорректировкаКоличестваТовараПоЗаказамПепси_%1.txt", Формат(ТекущаяДата(), "ДФ=yyyyMMdd_HHmmss"));
	ПолноеИмяФайла = ОбщиеФункции._СтрШаблон_("%1%2", КаталогВременныхФайлов(), ИмяФайла);

	ТекстДок = Новый ТекстовыйДокумент;
	
	Для Каждого СообщениеЗадания Из МассивСообщений Цикл
		ТекстДок.ДобавитьСтроку(СообщениеЗадания.Текст);
		
		///Антропов Е.П.от 18.09.2023 000000010
		Если Лев(СообщениеЗадания.Текст, 11) = текСтрПоиска Тогда 
			Сообщить(СтрЗаменить(СообщениеЗадания.Текст, текСтрПоиска, ""));
		КонецЕсли;
		///Антропов Е.П.от 18.09.2023 000000010
	КонецЦикла;	

	ТекстДок.Записать(ПолноеИмяФайла);
	
	ПереместитьФайл(ПолноеИмяФайла, "\\tdsh.local\for1c$\Мозаика\ЛогиПоАвтозаменамНоменклатуры\"+ИмяФайла);
	
КонецПроцедуры

Функция ТаблицаДокументовДляПроведенияПослеВыкупа()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	тд.Ссылка
	|ПОМЕСТИТЬ втДокументыВОбработке
	|ИЗ
	|	&ТаблицаДанных КАК тд
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Ссылка
	|ИЗ
	|	втДокументыВОбработке КАК вт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровУслуг КАК ОТУ
	|		ПО вт.Ссылка = ОТУ.Ссылка
	|ГДЕ
	|	ОТУ.Проведен = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДокументовДляОбработки); 
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура ОтправитьНеотправленыеЭлПисьмаТорговымАгентам()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронноеПисьмо.Ссылка
		|ИЗ
		|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
		|ГДЕ
		|	ЭлектронноеПисьмо.СтатусПисьма = ЗНАЧЕНИЕ(перечисление.статусыписем.пустаяссылка)
		|	И НАЧАЛОПЕРИОДА(ЭлектронноеПисьмо.Дата, ДЕНЬ) = &ДатаСоздания
		|	И НЕ ЭлектронноеПисьмо.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДатаСоздания", НачалоДня(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокПисьмо = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			ДокПисьмо.ОтправитьПисьмо();
			Сообщить("Электронное Письмо " + ДокПисьмо.Номер + " по документу ОТУ " + ДокПисьмо.ИДЗаказа + " отправлен!");
		Исключение
			Сообщить("Ошибка отправки Электронного письма " + ДокПисьмо.Номер);
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

Процедура пвВнешСистемаПриИзменении(Элемент)
	
	ПутьКПапкеТекущийБланкЗаказ = Справочники.ВнешниеСистемы.ПолучитьЗначенияКлюча(пвВнешСистема, "ПутьКПапкеТекущийБланкЗаказ");
	ПутьКПапкеНеобработанные = Справочники.ВнешниеСистемы.ПолучитьЗначенияКлюча(пвВнешСистема, "ПутьКПапкеНеобработанные");
	ПутьКПапкеАрхивБланкЗаказ = Справочники.ВнешниеСистемы.ПолучитьЗначенияКлюча(пвВнешСистема, "ПутьКПапкеАрхивБланкЗаказ");
	ПутьКПапкеВыкуп = Справочники.ВнешниеСистемы.ПолучитьЗначенияКлюча(пвВнешСистема, "ПутьКПапкеВыкуп");
	Партнер = Справочники.ВнешниеСистемы.ПолучитьЗначенияКлюча(пвВнешСистема, "Партнер");
	МаскаИмениФайлаБланкЗаказ = Справочники.ВнешниеСистемы.ПолучитьЗначенияКлюча(пвВнешСистема, "МаскаИмениФайлаБланкЗаказ");
	УчетнаяЗаписьЭлектроннойПочты = Справочники.ВнешниеСистемы.ПолучитьЗначенияКлюча(пвВнешСистема, "УчетнаяЗаписьЭлектроннойПочтыДляОтправкиВыкупа");
	EMailДляОтправкиБланкЗаказа = Справочники.ВнешниеСистемы.ПолучитьЗначенияКлюча(пвВнешСистема, "EMailДляОтправкиБланкЗаказа");
	МассивКонтрактов = Справочники.ВнешниеСистемы.ПолучитьЗначенияКлюча(пвВнешСистема, "КонтрактДляОстатков");
	ДистрибьюторскиеКонтракты.Очистить();
	Для каждого Элемент Из МассивКонтрактов Цикл
		НовСтр = ДистрибьюторскиеКонтракты.Добавить();
		НовСтр.Контракт = Элемент;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		СвойстваПартнера = РегистрыСведений.ДополнительныеРеквизиты_3PL.ПолучитьСвойстваОбъекта(Партнер);
		Если ЗначениеЗаполнено(СвойстваПартнера) Тогда
			Склад = СвойстваПартнера.Склад;
			Склад_3PD = СвойстваПартнера.Склад3PD;
			Контрагент = СвойстваПартнера.ОсновнойПоставщик;
			Организация = СвойстваПартнера.ОсновнаяОрганизация;
			ДоговорКонтрагента = СвойстваПартнера.ОсновнойДоговорПриемаНаХранение;
			ТипЦен = СвойстваПартнера.ОсновнойТипЦенКонтрагента;
			Подразделение = СвойстваПартнера.ОсновноеПодразделение;
			ВремяСмещенияПоЧасПоясуКЦентральнойБазеВСекундах = СвойстваПартнера.ВремяСмещенияПоЧасПоясуКЦентральнойБазеВСекундах;
			Если НЕ ЗначениеЗаполнено(ВремяСмещенияПоЧасПоясуКЦентральнойБазеВСекундах) Тогда
				ВремяСмещенияПоЧасПоясуКЦентральнойБазеВСекундах = 0;	
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
		
КонецПроцедуры

Процедура флСоздатьСводныйЗаказПриНаличииОшибокНажатие(Элемент)
	
	СоздатьБЗПриНаличииОшибок = флСоздатьБЗПриНаличииОшибок;
	
КонецПроцедуры
//--УсачевАА 12.21