Перем ПутьКФайлуВыкупа;
Перем ТаблицаСконсолидированныхЗаказов;
Перем ТаблицаТоваровСОХ;
Перем ТаблицаНоменклатурыСШк;
Перем ТаблицаСписокОТУ;
Перем ТаблицаНоменклатуры3ПД;
Перем СоздатьБЗПриНаличииОшибок Экспорт;
Перем ВремяСмещенияПоЧасПоясуКЦентральнойБазеВСекундах Экспорт;

Процедура ОбработатьФайлСводногоЗаказа() Экспорт
	
	//Если РежимОтладки = Ложь Тогда
	//	Если ПрочитатьНастройкиДляОбработки_ФормированиеСводногоЗаказа3PL() = Ложь Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если РежимОтладки = Ложь Тогда
	//	СохранитьФайлыИзПочтыПепсиВПапкуТекущийБланкЗаказ();
	//КонецЕсли;
	//
	//ПутьКФайлу = ПолучитьПутьКФайлуСводногоЗаказа();
	//
	//Если ПутьКФайлу = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ДанныеФайлаСводныйЗаказ = СформироватьСтруктуруТаблицыЗначенийСводногоЗаказа();
	//
	//ПрочитатьДанныеСводногоЗаказаИзФайлаВТаблицуЗначений();
	
	//ПроверитьНаДублиДанныеСводногоЗаказа(ДанныеФайлаСводныйЗаказ);
	//
	//ОбновитьФлагИспользованиеВРегистреСоответствияНоменклатуры_3PL(ДанныеФайлаСводныйЗаказ);
	//
	//ВывестиОстаткиПоТоварамОтсутсвующимВБланкеЗаказа();
	//
	//ВыгрузитьДанныеОЗаказываемомКоличествеВФайлСводногоЗаказа(ДанныеФайлаСводныйЗаказ, ПутьКФайлу);
	//
	//ОтправитьПисьмоСБланкЗаказомНаВыкуп(ПутьКФайлуВыкупа);
	//
	//СоздатьДокументВыкупТовараСХранения(ДанныеФайлаСводныйЗаказ);
	
КонецПроцедуры

Функция ПрочитатьНастройкиДляОбработки_ФормированиеСводногоЗаказа3PL() Экспорт
	
	СтруктураНастроек = ПолучитьСтруктуруНастроекДляОбработки_ФормированиеСводногоЗаказа3PL();
	
	Если СтруктураНастроек = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
	
	Если Не ЗначениеЗаполнено(ДатаНачала) ИЛИ Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаНачала = НачалоДня(ТекущаяДата());
		ДатаОкончания = КонецДня(ТекущаяДата());
	КонецЕсли;
	
	ДистрибьюторскиеКонтракты.Очистить();
	
	Для каждого ТекДистрибьюторскийКонтракт Из СтруктураНастроек.КонтрактыДляОстатков Цикл
		НоваяСтрока = ДистрибьюторскиеКонтракты.Добавить();
		НоваяСтрока.Контракт = ТекДистрибьюторскийКонтракт;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСтруктуруНастроекДляОбработки_ФормированиеСводногоЗаказа3PL()
	
	// Найдем нужную запись в справочнике "Внешние системы".
	ВнешниеСистемыЭлемент = Справочники.ВнешниеСистемы.НайтиПоКоду("000000025");
	
	Если Не ЗначениеЗаполнено(ВнешниеСистемыЭлемент) Тогда
		Если РежимОтладки = Истина Тогда
			Сообщить("Не удалось найти в справочнике ""Внешние системы"" элемент с кодом ""000000025""!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	// Создадим структуру.
	СтруктураНастроек = Новый Структура();
	
	СтруктураНастроек.Вставить("ПутьКПапкеВыкуп", Справочники.ВнешниеСистемы.ПолучитьЗначенияКлюча(ВнешниеСистемыЭлемент, "ПутьКПапкеВыкуп"));
	
	// Прочитаем пути к каталогам.
	СтрокаПутьКПапкеТекущийБланкЗаказ = ВнешниеСистемыЭлемент.Ключи.Найти("ПутьКПапкеТекущийБланкЗаказ", "Наименование");
	Если СтрокаПутьКПапкеТекущийБланкЗаказ = Неопределено Тогда
		Если РежимОтладки = Истина Тогда
			Сообщить("Не удалось прочитать значение настройки ""ПутьКПапкеТекущийБланкЗаказ"" в элементе справочника ""Внешние системы"" с кодом ""000000025""!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	СтруктураНастроек.Вставить("ПутьКПапкеТекущийБланкЗаказ", СтрокаПутьКПапкеТекущийБланкЗаказ.Значение);
	
	СтрокаПутьКПапкеАрхивБланкЗаказ = ВнешниеСистемыЭлемент.Ключи.Найти("ПутьКПапкеАрхивБланкЗаказ", "Наименование");
	Если СтрокаПутьКПапкеАрхивБланкЗаказ = Неопределено Тогда
		Если РежимОтладки = Истина Тогда
			Сообщить("Не удалось прочитать значение настройки ""ПутьКПапкеАрхивБланкЗаказ"" в элементе справочника ""Внешние системы"" с кодом ""000000025""!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	СтруктураНастроек.Вставить("ПутьКПапкеАрхивБланкЗаказ", СтрокаПутьКПапкеАрхивБланкЗаказ.Значение);
	
	СтрокаПутьКПапкеНеобработанные = ВнешниеСистемыЭлемент.Ключи.Найти("ПутьКПапкеНеобработанные", "Наименование");
	Если СтрокаПутьКПапкеНеобработанные = Неопределено Тогда
		Если РежимОтладки = Истина Тогда
			Сообщить("Не удалось прочитать значение настройки ""ПутьКПапкеНеобработанные"" в элементе справочника ""Внешние системы"" с кодом ""000000025""!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	СтруктураНастроек.Вставить("ПутьКПапкеНеобработанные", СтрокаПутьКПапкеНеобработанные.Значение);
	
	// Прочитаем значение Партнер.
	СтрокаПартнер = ВнешниеСистемыЭлемент.Ключи.Найти("Партнер", "Наименование");
	Если СтрокаПартнер = Неопределено Тогда
		Если РежимОтладки = Истина Тогда
			Сообщить("Не удалось прочитать значение настройки ""Партнер"" в элементе справочника ""Внешние системы"" с кодом ""000000025""!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	СтруктураНастроек.Вставить("Партнер", СтрокаПартнер.Значение);
	
	// Прочитаем значение Склад_3PD.
	СтрокаСклад_3PD = ВнешниеСистемыЭлемент.Ключи.Найти("Склад", "Наименование");
	Если СтрокаСклад_3PD = Неопределено Тогда
		Если РежимОтладки = Истина Тогда
			Сообщить("Не удалось прочитать значение настройки ""Склад"" в элементе справочника ""Внешние системы"" с кодом ""000000025""!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	СтруктураНастроек.Вставить("Склад_3PD", СтрокаСклад_3PD.Значение);
	
	// Прочитаем значение Склад_3PL.
	СтрокаСклад_3PL = ВнешниеСистемыЭлемент.Ключи.Найти("Склад_3PL", "Наименование");
	Если СтрокаСклад_3PL = Неопределено Тогда
		Если РежимОтладки = Истина Тогда
			Сообщить("Не удалось прочитать значение настройки ""Склад_3PL"" в элементе справочника ""Внешние системы"" с кодом ""000000025""!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	СтруктураНастроек.Вставить("Склад", СтрокаСклад_3PL.Значение);
	
	// Прочитаем значение ПроверятьФайлСводногоЗаказаНаДубли.
	СтрокаПроверятьФайлСводногоЗаказаНаДубли = ВнешниеСистемыЭлемент.Ключи.Найти("ПроверятьФайлСводногоЗаказаНаДубли", "Наименование");
	Если СтрокаПроверятьФайлСводногоЗаказаНаДубли = Неопределено Тогда
		Если РежимОтладки = Истина Тогда
			Сообщить("Не удалось прочитать значение настройки ""ПроверятьФайлСводногоЗаказаНаДубли"" в элементе справочника ""Внешние системы"" с кодом ""000000025""!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	// Прочитаем список значений КонтрактДляОстатков.
	СтруктураОтбора = Новый Структура("Наименование", "КонтрактДляОстатков");
	СтрокиКонтрактовДляОстатков = ВнешниеСистемыЭлемент.Ключи.НайтиСтроки(СтруктураОтбора);
	Если СтрокиКонтрактовДляОстатков.Количество() = 0 Тогда
		Если РежимОтладки = Истина Тогда
			Сообщить("Не удалось прочитать значение настройки ""КонтрактДляОстатков"" в элементе справочника ""Внешние системы"" с кодом ""000000025""!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	МассивКонтрактовДляОстатков = Новый Массив;
	Для каждого ТекСтрокаКонтрактаДляОстатков Из СтрокиКонтрактовДляОстатков Цикл
		МассивКонтрактовДляОстатков.Добавить(ТекСтрокаКонтрактаДляОстатков.Значение);
	КонецЦикла;
	СтруктураНастроек.Вставить("КонтрактыДляОстатков", МассивКонтрактовДляОстатков);
	
	// Прочитаем значение МаскаИмениФайлаБланкЗаказ.
	СтрокаМаскаИмениФайлаБланкЗаказ = ВнешниеСистемыЭлемент.Ключи.Найти("МаскаИмениФайлаБланкЗаказ", "Наименование");
	Если СтрокаМаскаИмениФайлаБланкЗаказ = Неопределено Тогда
		Если РежимОтладки = Истина Тогда
			Сообщить("Не удалось прочитать значение настройки ""МаскаИмениФайлаБланкЗаказ"" в элементе справочника ""Внешние системы"" с кодом ""000000025""!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	СтруктураНастроек.Вставить("МаскаИмениФайлаБланкЗаказ", СтрокаМаскаИмениФайлаБланкЗаказ.Значение);
	
	// Прочитаем значение УчетнаяЗаписьЭлектроннойПочты.
	СтрокаУчетнаяЗаписьЭлектроннойПочты = ВнешниеСистемыЭлемент.Ключи.Найти("УчетнаяЗаписьЭлектроннойПочтыДляОтправкиВыкупа", "Наименование");
	Если СтрокаУчетнаяЗаписьЭлектроннойПочты = Неопределено Тогда
		Если РежимОтладки = Истина Тогда
			Сообщить("Не удалось прочитать значение настройки ""УчетнаяЗаписьЭлектроннойПочты"" в элементе справочника ""Внешние системы"" с кодом ""000000025""!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	СтруктураНастроек.Вставить("УчетнаяЗаписьЭлектроннойПочты", СтрокаУчетнаяЗаписьЭлектроннойПочты.Значение);
	
	// Прочитаем значение EMailДляОтправкиБланкЗаказа.
	СтрокаEMailДляОтправкиБланкЗаказа = ВнешниеСистемыЭлемент.Ключи.Найти("EMailДляОтправкиБланкЗаказа", "Наименование");
	Если СтрокаEMailДляОтправкиБланкЗаказа = Неопределено Тогда
		Если РежимОтладки = Истина Тогда
			Сообщить("Не удалось прочитать значение настройки ""EMailДляОтправкиБланкЗаказа"" в элементе справочника ""Внешние системы"" с кодом ""000000025""!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	СтруктураНастроек.Вставить("EMailДляОтправкиБланкЗаказа", СтрокаEMailДляОтправкиБланкЗаказа.Значение);
	
	// Прочитаем значение Контрагент.
	СтрокаКонтрагент = ВнешниеСистемыЭлемент.Ключи.Найти("Контрагент", "Наименование");
	Если СтрокаКонтрагент = Неопределено Тогда
		Если РежимОтладки = Истина Тогда
			Сообщить("Не удалось прочитать значение настройки ""Контрагент"" в элементе справочника ""Внешние системы"" с кодом ""000000025""!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	СтруктураНастроек.Вставить("Контрагент", СтрокаКонтрагент.Значение);
	
	// Прочитаем значение ДоговорКонтрагента.
	СтрокаДоговорКонтрагента = ВнешниеСистемыЭлемент.Ключи.Найти("ДоговорКонтрагента", "Наименование");
	Если СтрокаДоговорКонтрагента = Неопределено Тогда
		Если РежимОтладки = Истина Тогда
			Сообщить("Не удалось прочитать значение настройки ""ДоговорКонтрагента"" в элементе справочника ""Внешние системы"" с кодом ""000000025""!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	СтруктураНастроек.Вставить("ДоговорКонтрагента", СтрокаДоговорКонтрагента.Значение);
	
	// Прочитаем значение Организация.
	СтрокаОрганизация = ВнешниеСистемыЭлемент.Ключи.Найти("Организация", "Наименование");
	Если СтрокаОрганизация = Неопределено Тогда
		Если РежимОтладки = Истина Тогда
			Сообщить("Не удалось прочитать значение настройки ""Организация"" в элементе справочника ""Внешние системы"" с кодом ""000000025""!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	СтруктураНастроек.Вставить("Организация", СтрокаОрганизация.Значение);
	
	// Прочитаем значение ТипЦен.
	СтрокаТипЦен = ВнешниеСистемыЭлемент.Ключи.Найти("ТипЦен", "Наименование");
	Если СтрокаТипЦен = Неопределено Тогда
		Если РежимОтладки = Истина Тогда
			Сообщить("Не удалось прочитать значение настройки ""ТипЦен"" в элементе справочника ""Внешние системы"" с кодом ""000000025""!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	СтруктураНастроек.Вставить("ТипЦен", СтрокаТипЦен.Значение);
	
	// Возвращаем структуру настроек.
	Возврат СтруктураНастроек;
	
КонецФункции

Функция СформироватьСтруктуруТаблицыЗначенийСводногоЗаказа()
	
	ТЗ_СводныйЗаказ = Новый ТаблицаЗначений;
	
	КЧ_15_0 = Новый КвалификаторыЧисла(15,0);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ_15_0 = Новый ОписаниеТипов(Массив, , ,КЧ_15_0);
	ТЗ_СводныйЗаказ.Колонки.Добавить("НомерСтроки", ОписаниеТиповЧ_15_0);
	
	КС_13 = Новый КвалификаторыСтроки(13);
	Массив.Очистить();
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС_13 = Новый ОписаниеТипов(Массив, , КС_13);
	ТЗ_СводныйЗаказ.Колонки.Добавить("Штрихкод", ОписаниеТиповС_13);
	
	КС_9 = Новый КвалификаторыСтроки(9);
	ОписаниеТиповС_9 = Новый ОписаниеТипов(Массив, , КС_9);
	ТЗ_СводныйЗаказ.Колонки.Добавить("КодPepsico", ОписаниеТиповС_13);
	
	КС_1000 = Новый КвалификаторыСтроки(1000);
	ОписаниеТиповС_1000 = Новый ОписаниеТипов(Массив, , КС_1000);
	ТЗ_СводныйЗаказ.Колонки.Добавить("НаименованиеПартнера", ОписаниеТиповС_1000);
	
	Массив.Очистить();
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТиповНоменклатура = Новый ОписаниеТипов(Массив);
	ТЗ_СводныйЗаказ.Колонки.Добавить("Номенклатура", ОписаниеТиповНоменклатура);
	
	КЧ_15_3 = Новый КвалификаторыЧисла(15,3);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ_15_3 = Новый ОписаниеТипов(Массив, , ,КЧ_15_3);
	ТЗ_СводныйЗаказ.Колонки.Добавить("ЗаказываемоеКоличество", ОписаниеТиповЧ_15_3);
	
	Возврат ТЗ_СводныйЗаказ;
	
КонецФункции

Процедура ПрочитатьДанныеСводногоЗаказаИзФайлаВТаблицуЗначений() Экспорт
	
	
	МассивФайлов = НайтиФайлы(ПутьКПапкеТекущийБланкЗаказ, МаскаИмениФайлаБланкЗаказ);
	
	Если МассивФайлов.Количество() = 0 Тогда
		Сообщить("Не удалось найти бланк заказ в "+ПутьКПапкеТекущийБланкЗаказ);
		Возврат;
	Иначе
		Для каждого Файл Из МассивФайлов Цикл
			ПутьКФайлу = Файл.ПолноеИмя;
		КонецЦикла; 
	КонецЕсли; 
	
	Попытка
		Ехсел = Новый COMObject("Excel.Application");
		Книга = Ехсел.Workbooks;
		Книга.Open(ПутьКФайлу);
	Исключение
		Если РежимОтладки = Истина Тогда
			Сообщить("Произошла ошибка при обращение к Excel:" + Символы.ПС + ОписаниеОшибки());
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	Страница = Книга.Application.Sheets(3);
	МаксНомерСтроки = Страница.UsedRange.Rows.Count; // макс. колич. строк
	
	Если РежимОтладки = Истина Тогда
		Сообщить("Чтение данных из файла Excel...");
	КонецЕсли;
	
	БланкЗаказ.Очистить();
			
	МассивЗадублированныхШК = Новый Массив;
	
	Для НомерСтроки = 8 По МаксНомерСтроки Цикл
		
		ДанныеШтрихкод = СтрЗаменить(СокрЛП(Страница.Cells(НомерСтроки, 8).Value), Символы.НПП, "");
		ДанныеКодPepsico = СтрЗаменить(СокрЛП(Страница.Cells(НомерСтроки, 9).Value), Символы.НПП, "");
		ДанныеНаименованиеПартнера = СокрЛП(Страница.Cells(НомерСтроки, 17).Value);
		Бренд = СокрЛП(Страница.Cells(НомерСтроки, 11).Value);
		Размер = СокрЛП(Страница.Cells(НомерСтроки, 12).Value);
		РазмерУпаковки = СокрЛП(Страница.Cells(НомерСтроки, 13).Value);
		
		Если НЕ ЗначениеЗаполнено(ДанныеШтрихкод) Тогда
			Прервать;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(РазмерУпаковки) Тогда
			РазмерУпаковки = Число(РазмерУпаковки);
		Иначе
			РазмерУпаковки = 0;
		КонецЕсли;
		
		Если МассивЗадублированныхШК.Найти(ДанныеШтрихкод) <> Неопределено Тогда
			Сообщить(ОбщиеФункции._СтрШаблон_("Штрихкод упаковки '%1' задублирован. Необходимо запросить корректировку бланк заказа", ДанныеШтрихкод));
		Иначе
			МассивЗадублированныхШК.Добавить(ДанныеШтрихкод);
		КонецЕсли; 
		
		НоваяСтрока = БланкЗаказ.Добавить();
		НоваяСтрока.Штрихкод = ДанныеШтрихкод;
		НоваяСтрока.Артикул = ДанныеКодPepsico;
		НоваяСтрока.Наименование = ДанныеНаименованиеПартнера;
		НоваяСтрока.Бренд = Бренд;
		НоваяСтрока.Размер = Размер;
		НоваяСтрока.Коэффициент = РазмерУпаковки;
				
	КонецЦикла;
	
	Если РежимОтладки = Истина Тогда
		Сообщить("Чтение данных из файла Excel завершено...");
	КонецЕсли;
	
	Ехсел.DisplayAlerts = 0; 
	Ехсел.Quit();
	Ехсел.DisplayAlerts = 1;
	
КонецПроцедуры

Процедура ОбновитьФлагИспользованиеВРегистреСоответствияНоменклатуры_3PL(ТЗ_СводныйЗаказ)
	
	Если РежимОтладки = Истина Тогда
		Сообщить("Обновление флага ""Использование"" в регистре сведений ""СоответствияНоменклатуры_3PL"".");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ_СводныйЗаказ.Штрихкод КАК Штрихкод
	|ПОМЕСТИТЬ ТЗ_СводныйЗаказ
	|ИЗ
	|	&ТЗ КАК ТЗ_СводныйЗаказ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствияНоменклатуры_3PL.Номенклатура,
	|	СоответствияНоменклатуры_3PL.Партнер,
	|	СоответствияНоменклатуры_3PL.ЕдиницаИзмерения,
	|	СоответствияНоменклатуры_3PL.КодПартнера,
	|	СоответствияНоменклатуры_3PL.НаименованиеПартнера,
	|	СоответствияНоменклатуры_3PL.Штрихкод,
	|	СоответствияНоменклатуры_3PL.ОсновноеСоответствие,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТЗ_СводныйЗаказ.Штрихкод, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Использование
	|ИЗ
	|	РегистрСведений.СоответствияНоменклатуры_3PL КАК СоответствияНоменклатуры_3PL
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_СводныйЗаказ КАК ТЗ_СводныйЗаказ
	|		ПО СоответствияНоменклатуры_3PL.Штрихкод = ТЗ_СводныйЗаказ.Штрихкод
	|ГДЕ
	|	СоответствияНоменклатуры_3PL.Партнер = &Партнер";
	
	Запрос.УстановитьПараметр("ТЗ", ТЗ_СводныйЗаказ);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	ТаблицаДляОбновленияРегистраСоответствияНоменклатуры_3PL = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписей = РегистрыСведений.СоответствияНоменклатуры_3PL.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Партнер.Установить(Партнер);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Загрузить(ТаблицаДляОбновленияРегистраСоответствияНоменклатуры_3PL);
	НаборЗаписей.Записать(Истина);
	
	Если РежимОтладки = Истина Тогда
		Сообщить("");
		Сообщить("Выполнено обновление флага ""Использование"" в регистре сведений ""СоответствияНоменклатуры_3PL"".");
	КонецЕсли;
	
КонецПроцедуры
 
Процедура ПодобратьНоменклатуруПоШК(Штрихкод, Товар, Артикул)
	
	Товар = Справочники.Номенклатура.ПустаяСсылка();
		
	СтрТовар = ТаблицаСконсолидированныхЗаказов.Найти(Штрихкод, "Штрихкод");
	
	Если ЗначениеЗаполнено(СтрТовар) Тогда
		Товар = СтрТовар.Номенклатура;
		Артикул = СтрТовар.Артикул;
	Иначе
		Сообщить("Не удалось найти товар с кодом упаковки " + Штрихкод, СтатусСообщения.ОченьВажное);
	КонецЕсли; 
	
КонецПроцедуры
 
Процедура КонсолидацияЗаказовНаВыкуп() Экспорт
	
	Если БланкЗаказ.Количество() = 0 Тогда
		Сообщить("Бланк заказ пустой. Нажмите кнопку 'Обновить бланк заказ'", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	СвойстваПартнера = РегистрыСведений.ДополнительныеРеквизиты_3PL.ПолучитьСвойстваОбъекта(Партнер);
	
	Если СвойстваПартнера.Свойство("ВремяБлокировкиПроведенияЗаказовПепси") = ЛОЖЬ Тогда
		СвойстваПартнера.Вставить("ВремяБлокировкиПроведенияЗаказовПепси", КонецДня(ДатаОкончания));
	КонецЕсли; 
	
	#Если Клиент Тогда
		ОчиститьСообщения();
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	влЗапрос.Номенклатура,
	|	влЗапрос.Номенклатура.Артикул КАК Артикул,
	|	влЗапрос.Штрихкод,
	|	влЗапрос.КоличествоЗаказано,
	|	ЕСТЬNULL(влСвободныеОстаткиПоШК.СвободныйОстаток, 0) КАК КоличествоОстаток
	|ПОМЕСТИТЬ втЗаказНаВыкуп
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОтгрузкаТоваровУслугТовары.Ссылка КАК Ссылка,
	|		ОтгрузкаТоваровУслугТовары.Качество КАК Качество,
	|		ОтгрузкаТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|		ОтгрузкаТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
	|		ЕСТЬNULL(шк.Штрихкод, ""Не найден штрихкод"") КАК Штрихкод,
	|		ВЫРАЗИТЬ(СУММА(ОтгрузкаТоваровУслугТовары.Количество * ОтгрузкаТоваровУслугТовары.Коэффициент / ОтгрузкаТоваровУслугТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ОтгрузкаТоваровУслугТовары.Номенклатура.ЕдиницаЗакупок3.Коэффициент) КАК ЧИСЛО(15, 2)) КАК КоличествоЗаказано
	|	ИЗ
	|		Документ.ОтгрузкаТоваровУслуг КАК ОТУ
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровУслуг.Товары КАК ОтгрузкаТоваровУслугТовары
	|			ПО ОТУ.Ссылка = ОтгрузкаТоваровУслугТовары.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихКоды КАК шк
	|			ПО (ОтгрузкаТоваровУслугТовары.Номенклатура = шк.Номенклатура)
	|				И (ОтгрузкаТоваровУслугТовары.Номенклатура.ЕдиницаПродаж3 = шк.ЕдиницаИзмерения)
	|	ГДЕ
	|		ОТУ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И ОТУ.ПометкаУдаления = ЛОЖЬ
	|		И ОТУ.Проведен = ЛОЖЬ
	|		И ОТУ.Склад = &Склад_3PD
	|		И ВЫБОР
	|			КОГДА НАЧАЛОПЕРИОДА(ОТУ.ВремяПередачиЗаказаВОфис, ДЕНЬ) = НАЧАЛОПЕРИОДА(ОТУ.Дата, ДЕНЬ)
	|					И (ВЫРАЗИТЬ(ОТУ.Номер КАК СТРОКА(3))) <> ""ТШО""
	|				ТОГДА ОТУ.ВремяПередачиЗаказаВОфис <= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОТУ.ВремяПередачиЗаказаВОфис, ДЕНЬ), СЕКУНДА, &КоличествоСекундДляСрезаЗаказов)
	|			КОГДА НАЧАЛОПЕРИОДА(ОТУ.ВремяПередачиЗаказаВОфис, ДЕНЬ) = НАЧАЛОПЕРИОДА(ОТУ.Дата, ДЕНЬ)
	|					И (ВЫРАЗИТЬ(ОТУ.Номер КАК СТРОКА(3))) = ""ТШО""
	|				ТОГДА ОТУ.ВремяПередачиЗаказаВОфис <= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОТУ.ВремяПередачиЗаказаВОфис, ДЕНЬ), СЕКУНДА, &КоличествоСекундДляСрезаЗаказов - &СмещениеПоЧасПоясу)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|		И ОтгрузкаТоваровУслугТовары.Номенклатура.ДистрибьюторскийКонтракт В(&СписокКонтрактов)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОтгрузкаТоваровУслугТовары.Ссылка,
	|		ОтгрузкаТоваровУслугТовары.Качество,
	|		ОтгрузкаТоваровУслугТовары.Номенклатура,
	|		ОтгрузкаТоваровУслугТовары.Номенклатура.Артикул,
	|		ЕСТЬNULL(шк.Штрихкод, ""Не найден штрихкод"")) КАК влЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			влЗапрос.Штрихкод КАК Штрихкод,
	|			СУММА(влЗапрос.КоличествоОстаток) КАК КоличествоОстаток,
	|			СУММА(влЗапрос.КоличествоВРезерве) КАК КоличествоВРезерве,
	|			СУММА(влЗапрос.КоличествоОстаток) - СУММА(влЗапрос.КоличествоВРезерве) КАК СвободныйОстаток
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ЗапасыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|				ЗапасыНаСкладахОстатки.КоличествоОстаток / ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаПродаж3.Коэффициент КАК КоличествоОстаток,
	|				0 КАК КоличествоВРезерве,
	|				ЕСТЬNULL(шк.Штрихкод, ""Не найден штрихкод"") КАК Штрихкод
	|			ИЗ
	|				РегистрНакопления.ЗапасыНаСкладах.Остатки(
	|						,
	|						Склад = &Склад_3PD
	|							И Номенклатура.ДистрибьюторскийКонтракт В (&СписокКонтрактов)
	|							И НЕ Номенклатура В ИЕРАРХИИ (&ТоргОборудование)
	|							И Качество = ЗНАЧЕНИЕ(Справочник.Качество.Стандарт)) КАК ЗапасыНаСкладахОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихКоды КАК шк
	|					ПО ЗапасыНаСкладахОстатки.Номенклатура = шк.Номенклатура
	|						И ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаПродаж3 = шк.ЕдиницаИзмерения
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ЗапасыНаСкладахОстатки.Номенклатура,
	|				ЗапасыНаСкладахОстатки.КоличествоОстаток,
	|				ЕСТЬNULL(шк.Штрихкод, ""Не найден штрихкод""),
	|				ЗапасыНаСкладахОстатки.КоличествоОстаток / ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаПродаж3.Коэффициент
	|			
	|			ИМЕЮЩИЕ
	|				ЗапасыНаСкладахОстатки.КоличествоОстаток > 0
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				ЗапасыНаСкладахВРезерве.Номенклатура,
	|				0,
	|				ЗапасыНаСкладахВРезерве.КоличествоОстаток / ЗапасыНаСкладахВРезерве.Номенклатура.ЕдиницаПродаж3.Коэффициент,
	|				ЕСТЬNULL(шк.Штрихкод, ""Не найден штрихкод"")
	|			ИЗ
	|				РегистрНакопления.ЗапасыНаСкладахВРезерве.Остатки(
	|						,
	|						Склад = &Склад_3PD
	|							И Номенклатура.ДистрибьюторскийКонтракт В (&СписокКонтрактов)
	|							И НЕ Номенклатура В ИЕРАРХИИ (&ТоргОборудование)
	|							И Качество = ЗНАЧЕНИЕ(Справочник.Качество.Стандарт)) КАК ЗапасыНаСкладахВРезерве
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихКоды КАК шк
	|					ПО ЗапасыНаСкладахВРезерве.Номенклатура = шк.Номенклатура
	|						И ЗапасыНаСкладахВРезерве.Номенклатура.ЕдиницаПродаж3 = шк.ЕдиницаИзмерения
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ЗапасыНаСкладахВРезерве.Номенклатура,
	|				ЗапасыНаСкладахВРезерве.КоличествоОстаток,
	|				ЕСТЬNULL(шк.Штрихкод, ""Не найден штрихкод""),
	|				ЗапасыНаСкладахВРезерве.КоличествоОстаток / ЗапасыНаСкладахВРезерве.Номенклатура.ЕдиницаПродаж3.Коэффициент
	|			
	|			ИМЕЮЩИЕ
	|				ЗапасыНаСкладахВРезерве.КоличествоОстаток > 0) КАК влЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			влЗапрос.Штрихкод
	|		
	|		ИМЕЮЩИЕ
	|			СУММА(влЗапрос.КоличествоОстаток) - СУММА(влЗапрос.КоличествоВРезерве) > 0) КАК влСвободныеОстаткиПоШК
	|		ПО влЗапрос.Штрихкод = влСвободныеОстаткиПоШК.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаВыкуп.Номенклатура,
	|	ЗаказНаВыкуп.Артикул,
	|	ЗаказНаВыкуп.Штрихкод,
	|	ЗаказНаВыкуп.КоличествоЗаказано,
	|	ЗаказНаВыкуп.КоличествоОстаток
	|ИЗ
	|	втЗаказНаВыкуп КАК ЗаказНаВыкуп
	|ГДЕ
	|	ЗаказНаВыкуп.Штрихкод = ""Не найден штрихкод""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаВыкуп.Штрихкод,
	|	СУММА(ЗаказНаВыкуп.КоличествоЗаказано) КАК КоличествоЗаказано,
	|	ЗаказНаВыкуп.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	втЗаказНаВыкуп КАК ЗаказНаВыкуп
	|ГДЕ
	|	ЗаказНаВыкуп.Штрихкод <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНаВыкуп.Штрихкод,
	|	ЗаказНаВыкуп.КоличествоОстаток
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказНаВыкуп.КоличествоЗаказано) > ЗаказНаВыкуп.КоличествоОстаток
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтгрузкаТоваровУслугТовары.Ссылка КАК ОТУ
	|ИЗ
	|	Документ.ОтгрузкаТоваровУслуг КАК ОТУ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровУслуг.Товары КАК ОтгрузкаТоваровУслугТовары
	|		ПО ОТУ.Ссылка = ОтгрузкаТоваровУслугТовары.Ссылка
	|ГДЕ
	|	ОТУ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ОТУ.ПометкаУдаления = ЛОЖЬ
	|	И ОТУ.Проведен = ЛОЖЬ
	|	И ОТУ.Склад = &Склад_3PD
	|	И ВЫБОР
	|			КОГДА НАЧАЛОПЕРИОДА(ОТУ.ВремяПередачиЗаказаВОфис, ДЕНЬ) = НАЧАЛОПЕРИОДА(ОТУ.Дата, ДЕНЬ)
	|					И (ВЫРАЗИТЬ(ОТУ.Номер КАК СТРОКА(3))) <> ""ТШО""
	|				ТОГДА ОТУ.ВремяПередачиЗаказаВОфис <= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОТУ.ВремяПередачиЗаказаВОфис, ДЕНЬ), СЕКУНДА, &КоличествоСекундДляСрезаЗаказов)
	|			КОГДА НАЧАЛОПЕРИОДА(ОТУ.ВремяПередачиЗаказаВОфис, ДЕНЬ) = НАЧАЛОПЕРИОДА(ОТУ.Дата, ДЕНЬ)
	|					И (ВЫРАЗИТЬ(ОТУ.Номер КАК СТРОКА(3))) = ""ТШО""
	|				ТОГДА ОТУ.ВремяПередачиЗаказаВОфис <= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОТУ.ВремяПередачиЗаказаВОфис, ДЕНЬ), СЕКУНДА, &КоличествоСекундДляСрезаЗаказов - &СмещениеПоЧасПоясу)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ОтгрузкаТоваровУслугТовары.Номенклатура.ДистрибьюторскийКонтракт В(&СписокКонтрактов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтгрузкаТоваровУслугТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗаказНаВыкуп.Номенклатура,
	|	втЗаказНаВыкуп.Артикул,
	|	втЗаказНаВыкуп.Штрихкод,
	|	втЗаказНаВыкуп.КоличествоЗаказано,
	|	втЗаказНаВыкуп.КоличествоОстаток
	|ИЗ
	|	втЗаказНаВыкуп КАК втЗаказНаВыкуп";
	
	ДатаБлокировки = ПараметрыСеанса.НайстрокаБлокировкиПроведенияЗаказовПепси.Получить(Подразделение);
	
	Разница = ДатаБлокировки - НачалоДня(Дата(1,1,1));
	
	Запрос.УстановитьПараметр("ДатаНачала",       ДатаНачала); 
	Запрос.УстановитьПараметр("ДатаОкончания",    КонецДня(ДатаОкончания)); 
	Запрос.УстановитьПараметр("КоличествоСекундДляСрезаЗаказов", Разница);
	Запрос.УстановитьПараметр("Склад_3PD",        Склад_3PD);
	Запрос.УстановитьПараметр("Партнер",          Партнер); 
	Запрос.УстановитьПараметр("СписокКонтрактов", ДистрибьюторскиеКонтракты.ВыгрузитьКолонку("Контракт"));
	Запрос.УстановитьПараметр("ТоргОборудование", Справочники.Номенклатура.НайтиПоКоду("Ц00099711"));
	Запрос.УстановитьПараметр("СмещениеПоЧасПоясу", ВремяСмещенияПоЧасПоясуКЦентральнойБазеВСекундах); 
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаНенайденныхШтрихкодовУпаковок = Результат.Получить(1).Выгрузить();
	ТаблицаПотребностейДляВыкупа         = Результат.Получить(2).Выгрузить();
	ТаблицаСписокОТУ					 = Результат.Получить(3).Выгрузить();
	ТаблицаСконсолидированныхЗаказов	 = Результат.Получить(4).Выгрузить();
	
	Для каждого СтрТаб Из ТаблицаНенайденныхШтрихкодовУпаковок Цикл
		
		Сообщить(ОбщиеФункции._СтрШаблон_("Не удалось найти штрихкод упаковки у товара '%1'. Товар не будет добавлен для выкупа
		|Потребность: %2", СтрТаб.Номенклатура, Окр(СтрТаб.КоличествоЗаказано - СтрТаб.КоличествоОстаток, 0, РежимОкругления.Окр15как20)));
		
	КонецЦикла; 
	
	ШтрихкодаОтсутствующиеВБланке.Очистить();
	
	Для каждого СтрТаб Из ТаблицаПотребностейДляВыкупа Цикл
		
		СтруктураОтбора = Новый Структура("Штрихкод", СтрТаб.Штрихкод);
		
		СтрокиБЗ = БланкЗаказ.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиБЗ.Количество() > 1 Тогда
			Сообщить(ОбщиеФункции._СтрШаблон_("По штрихкоду '%1' найдено несколько строк в бланк заказе. Обработайте дубли и повторите процедуру выкупа повторно", СтрТаб.Штрихкод), СтатусСообщения.Внимание);
			Продолжить;
		ИначеЕсли СтрокиБЗ.Количество() = 1 Тогда
			
			СтрокаБЗ = СтрокиБЗ.Получить(0);
			СтрокаБЗ.Заказано = Окр(СтрТаб.КоличествоЗаказано, 0, РежимОкругления.Окр15как20);
			СтрокаБЗ.Остаток = Цел(СтрТаб.КоличествоОстаток);
			СтрокаБЗ.Потребность = СтрокаБЗ.Заказано - СтрокаБЗ.Остаток;
			
		Иначе
			
			СтрокаАналога = БланкЗаказ.Найти(СтрТаб.Штрихкод, "Штрихкод");
			
			Если ЗначениеЗаполнено(СтрокаАналога) Тогда
				
				СтрокаАналога.Заказано = Окр(СтрТаб.КоличествоЗаказано, 0, РежимОкругления.Окр15как20);
				СтрокаАналога.Остаток = Цел(СтрТаб.КоличествоОстаток);
				СтрокаАналога.Потребность = СтрокаАналога.Заказано - СтрокаАналога.Остаток;
				СтрокаАналога.АвтоПодборПоШК = Истина;
				
			Иначе
				
				СтрНетШК = ШтрихкодаОтсутствующиеВБланке.Добавить();
				ПодобратьНоменклатуруПоШК(СтрТаб.Штрихкод, СтрНетШК.Номенклатура, СтрНетШК.Артикул);
				СтрНетШК.Заказано = Окр(СтрТаб.КоличествоЗаказано, 0, РежимОкругления.Окр15как20);
				СтрНетШК.Остаток = Цел(СтрТаб.КоличествоОстаток);
				СтрНетШК.Потребность = СтрНетШК.Заказано - СтрНетШК.Остаток;
				СтрНетШК.Штрихкод = СтрТаб.Штрихкод;
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ШтрихкодаОтсутствующиеВБланке) Тогда
		
		ТелоПисьма = "Просьба добавить в заказ:
		|
		|";
		
		Для каждого СтрТаб Из ШтрихкодаОтсутствующиеВБланке Цикл
			
			ТелоПисьма = ТелоПисьма + ОбщиеФункции._СтрШаблон_("%1	%2	%3	- %4", СтрТаб.Артикул, СтрТаб.Штрихкод, СтрТаб.Номенклатура, СтрТаб.Потребность) + Символы.ПС;
			
		КонецЦикла;
		
		Сообщить(ТелоПисьма);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура СформироватьТаблицуТоваровСОХ(ГруппаНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка, Номенклатура.Артикул
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В ИЕРАРХИИ(&ГруппаНоменклатуры)";
	
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", ГруппаНоменклатуры);
	
	ТаблицаТоваровСОХ = Запрос.Выполнить().Выгрузить();
	
	ТаблицаТоваровСОХ.Индексы.Добавить("Артикул");
	
КонецПроцедуры

Процедура СформироватьТаблицаНоменклатуры3ПД()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка, Номенклатура.Артикул
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ДистрибьюторскийКонтракт В(&ДистрибьюторскийКонтракт)
	|	И Номенклатура.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ДистрибьюторскийКонтракт", ДистрибьюторскиеКонтракты.ВыгрузитьКолонку("Контракт"));
	
	ТаблицаНоменклатуры3ПД = Запрос.Выполнить().Выгрузить();
	
	ТаблицаНоменклатуры3ПД.Индексы.Добавить("Артикул");
	
КонецПроцедуры

Процедура СоздатьДокументВыкупТовараСХранения(ТЗ_СводныйЗаказ) Экспорт
	
	Если ТЗ_СводныйЗаказ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить("Формируется документ ""Выкуп товара с хранения"".");
	
	// Получим таблицу с данными о заказанном количестве.
	КопияБланка = ТЗ_СводныйЗаказ.Скопировать(,"Артикул, Штрихкод, Наименование, Потребность");
	КопияБланка.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КопияБланка.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Партнер) Тогда
		Сообщить("Не заполнено обязательное поле 'Партнер'", СтатусСообщения.ОченьВажное);
		Возврат;
	КонецЕсли; 
	
	СвойстваПартнера = РегистрыСведений.ДополнительныеРеквизиты_3PL.ПолучитьСвойстваОбъекта(Партнер);
	
	ГруппаНоменклатуры = СвойстваПартнера.ГруппаНоменклатуры;
	
	Свойство_ОсновнаяКарточкаНоменклатуры = ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьСвойствоПоИмени("ОсновнаяКарточкаНоменклатуры");
	
	МассивОшибок = Новый Массив;
	
	СформироватьТаблицуТоваровСОХ(ГруппаНоменклатуры);
	
	Если ТаблицаНоменклатуры3ПД = Неопределено Тогда
		СформироватьТаблицаНоменклатуры3ПД();		
	КонецЕсли; 
	
	Для каждого СтрТаб Из ТЗ_СводныйЗаказ Цикл
		
		СтрОсновнаяНоменклатура = ТаблицаТоваровСОХ.Найти(СтрТаб.Артикул, "Артикул");
		
		Основная = Неопределено;
		Если СтрОсновнаяНоменклатура <> Неопределено Тогда
			Основная = СтрОсновнаяНоменклатура.Ссылка;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Основная) Тогда
			МассивОшибок.Добавить(ОбщиеФункции._СтрШаблон_("Не удалось найти номенклатуру с артикулом '%1' в группе номенклатуры '%2'",
				СтрТаб.Артикул, ГруппаНоменклатуры));
			Продолжить;
		КонецЕсли; 
		
		Если Строка(Партнер) = "3PL_Pepsico_Омск"  Тогда
			Подчиненная = ОбщиеФункции.ВернутьОбъектПоЗначениюСвойства(Свойство_ОсновнаяКарточкаНоменклатуры, Основная);
			
			Если НЕ ЗначениеЗаполнено(Подчиненная) Тогда
				МассивОшибок.Добавить(ОбщиеФункции._СтрШаблон_("Не удалось найти подчиненную номенклатуру для карточки '%1' из группы номенклатуры '%2'",
				Основная, ГруппаНоменклатуры));
				
				Продолжить;	
			КонецЕсли;	
		Иначе
			
			СтрНоменклатура3ПД = ТаблицаНоменклатуры3ПД.Найти(СтрТаб.Артикул, "Артикул");
			Если СтрНоменклатура3ПД <> Неопределено Тогда
				Подчиненная = СтрНоменклатура3ПД.Ссылка;
			Иначе
				Подчиненная = Неопределено;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Подчиненная) Тогда
				МассивОшибок.Добавить(ОбщиеФункции._СтрШаблон_("Не удалось найти 3PD номенклатуру по артикулу '%1'. Товар не попадет в выкуп", СтрТаб.Артикул));
				
				Продолжить;	
			КонецЕсли;
			
		КонецЕсли; 
		
		НовСтр = КопияБланка.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтрТаб);
			
		НовСтр.Номенклатура = Подчиненная;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МассивОшибок) Тогда
		
		Для каждого Элемент Из МассивОшибок Цикл
			
			Сообщить(Элемент, СтатусСообщения.ОченьВажное);
			
		КонецЦикла;
		
		Если НЕ СоздатьБЗПриНаличииОшибок Тогда
			ВызватьИсключение "Не удалось создать документ 'ВыкупТовараСХранения'. Ошибки смотреть в служебных сообщениях";
		КонецЕсли;
		
	КонецЕсли;
	
	// Создадим новый документ-объект "ВыкупТовараСХранения" и заполним шапку документа.
	ДокВыкупТовараСХранения = Документы.ВыкупТовараСХранения.СоздатьДокумент();
	
	ДокВыкупТовараСХранения.Дата = ТекущаяДатаСеанса();
	ДокВыкупТовараСХранения.Контрагент = Контрагент;
	ДокВыкупТовараСХранения.Склад = Склад;
	ДокВыкупТовараСХранения.СкладПолучатель = Склад_3PD;
	ДокВыкупТовараСХранения.Организация = Организация;
	ДокВыкупТовараСХранения.ДоговорКонтрагента = ДоговорКонтрагента;
	ДокВыкупТовараСХранения.Основание = "Выкуп товаров, хранящихся на складе";
	ДокВыкупТовараСХранения.Автор = ПараметрыСеанса.ТекущийПользователь;
	ДокВыкупТовараСХранения.ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ДокВыкупТовараСХранения.ТипЦен = ТипЦен;
	ДокВыкупТовараСХранения.УчитыватьНДС = Истина;
	ДокВыкупТовараСХранения.СуммаВключаетНДС = ТипЦен.ЦенаВключаетНДС;
	ДокВыкупТовараСХранения.РегистрироватьЦеныПоставщика = Ложь;
	
	// Заполним табличную часть "Товары" документа "ВыкупТовараСХранения".
	Для каждого ТекСтрокаТоварыКВыкупу Из КопияБланка Цикл
		
		НоваяСтрока = ДокВыкупТовараСХранения.Товары.Добавить();
		
		НоваяСтрока.Номенклатура = ТекСтрокаТоварыКВыкупу.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТоварыКВыкупу.Номенклатура.ЕдиницаЗакупок3;
		НоваяСтрока.Коэффициент = ТекСтрокаТоварыКВыкупу.Номенклатура.ЕдиницаЗакупок3.Коэффициент;
		НоваяСтрока.КоличествоПлан = ТекСтрокаТоварыКВыкупу.Потребность;
		НоваяСтрока.СтавкаНДС = ТекСтрокаТоварыКВыкупу.Номенклатура.СтавкаНДС;
		
	КонецЦикла;
	
	// Заполним табличную часть "ДокументыОснования" документа "ВыкупТовараСХранения"
	Если ЗначениеЗаполнено(ТаблицаСписокОТУ) Тогда
		
		Для каждого ТекСтрокаСписокОТУ ИЗ ТаблицаСписокОТУ Цикл
			НоваяСтрока = ДокВыкупТовараСХранения.ДокументыОснования.Добавить();
			НоваяСтрока.ОтгрузкаТоваровУслуг = ТекСтрокаСписокОТУ.ОТУ;
		КонецЦикла;
		
	КонецЕсли;
	
	// Пробуем записать документ.
	ДокВыкупТовараСХранения.Записать(РежимЗаписиДокумента.Запись);
	//
	
КонецПроцедуры

Функция ПолучитьИмяФайлаВыкупа(ПутьКФайлу)
	
	ИсходныйФайл = Новый Файл(ПутьКФайлу);
	ДатаФормированияФайлаВыкупа = Формат(ТекущаяДата(), "ДФ=""ддММгггг_ЧЧмм""");
	пПутьКФайлуВыкупа = ИсходныйФайл.Путь + "Выкуп_" + ИсходныйФайл.ИмяБезРасширения + "_" + ДатаФормированияФайлаВыкупа + ИсходныйФайл.Расширение;
	
	Возврат пПутьКФайлуВыкупа;
	
КонецФункции

Процедура ВывестиОстаткиПоТоварамОтсутсвующимВБланкеЗаказа()
	
	ТабДок = ПолучитьТабличныйДокументОстаткиПоТоварамОтсутсвующимВБланкеЗаказа();
	ТабДок.Показать();
	
КонецПроцедуры

Функция ПолучитьТабличныйДокументОстаткиПоТоварамОтсутсвующимВБланкеЗаказа() Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ОстаткиПоТоварамОтсутствующимВБланкеЗаказа");
	
	ОбластьШапкаОтчета = Макет.ПолучитьОбласть("ШапкаОтчета");
	ТабДок.Вывести(ОбластьШапкаОтчета);
	
	ЗапросНеИспользованныеТоварыСОстатками = Новый Запрос;
	ЗапросНеИспользованныеТоварыСОстатками.Текст =
	"ВЫБРАТЬ
	|	ЗапасыНаСкладахОстатки.Номенклатура,
	|	ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ЗапасыНаСкладахОстатки.Номенклатура.Артикул КАК Артикул,
	|	СоответствияНоменклатуры_3PL.Штрихкод КАК Штрихкод,
	|	ЗапасыНаСкладахОстатки.Качество,
	|	ЗапасыНаСкладахОстатки.СерияНоменклатуры,
	|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток
	|ИЗ
	|	РегистрСведений.СоответствияНоменклатуры_3PL КАК СоответствияНоменклатуры_3PL
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(&ДатаОкончания, Склад = &Склад) КАК ЗапасыНаСкладахОстатки
	|		ПО СоответствияНоменклатуры_3PL.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
	|ГДЕ
	|	СоответствияНоменклатуры_3PL.Партнер = &Партнер
	|	И СоответствияНоменклатуры_3PL.Использование = ЛОЖЬ
	|	И ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) <> 0";
	
	ЗапросНеИспользованныеТоварыСОстатками.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	ЗапросНеИспользованныеТоварыСОстатками.УстановитьПараметр("Склад", Склад);
	ЗапросНеИспользованныеТоварыСОстатками.УстановитьПараметр("Партнер", Партнер);
	
	ТаблицаНеИспользованныеТоварыСОстатками = ЗапросНеИспользованныеТоварыСОстатками.Выполнить().Выгрузить();
	
	Для каждого ТекСтрока Из ТаблицаНеИспользованныеТоварыСОстатками Цикл
		
		ОбластьСтрокаОтчета = Макет.ПолучитьОбласть("СтрокаОтчета");
		ОбластьСтрокаОтчета.Параметры.Заполнить(ТекСтрока);
		ТабДок.Вывести(ОбластьСтрокаОтчета);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

Процедура ПроверитьНаДублиДанныеСводногоЗаказа(ТЗ_СводныйЗаказ)
	
	ТекстСообщенияОДублях = "";
	
	Если ПроверитьНаДублиДанныеФайлаСводныйЗаказ(ТЗ_СводныйЗаказ, ТекстСообщенияОДублях) = Истина Тогда
		Если РежимОтладки = Истина Тогда
			Сообщить(ТекстСообщенияОДублях);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьНаДублиДанныеФайлаСводныйЗаказ(ТЗ_СводныйЗаказ, ТекстСообщенияОДублях)
	
	// Анализируем дубли по колонке "Штрихкод".
	ЗапросДублиШтрихкода = Новый Запрос;
	ЗапросДублиШтрихкода.Текст =
	"ВЫБРАТЬ
	|	ТЗ_СводныйЗаказ.Штрихкод КАК Штрихкод
	|ПОМЕСТИТЬ ТЗ_СводныйЗаказ
	|ИЗ
	|	&ТЗ КАК ТЗ_СводныйЗаказ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_СводныйЗаказ.Штрихкод КАК Штрихкод,
	|	КОЛИЧЕСТВО(ТЗ_СводныйЗаказ.Штрихкод) КАК КоличествоШтрихкодов
	|ИЗ
	|	ТЗ_СводныйЗаказ КАК ТЗ_СводныйЗаказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЗ_СводныйЗаказ.Штрихкод
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ТЗ_СводныйЗаказ.Штрихкод) > 1";
	
	ЗапросДублиШтрихкода.УстановитьПараметр("ТЗ", ТЗ_СводныйЗаказ);	
	
	ВыборкаДублиШтрихкода = ЗапросДублиШтрихкода.Выполнить().Выбрать();
	
	Если ВыборкаДублиШтрихкода.Количество() > 0 Тогда
		
		Если ЗначениеЗаполнено(ТекстСообщенияОДублях) Тогда
			ТекстСообщенияОДублях = ТекстСообщенияОДублях + Символы.ПС;
		КонецЕсли;
		
		ТекстСообщенияОДублях = ТекстСообщенияОДублях + "В файле сводного заказа обнаружены дубли в колонке ""Штрихкод"":";
		
		Пока ВыборкаДублиШтрихкода.Следующий() Цикл
			ТекстСообщенияОДублях = ТекстСообщенияОДублях + Символы.ПС;
			ТекстСообщенияОДублях = ТекстСообщенияОДублях + " - " + ВыборкаДублиШтрихкода.Штрихкод;
		КонецЦикла;
		
	КонецЕсли;
	
	// Анализируем дубли по колонке "КодPepsico".
	ЗапросДублиКодаПепси = Новый Запрос;
	ЗапросДублиКодаПепси.Текст =
	"ВЫБРАТЬ
	|	ТЗ_СводныйЗаказ.КодPepsico КАК КодPepsico
	|ПОМЕСТИТЬ ТЗ_СводныйЗаказ
	|ИЗ
	|	&ТЗ КАК ТЗ_СводныйЗаказ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодPepsico
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_СводныйЗаказ.КодPepsico КАК КодPepsico,
	|	КОЛИЧЕСТВО(ТЗ_СводныйЗаказ.КодPepsico) КАК КоличествоКодовPepsico
	|ИЗ
	|	ТЗ_СводныйЗаказ КАК ТЗ_СводныйЗаказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЗ_СводныйЗаказ.КодPepsico
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ТЗ_СводныйЗаказ.КодPepsico) > 1";
	
	ЗапросДублиКодаПепси.УстановитьПараметр("ТЗ", ТЗ_СводныйЗаказ);	
	
	ВыборкаДублиКодаПепси = ЗапросДублиКодаПепси.Выполнить().Выбрать();
	
	Если ВыборкаДублиКодаПепси.Количество() > 0 Тогда
		
		Если ЗначениеЗаполнено(ТекстСообщенияОДублях) Тогда
			ТекстСообщенияОДублях = ТекстСообщенияОДублях + Символы.ПС;
		КонецЕсли;
		
		ТекстСообщенияОДублях = ТекстСообщенияОДублях + "В файле сводного заказа обнаружены дубли в колонке ""Код Pepsico"":";
		
		Пока ВыборкаДублиКодаПепси.Следующий() Цикл
			ТекстСообщенияОДублях = ТекстСообщенияОДублях + Символы.ПС;
			ТекстСообщенияОДублях = ТекстСообщенияОДублях + " - " + ВыборкаДублиКодаПепси.КодPepsico;
		КонецЦикла;
		
	КонецЕсли;
	
	// Возвращаем результат проверки на дубли.
	Если ВыборкаДублиШтрихкода.Количество() > 0 ИЛИ ВыборкаДублиКодаПепси.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура СохранитьФайлыИзПочтыПепсиВПапкуТекущийБланкЗаказ() Экспорт
	
	// Сначала сохраняем все вложения в папку ПутьКПапкеНеобработанные.
	ПрофильПочтыПепси = ПолучитьИнтернетПрофильДляПочтыПепси();
	ПочтаПепси = Новый ИнтернетПочта;
	ПочтаПепси.Подключиться(ПрофильПочтыПепси);
	
	Письма = ПочтаПепси.Выбрать(Истина);
	
	Для каждого ТекПисьмо Из Письма Цикл
		
		Для каждого Вложение из ТекПисьмо.Вложения Цикл
			
			НовоеИмяФайла = ПутьКПапкеНеобработанные + Вложение.Name;
			Вложение.Данные.Записать(НовоеИмяФайла);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПочтаПепси.Отключиться();
	
	// Затем файлы, удовлетворяющие маске, переносим в папку ПутьКПапкеТекущийБланкЗаказ.
	МассивФайлов = НайтиФайлы(ПутьКПапкеНеобработанные, МаскаИмениФайлаБланкЗаказ, Ложь);
	
	// Если в почте были файлы бланк-заказов, то ранее обработанные файлы бланк-заказов из основной папки переносим в папку архива.
	Если МассивФайлов.Количество() > 0 Тогда
		МассивРанееОбработанныхФайловБланкЗаказ = НайтиФайлы(ПутьКПапкеТекущийБланкЗаказ, МаскаИмениФайлаБланкЗаказ, Ложь);
		Для каждого ТекФайлРанееОбработанногоБланкЗаказа Из МассивРанееОбработанныхФайловБланкЗаказ Цикл
			КопироватьФайл(ТекФайлРанееОбработанногоБланкЗаказа.ПолноеИмя, ПутьКПапкеАрхивБланкЗаказ + ТекФайлРанееОбработанногоБланкЗаказа.Имя);
		КонецЦикла;
		УдалитьФайлы(ПутьКПапкеТекущийБланкЗаказ, МаскаИмениФайлаБланкЗаказ);
	КонецЕсли;
	
	Для каждого ТекФайлБланкЗаказа Из МассивФайлов Цикл
		КопироватьФайл(ТекФайлБланкЗаказа.ПолноеИмя, ПутьКПапкеТекущийБланкЗаказ + ТекФайлБланкЗаказа.Имя);
	КонецЦикла;
	
	УдалитьФайлы(ПутьКПапкеНеобработанные, МаскаИмениФайлаБланкЗаказ);
	
КонецПроцедуры

Функция ПолучитьИнтернетПрофильДляПочтыПепси()
	
	УчетнаяЗапись = УчетнаяЗаписьЭлектроннойПочты;
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	
	Профиль.АдресСервераPOP3 = УчетнаяЗапись.POP3Сервер;
	Профиль.АдресСервераSMTP = УчетнаяЗапись.SMTPСервер;
	Если УчетнаяЗапись.ВремяОжиданияСервера > 0 Тогда
		Профиль.ВремяОжидания = УчетнаяЗапись.ВремяОжиданияСервера;
	КонецЕсли; 
	Профиль.Пароль           = УчетнаяЗапись.Пароль;
	Профиль.Пользователь     = УчетнаяЗапись.Логин;
	Профиль.ПортPOP3         = УчетнаяЗапись.ПортPOP3;
	Профиль.ПортSMTP         = УчетнаяЗапись.ПортSMTP;
	
	Если УчетнаяЗапись.ТребуетсяSMTPАутентификация Тогда
		Профиль.ПарольSMTP       = УчетнаяЗапись.ПарольSMTP;
		Профиль.ПользовательSMTP = УчетнаяЗапись.ЛогинSMTP;
	Иначе
		Профиль.ПарольSMTP       = УчетнаяЗапись.Пароль;
		Профиль.ПользовательSMTP = УчетнаяЗапись.Логин;
	КонецЕсли;
	
	Возврат Профиль;
	
КонецФункции

Процедура ОтправитьПисьмоСБланкЗаказомНаВыкуп(пПутьКФайлуВыкупа) Экспорт
	
	МассивФайловДляОтправки = Новый Массив;
	МассивФайловДляОтправки.Добавить(пПутьКФайлуВыкупа);
	
	ПараметрыОтправкиПисьма = Новый Структура();
	ПараметрыОтправкиПисьма.Вставить("ПочтовыйПрофиль", ПолучитьИнтернетПрофильДляПочтыПепси());
	ПараметрыОтправкиПисьма.Вставить("Тема", "Файл бланк-заказа для выкупа");
	ПараметрыОтправкиПисьма.Вставить("ИмяОтправителя", "ТД Шкуренко");
	ПараметрыОтправкиПисьма.Вставить("Отправитель", УчетнаяЗаписьЭлектроннойПочты.АдресЭлектроннойПочты);
	ПараметрыОтправкиПисьма.Вставить("Вложения", МассивФайловДляОтправки);
	ПараметрыОтправкиПисьма.Вставить("Получатели", EMailДляОтправкиБланкЗаказа);
	
	РаботаСЭлектроннойПочтой.ОтправитьПисьмо(ПараметрыОтправкиПисьма);
	
КонецПроцедуры

//++УсачевАА 12.21
Процедура ЗапуститьОбработкуПроведениеДокументовПослеВыкупаВФоне(ИденификаторФоновогоЗадания, СтруктураПараметров, внОбработка) Экспорт

	МассивПараметров = Новый Массив;
	
	Обработка = внОбработка.ХранилищеВнешнейОбработки;
	
	ИмяПроцедуры = "СкорректироватьКоличествоТовараОТУПоОстаткамСУчетомСкидочныхАкцийПепси";
	
	МассивПараметров.Добавить(Обработка);
	МассивПараметров.Добавить(ИмяПроцедуры);
	МассивПараметров.Добавить(СтруктураПараметров);
	
	ФоновоеЗадание = ФоновыеЗадания.Выполнить("СерверныеФункции.ВыполнитьОбработку", МассивПараметров);
		
	ИденификаторФоновогоЗадания = ФоновоеЗадание.УникальныйИдентификатор;

КонецПроцедуры
//--УсачевАА 12.21

СоздатьБЗПриНаличииОшибок = Истина;